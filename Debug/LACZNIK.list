
LACZNIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800d8d4  0800d8d4  0000e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9e0  0800d9e0  0000f0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d9e0  0800d9e0  0000e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9e8  0800d9e8  0000f0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9e8  0800d9e8  0000e9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9ec  0800d9ec  0000e9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800d9f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c00  200000a4  0800da94  0000f0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20010ca4  0800da94  0000fca4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002244b  00000000  00000000  0000f0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e9f  00000000  00000000  0003151d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015af  00000000  00000000  00037ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033614  00000000  00000000  0003959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f64  00000000  00000000  0006cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127ffe  00000000  00000000  0008fb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b7b15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b14  00000000  00000000  001b7b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001bf66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d8bc 	.word	0x0800d8bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800d8bc 	.word	0x0800d8bc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Audio_passThrough>:
void AudioInit(uint32_t AudioFreq);

/**
 * @brief Inicjalizacja modułu audio
 */
void Audio_passThrough(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0


    /* Initialize the codec */
	AudioInit(frequency);
 8000570:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <Audio_passThrough+0x8c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fb51 	bl	8000c1c <AudioInit>

    if (HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)record_buffer, BUFFER_SIZE_SAMPLES))
 800057a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800057e:	491f      	ldr	r1, [pc, #124]	@ (80005fc <Audio_passThrough+0x90>)
 8000580:	481f      	ldr	r0, [pc, #124]	@ (8000600 <Audio_passThrough+0x94>)
 8000582:	f007 f981 	bl	8007888 <HAL_SAI_Receive_DMA>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <Audio_passThrough+0x26>
    {
    	Error_Handler();
 800058c:	f000 ff4a 	bl	8001424 <Error_Handler>
        return 1;
 8000590:	e031      	b.n	80005f6 <Audio_passThrough+0x8a>
    }


    if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) play_buffer, BUFFER_SIZE_SAMPLES) !=  HAL_OK)
 8000592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000596:	491b      	ldr	r1, [pc, #108]	@ (8000604 <Audio_passThrough+0x98>)
 8000598:	481b      	ldr	r0, [pc, #108]	@ (8000608 <Audio_passThrough+0x9c>)
 800059a:	f007 f8c5 	bl	8007728 <HAL_SAI_Transmit_DMA>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <Audio_passThrough+0x3e>
    {
    	Error_Handler();
 80005a4:	f000 ff3e 	bl	8001424 <Error_Handler>
        return 1;
 80005a8:	e025      	b.n	80005f6 <Audio_passThrough+0x8a>

    }



    printf("Audio initialized successfully!\n");
 80005aa:	4818      	ldr	r0, [pc, #96]	@ (800060c <Audio_passThrough+0xa0>)
 80005ac:	f00c fd86 	bl	800d0bc <puts>

    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <Audio_passThrough+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
     while (1)
     {
         /* 1st or 2nd half of the record buffer ready for being copied
         to the Playback buffer */
         if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <Audio_passThrough+0xa4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d013      	beq.n	80005e6 <Audio_passThrough+0x7a>
         {
             /* Copy half of the record buffer to the playback buffer */
       	  if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <Audio_passThrough+0xa4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d106      	bne.n	80005d4 <Audio_passThrough+0x68>
       	  {

       	      CopyBuffer(&play_buffer[0],
 80005c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005ca:	490c      	ldr	r1, [pc, #48]	@ (80005fc <Audio_passThrough+0x90>)
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <Audio_passThrough+0x98>)
 80005ce:	f000 f827 	bl	8000620 <CopyBuffer>
 80005d2:	e005      	b.n	80005e0 <Audio_passThrough+0x74>
					     BUFFER_SIZE_SAMPLES / 2);


       	  } else {
       	      /* if(audio_rec_buffer_state == BUFFER_OFFSET_FULL) */
       	      CopyBuffer(&play_buffer[BUFFER_SIZE_SAMPLES / 2],
 80005d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005d8:	490e      	ldr	r1, [pc, #56]	@ (8000614 <Audio_passThrough+0xa8>)
 80005da:	480f      	ldr	r0, [pc, #60]	@ (8000618 <Audio_passThrough+0xac>)
 80005dc:	f000 f820 	bl	8000620 <CopyBuffer>
       	                 &record_buffer[BUFFER_SIZE_SAMPLES / 2],
						 BUFFER_SIZE_SAMPLES / 2);

       	  }
             /* Wait for next data */
             audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <Audio_passThrough+0xa4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
         }
         if (audio_tx_buffer_state)
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <Audio_passThrough+0xb0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0e3      	beq.n	80005b6 <Audio_passThrough+0x4a>
         {
             audio_tx_buffer_state = 0;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <Audio_passThrough+0xb0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
         if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80005f4:	e7df      	b.n	80005b6 <Audio_passThrough+0x4a>
         }
     } // end while(1)
}
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	200020c0 	.word	0x200020c0
 8000600:	20004144 	.word	0x20004144
 8000604:	200000c0 	.word	0x200000c0
 8000608:	200040c0 	.word	0x200040c0
 800060c:	0800d8d4 	.word	0x0800d8d4
 8000610:	200041c8 	.word	0x200041c8
 8000614:	200030c0 	.word	0x200030c0
 8000618:	200010c0 	.word	0x200010c0
 800061c:	200041cc 	.word	0x200041cc

08000620 <CopyBuffer>:
    }
}

// Copy audio sample buffer from source to destination
static void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint32_t BufferSize)
{
 8000620:	b480      	push	{r7}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < BufferSize; i++)
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e00d      	b.n	8000652 <CopyBuffer+0x32>
    {
        pbuffer1[i] = pbuffer2[i];
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	441a      	add	r2, r3
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	68f9      	ldr	r1, [r7, #12]
 8000644:	440b      	add	r3, r1
 8000646:	f9b2 2000 	ldrsh.w	r2, [r2]
 800064a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < BufferSize; i++)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3ed      	bcc.n	8000636 <CopyBuffer+0x16>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	371c      	adds	r7, #28
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SAIx_Out_Init>:

static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8000670:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000672:	4a33      	ldr	r2, [pc, #204]	@ (8000740 <SAIx_Out_Init+0xd8>)
 8000674:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 8000676:	4b31      	ldr	r3, [pc, #196]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <SAIx_Out_Init+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000684:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000686:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800068c:	4a2b      	ldr	r2, [pc, #172]	@ (800073c <SAIx_Out_Init+0xd4>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SAIx_Out_Init+0xd4>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800069e:	4b27      	ldr	r3, [pc, #156]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80006aa:	4b24      	ldr	r3, [pc, #144]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 80006b6:	4b21      	ldr	r3, [pc, #132]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c2:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_out_sai.FrameInit.FrameLength       = 64;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006e4:	2240      	movs	r2, #64	@ 0x40
 80006e6:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006ea:	2220      	movs	r2, #32
 80006ec:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006f4:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <SAIx_Out_Init+0xd4>)
 80006fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000702:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000706:	2200      	movs	r2, #0
 8000708:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <SAIx_Out_Init+0xd4>)
 800070c:	2200      	movs	r2, #0
 800070e:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_out_sai.SlotInit.SlotNumber     = 4;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000712:	2204      	movs	r2, #4
 8000714:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000718:	220f      	movs	r2, #15
 800071a:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_out_sai);
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <SAIx_Out_Init+0xd4>)
 800071e:	f006 fe4f 	bl	80073c0 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <SAIx_Out_Init+0xd4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <SAIx_Out_Init+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200040c0 	.word	0x200040c0
 8000740:	40015804 	.word	0x40015804

08000744 <SAIx_In_Init>:


static void SAIx_In_Init(uint32_t AudioFreq)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800074c:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <SAIx_In_Init+0xd0>)
 800074e:	4a32      	ldr	r2, [pc, #200]	@ (8000818 <SAIx_In_Init+0xd4>)
 8000750:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 8000752:	4b30      	ldr	r3, [pc, #192]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <SAIx_In_Init+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000760:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000762:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8000768:	4a2a      	ldr	r2, [pc, #168]	@ (8000814 <SAIx_In_Init+0xd0>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800076e:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000770:	2203      	movs	r2, #3
 8000772:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <SAIx_In_Init+0xd0>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8000780:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000788:	2200      	movs	r2, #0
 800078a:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800078c:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <SAIx_In_Init+0xd0>)
 800078e:	2200      	movs	r2, #0
 8000790:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000794:	2201      	movs	r2, #1
 8000796:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <SAIx_In_Init+0xd0>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007be:	2240      	movs	r2, #64	@ 0x40
 80007c0:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007c4:	2220      	movs	r2, #32
 80007c6:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ce:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007f2:	220f      	movs	r2, #15
 80007f4:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_in_sai);
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007f8:	f006 fde2 	bl	80073c0 <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <SAIx_In_Init+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <SAIx_In_Init+0xd0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20004144 	.word	0x20004144
 8000818:	40015824 	.word	0x40015824

0800081c <SAIx_In_DeInit>:


static void SAIx_In_DeInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <SAIx_In_DeInit+0x24>)
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <SAIx_In_DeInit+0x28>)
 8000824:	601a      	str	r2, [r3, #0]
    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <SAIx_In_DeInit+0x24>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <SAIx_In_DeInit+0x24>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000834:	601a      	str	r2, [r3, #0]

    HAL_SAI_DeInit(&haudio_in_sai);
 8000836:	4802      	ldr	r0, [pc, #8]	@ (8000840 <SAIx_In_DeInit+0x24>)
 8000838:	f006 ff40 	bl	80076bc <HAL_SAI_DeInit>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20004144 	.word	0x20004144
 8000844:	40015824 	.word	0x40015824

08000848 <SAIx_Out_DeInit>:


static void SAIx_Out_DeInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <SAIx_Out_DeInit+0x24>)
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <SAIx_Out_DeInit+0x28>)
 8000850:	601a      	str	r2, [r3, #0]
    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <SAIx_Out_DeInit+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <SAIx_Out_DeInit+0x24>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000860:	601a      	str	r2, [r3, #0]

    HAL_SAI_DeInit(&haudio_out_sai);
 8000862:	4802      	ldr	r0, [pc, #8]	@ (800086c <SAIx_Out_DeInit+0x24>)
 8000864:	f006 ff2a 	bl	80076bc <HAL_SAI_DeInit>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200040c0 	.word	0x200040c0
 8000870:	40015804 	.word	0x40015804

08000874 <SAI_Clock_Configuration>:

void SAI_Clock_Configuration(uint32_t AudioFreq)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0a6      	sub	sp, #152	@ 0x98
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2290      	movs	r2, #144	@ 0x90
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f00c fcf9 	bl	800d27c <memset>

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f006 fb04 	bl	8006e9c <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if ((AudioFreq == AUDIO_FREQUENCY_11K) ||
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800089a:	4293      	cmp	r3, r2
 800089c:	d009      	beq.n	80008b2 <SAI_Clock_Configuration+0x3e>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d004      	beq.n	80008b2 <SAI_Clock_Configuration+0x3e>
        (AudioFreq == AUDIO_FREQUENCY_22K) ||
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d112      	bne.n	80008d8 <SAI_Clock_Configuration+0x64>
        (AudioFreq == AUDIO_FREQUENCY_44K))
    {
        /* Configure PLLSAI prescalers for ~11.289 MHz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80008b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008b6:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80008b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80008be:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80008c2:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80008c8:	2313      	movs	r3, #19
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 febb 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	e011      	b.n	80008fc <SAI_Clock_Configuration+0x88>
    }
    else
    {
        /* Configure PLLSAI prescalers for ~49.142 MHz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80008d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008dc:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80008de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80008e4:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80008e8:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80008ea:	2307      	movs	r3, #7
 80008ec:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fea8 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
    }

    /* Route SAI2 as source for DFSDM1 audio clock */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 80008fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
    rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8000902:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f005 fe9c 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000914:	f005 fe66 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8000918:	4603      	mov	r3, r0
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <SAI_Clock_Configuration+0xd0>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	099b      	lsrs	r3, r3, #6
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f8bd 	bl	8003aa2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000928:	2004      	movs	r0, #4
 800092a:	f003 f8c7 	bl	8003abc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	f04f 30ff 	mov.w	r0, #4294967295
 8000936:	f003 f88a 	bl	8003a4e <HAL_NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3798      	adds	r7, #152	@ 0x98
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	10624dd3 	.word	0x10624dd3

08000948 <Sai_Out_MspInit>:



void Sai_Out_MspInit(SAI_HandleTypeDef *hsai)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8000950:	4b48      	ldr	r3, [pc, #288]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000954:	4a47      	ldr	r2, [pc, #284]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 8000956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800095a:	6453      	str	r3, [r2, #68]	@ 0x44
 800095c:	4b45      	ldr	r3, [pc, #276]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]


  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8000968:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	4a41      	ldr	r2, [pc, #260]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 800096e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000972:	6313      	str	r3, [r2, #48]	@ 0x30
 8000974:	4b3f      	ldr	r3, [pc, #252]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8000980:	4b3c      	ldr	r3, [pc, #240]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	4a3b      	ldr	r2, [pc, #236]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6313      	str	r3, [r2, #48]	@ 0x30
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8000998:	2370      	movs	r3, #112	@ 0x70
 800099a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80009a8:	2306      	movs	r3, #6
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4831      	ldr	r0, [pc, #196]	@ (8000a78 <Sai_Out_MspInit+0x130>)
 80009b4:	f004 f884 	bl	8004ac0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482e      	ldr	r0, [pc, #184]	@ (8000a7c <Sai_Out_MspInit+0x134>)
 80009c4:	f004 f87c 	bl	8004ac0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	4a29      	ldr	r2, [pc, #164]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 80009ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <Sai_Out_MspInit+0x12c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a26      	ldr	r2, [pc, #152]	@ (8000a80 <Sai_Out_MspInit+0x138>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d137      	bne.n	8000a5a <Sai_Out_MspInit+0x112>
  {
    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80009f0:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 80009f2:	2240      	movs	r2, #64	@ 0x40
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80009f6:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80009fc:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 80009fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a02:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a0a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a12:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a22:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <Sai_Out_MspInit+0x140>)
 8000a40:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a46:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000a48:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a50:	f003 fce0 	bl	8004414 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <Sai_Out_MspInit+0x13c>)
 8000a56:	f003 fc2f 	bl	80042b8 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	210e      	movs	r1, #14
 8000a5e:	2039      	movs	r0, #57	@ 0x39
 8000a60:	f002 fff5 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000a64:	2039      	movs	r0, #57	@ 0x39
 8000a66:	f003 f80e 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	40015804 	.word	0x40015804
 8000a84:	200041d0 	.word	0x200041d0
 8000a88:	40026428 	.word	0x40026428

08000a8c <Sai_In_MspInit>:


void Sai_In_MspInit(SAI_HandleTypeDef *hsai)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000a94:	4b50      	ldr	r3, [pc, #320]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a98:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000a9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000aac:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a49      	ldr	r2, [pc, #292]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b47      	ldr	r3, [pc, #284]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	483f      	ldr	r0, [pc, #252]	@ (8000bdc <Sai_In_MspInit+0x150>)
 8000ae0:	f003 ffee 	bl	8004ac0 <HAL_GPIO_Init>

    /* Enable Audio INT GPIO clock */
    AUDIO_IN_INT_GPIO_ENABLE();
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    /* Audio INT pin configuration: input */
    gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4832      	ldr	r0, [pc, #200]	@ (8000be0 <Sai_In_MspInit+0x154>)
 8000b16:	f003 ffd3 	bl	8004ac0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000b20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <Sai_In_MspInit+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

    if (hsai->Instance == AUDIO_IN_SAIx)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <Sai_In_MspInit+0x158>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d138      	bne.n	8000bae <Sai_In_MspInit+0x122>
    {
        /* Configure the hdma_sai_rx handle parameters */
        hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b42:	605a      	str	r2, [r3, #4]
        hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000b44:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
        hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000b4a:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
        hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b56:	611a      	str	r2, [r3, #16]
        hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b5e:	615a      	str	r2, [r3, #20]
        hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b66:	619a      	str	r2, [r3, #24]
        hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6e:	61da      	str	r2, [r3, #28]
        hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b76:	621a      	str	r2, [r3, #32]
        hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
        hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b80:	2203      	movs	r2, #3
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
        hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
        hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b92:	4a16      	ldr	r2, [pc, #88]	@ (8000bec <Sai_In_MspInit+0x160>)
 8000b94:	601a      	str	r2, [r3, #0]

        /* Associate the DMA handle */
        __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b9a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Deinitialize the Stream for new transfer */
        HAL_DMA_DeInit(&hdma_sai_rx);
 8000ba2:	4811      	ldr	r0, [pc, #68]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000ba4:	f003 fc36 	bl	8004414 <HAL_DMA_DeInit>

        /* Configure the DMA Stream */
        HAL_DMA_Init(&hdma_sai_rx);
 8000ba8:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <Sai_In_MspInit+0x15c>)
 8000baa:	f003 fb85 	bl	80042b8 <HAL_DMA_Init>
    }

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	203c      	movs	r0, #60	@ 0x3c
 8000bb4:	f002 ff4b 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000bb8:	203c      	movs	r0, #60	@ 0x3c
 8000bba:	f002 ff64 	bl	8003a86 <HAL_NVIC_EnableIRQ>

    /* Audio INT IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	2028      	movs	r0, #40	@ 0x28
 8000bc4:	f002 ff43 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8000bc8:	2028      	movs	r0, #40	@ 0x28
 8000bca:	f002 ff5c 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	@ 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40022400 	.word	0x40022400
 8000be4:	40015824 	.word	0x40015824
 8000be8:	20004230 	.word	0x20004230
 8000bec:	40026470 	.word	0x40026470

08000bf0 <CodekInit>:



void CodekInit(AUDIO_DrvTypeDef  *audio_drv, uint32_t AudioFreq)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    audio_drv->Reset(AUDIO_I2C_ADDRESS);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfe:	2034      	movs	r0, #52	@ 0x34
 8000c00:	4798      	blx	r3

    /* Inicjalizacja kodeka */
    audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2264      	movs	r2, #100	@ 0x64
 8000c0a:	f240 3102 	movw	r1, #770	@ 0x302
 8000c0e:	2034      	movs	r0, #52	@ 0x34
 8000c10:	47a0      	blx	r4

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <AudioInit>:


void AudioInit(uint32_t AudioFreq)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	SAIx_In_DeInit();
 8000c24:	f7ff fdfa 	bl	800081c <SAIx_In_DeInit>
	SAIx_Out_DeInit();
 8000c28:	f7ff fe0e 	bl	8000848 <SAIx_Out_DeInit>
	SAI_Clock_Configuration(AudioFreq);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fe21 	bl	8000874 <SAI_Clock_Configuration>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <AudioInit+0x5c>)
 8000c34:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <AudioInit+0x60>)
 8000c36:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <AudioInit+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <AudioInit+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
    if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8000c3e:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <AudioInit+0x64>)
 8000c40:	f006 fece 	bl	80079e0 <HAL_SAI_GetState>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d105      	bne.n	8000c56 <AudioInit+0x3a>
    {
    	Sai_Out_MspInit(&haudio_out_sai);
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <AudioInit+0x5c>)
 8000c4c:	f7ff fe7c 	bl	8000948 <Sai_Out_MspInit>
    	Sai_In_MspInit(&haudio_in_sai);
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <AudioInit+0x64>)
 8000c52:	f7ff ff1b 	bl	8000a8c <Sai_In_MspInit>
    }
    SAIx_Out_Init(AudioFreq);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fd06 	bl	8000668 <SAIx_Out_Init>
    SAIx_In_Init(AudioFreq);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fd71 	bl	8000744 <SAIx_In_Init>
    CodekInit(audio_drv, AudioFreq);
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <AudioInit+0x6c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ffc1 	bl	8000bf0 <CodekInit>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200040c0 	.word	0x200040c0
 8000c7c:	40015804 	.word	0x40015804
 8000c80:	20004144 	.word	0x20004144
 8000c84:	40015824 	.word	0x40015824
 8000c88:	20000004 	.word	0x20000004

08000c8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <vApplicationGetIdleTaskMemory+0x30>)
 8000ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2280      	movs	r2, #128	@ 0x80
 8000ca8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20004290 	.word	0x20004290
 8000cbc:	20004330 	.word	0x20004330

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b09a      	sub	sp, #104	@ 0x68
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f002 fd66 	bl	8003796 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f86d 	bl	8000da8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cce:	f000 f8db 	bl	8000e88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 faa1 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 fa69 	bl	80011ac <MX_DMA_Init>
  MX_SDMMC2_SD_Init();
 8000cda:	f000 fa17 	bl	800110c <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 8000cde:	f000 fa35 	bl	800114c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000ce2:	f009 fad1 	bl	800a288 <MX_FATFS_Init>
  MX_SAI1_Init();
 8000ce6:	f000 f94f 	bl	8000f88 <MX_SAI1_Init>
  MX_DFSDM1_Init();
 8000cea:	f000 f8f5 	bl	8000ed8 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  Audio_passThrough();
 8000cee:	f7ff fc3d 	bl	800056c <Audio_passThrough>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AudioQueue */
  osMessageQDef(AudioQueue, 4, uint8_t);
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <main+0xc8>)
 8000cf4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AudioQueueHandle = osMessageCreate(osMessageQ(AudioQueue), NULL);
 8000cfe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 fe33 	bl	800a970 <osMessageCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <main+0xcc>)
 8000d0e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SDCardTask */
  osThreadDef(SDCardTask, StartSDCardTask, osPriorityNormal, 0, 1024);
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <main+0xd0>)
 8000d12:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d16:	461d      	mov	r5, r3
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardTaskHandle = osThreadCreate(osThread(SDCardTask), NULL);
 8000d24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f009 fdc0 	bl	800a8b0 <osThreadCreate>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <main+0xd4>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* definition and creation of GUI_Task */
  osThreadDef(GUI_Task, StartGUI_Task, osPriorityNormal, 0, 128);
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <main+0xd8>)
 8000d38:	f107 0420 	add.w	r4, r7, #32
 8000d3c:	461d      	mov	r5, r3
 8000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GUI_TaskHandle = osThreadCreate(osThread(GUI_Task), NULL);
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f009 fdad 	bl	800a8b0 <osThreadCreate>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <main+0xdc>)
 8000d5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Record_Task */
  osThreadDef(Record_Task, StartRecordTask, osPriorityIdle, 0, 2048);
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <main+0xe0>)
 8000d5e:	1d3c      	adds	r4, r7, #4
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Record_TaskHandle = osThreadCreate(osThread(Record_Task), NULL);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f009 fd9c 	bl	800a8b0 <osThreadCreate>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <main+0xe4>)
 8000d7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d7e:	f009 fd74 	bl	800a86a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d82:	bf00      	nop
 8000d84:	e7fd      	b.n	8000d82 <main+0xc2>
 8000d86:	bf00      	nop
 8000d88:	0800d8f4 	.word	0x0800d8f4
 8000d8c:	2000495c 	.word	0x2000495c
 8000d90:	0800d910 	.word	0x0800d910
 8000d94:	20004950 	.word	0x20004950
 8000d98:	0800d938 	.word	0x0800d938
 8000d9c:	20004954 	.word	0x20004954
 8000da0:	0800d960 	.word	0x0800d960
 8000da4:	20004958 	.word	0x20004958

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2234      	movs	r2, #52	@ 0x34
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00c fa60 	bl	800d27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <SystemClock_Config+0xdc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <SystemClock_Config+0xdc>)
 8000dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <SystemClock_Config+0xdc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e10:	2319      	movs	r3, #25
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e14:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000e18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 ff7a 	bl	8005d24 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e36:	f000 faf5 	bl	8001424 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e3a:	f004 ff23 	bl	8005c84 <HAL_PWREx_EnableOverDrive>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000e44:	f000 faee 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2107      	movs	r1, #7
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 fa0a 	bl	8006280 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e72:	f000 fad7 	bl	8001424 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0a4      	sub	sp, #144	@ 0x90
 8000e8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2290      	movs	r2, #144	@ 0x90
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f00c f9f1 	bl	800d27c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000e9a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e9e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 429;
 8000ea0:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8000ea4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 19;
 8000eb2:	2313      	movs	r3, #19
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000eb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 fbc4 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000eca:	f000 faab 	bl	8001424 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3790      	adds	r7, #144	@ 0x90
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000edc:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000ede:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <MX_DFSDM1_Init+0xa4>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000eee:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000efc:	2240      	movs	r2, #64	@ 0x40
 8000efe:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000f06:	481c      	ldr	r0, [pc, #112]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000f08:	f002 fec8 	bl	8003c9c <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <MX_DFSDM1_Init+0xac>)
 8000f10:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000f5a:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <MX_DFSDM1_Init+0xa8>)
 8000f5c:	f002 fdca 	bl	8003af4 <HAL_DFSDM_ChannelInit>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_DFSDM1_Init+0x92>
  {
    Error_Handler();
 8000f66:	f000 fa5d 	bl	8001424 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <MX_DFSDM1_Init+0xa0>)
 8000f70:	f002 ff6e 	bl	8003e50 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20004530 	.word	0x20004530
 8000f7c:	40017500 	.word	0x40017500
 8000f80:	20004584 	.word	0x20004584
 8000f84:	40017400 	.word	0x40017400

08000f88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 0 */
    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f8c:	f005 fb2a 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a59      	ldr	r2, [pc, #356]	@ (80010f8 <MX_SAI1_Init+0x170>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	099b      	lsrs	r3, r3, #6
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fd81 	bl	8003aa2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f002 fd8b 	bl	8003abc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295
 8000fae:	f002 fd4e 	bl	8003a4e <HAL_NVIC_SetPriority>
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000fb2:	4b52      	ldr	r3, [pc, #328]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fb4:	4a52      	ldr	r2, [pc, #328]	@ (8001100 <MX_SAI1_Init+0x178>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fb8:	4b50      	ldr	r3, [pc, #320]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fca:	4b4c      	ldr	r3, [pc, #304]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fd6:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fe4:	4b45      	ldr	r3, [pc, #276]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000ff0:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000ff2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000ff6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <MX_SAI1_Init+0x174>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001004:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800100a:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <MX_SAI1_Init+0x174>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 64;
 8001010:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001012:	2240      	movs	r2, #64	@ 0x40
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 32;
 8001016:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001018:	2220      	movs	r2, #32
 800101a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <MX_SAI1_Init+0x174>)
 800101e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001022:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001024:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001026:	2200      	movs	r2, #0
 8001028:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800102a:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <MX_SAI1_Init+0x174>)
 800102c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001030:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001034:	2200      	movs	r2, #0
 8001036:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <MX_SAI1_Init+0x174>)
 800103a:	2200      	movs	r2, #0
 800103c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001040:	2204      	movs	r2, #4
 8001042:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000000F;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_SAI1_Init+0x174>)
 8001046:	220f      	movs	r2, #15
 8001048:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800104a:	482c      	ldr	r0, [pc, #176]	@ (80010fc <MX_SAI1_Init+0x174>)
 800104c:	f006 f9b8 	bl	80073c0 <HAL_SAI_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_SAI1_Init+0xd2>
  {
    Error_Handler();
 8001056:	f000 f9e5 	bl	8001424 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800105a:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <MX_SAI1_Init+0x17c>)
 800105c:	4a2a      	ldr	r2, [pc, #168]	@ (8001108 <MX_SAI1_Init+0x180>)
 800105e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001068:	2203      	movs	r2, #3
 800106a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <MX_SAI1_Init+0x17c>)
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001074:	2200      	movs	r2, #0
 8001076:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <MX_SAI1_Init+0x17c>)
 800107a:	2200      	movs	r2, #0
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001080:	2201      	movs	r2, #1
 8001082:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_SAI1_Init+0x17c>)
 800108c:	2201      	movs	r2, #1
 800108e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_SAI1_Init+0x17c>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_SAI1_Init+0x17c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_RELEASED;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 64;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 32;
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010b0:	2220      	movs	r2, #32
 80010b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 4;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010d8:	2204      	movs	r2, #4
 80010da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000000F;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010de:	220f      	movs	r2, #15
 80010e0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <MX_SAI1_Init+0x17c>)
 80010e4:	f006 f96c 	bl	80073c0 <HAL_SAI_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 80010ee:	f000 f999 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	200045bc 	.word	0x200045bc
 8001100:	40015804 	.word	0x40015804
 8001104:	20004640 	.word	0x20004640
 8001108:	40015824 	.word	0x40015824

0800110c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 8001112:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <MX_SDMMC2_SD_Init+0x3c>)
 8001114:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <MX_SDMMC2_SD_Init+0x38>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20004784 	.word	0x20004784
 8001148:	40011c00 	.word	0x40011c00

0800114c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <MX_USART1_UART_Init+0x5c>)
 8001154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART1_UART_Init+0x58>)
 8001190:	f007 fe7a 	bl	8008e88 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800119a:	f000 f943 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200048c8 	.word	0x200048c8
 80011a8:	40011000 	.word	0x40011000

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_DMA_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2105      	movs	r1, #5
 80011ce:	2038      	movs	r0, #56	@ 0x38
 80011d0:	f002 fc3d 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d4:	2038      	movs	r0, #56	@ 0x38
 80011d6:	f002 fc56 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2039      	movs	r0, #57	@ 0x39
 80011e0:	f002 fc35 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011e4:	2039      	movs	r0, #57	@ 0x39
 80011e6:	f002 fc4e 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2105      	movs	r1, #5
 80011ee:	203c      	movs	r0, #60	@ 0x3c
 80011f0:	f002 fc2d 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80011f4:	203c      	movs	r0, #60	@ 0x3c
 80011f6:	f002 fc46 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2105      	movs	r1, #5
 80011fe:	2044      	movs	r0, #68	@ 0x44
 8001200:	f002 fc25 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001204:	2044      	movs	r0, #68	@ 0x44
 8001206:	f002 fc3e 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	@ 0x38
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a48      	ldr	r2, [pc, #288]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b46      	ldr	r3, [pc, #280]	@ (8001354 <MX_GPIO_Init+0x13c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b43      	ldr	r3, [pc, #268]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a42      	ldr	r2, [pc, #264]	@ (8001354 <MX_GPIO_Init+0x13c>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a3c      	ldr	r2, [pc, #240]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <MX_GPIO_Init+0x13c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a36      	ldr	r2, [pc, #216]	@ (8001354 <MX_GPIO_Init+0x13c>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <MX_GPIO_Init+0x13c>)
 8001294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <MX_GPIO_Init+0x13c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_GPIO_Init+0x13c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80012f4:	4818      	ldr	r0, [pc, #96]	@ (8001358 <MX_GPIO_Init+0x140>)
 80012f6:	f003 feb3 	bl	8005060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 80012fa:	f242 0320 	movw	r3, #8224	@ 0x2020
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	@ (8001358 <MX_GPIO_Init+0x140>)
 8001314:	f003 fbd4 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	480a      	ldr	r0, [pc, #40]	@ (8001358 <MX_GPIO_Init+0x140>)
 800132e:	f003 fbc7 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_GPIO_Init+0x144>)
 8001348:	f003 fbba 	bl	8004ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800134c:	bf00      	nop
 800134e:	3738      	adds	r7, #56	@ 0x38
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40022400 	.word	0x40022400
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_SAI_RxCpltCallback>:
		Error_Handler();
	}
}

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

	BSP_AUDIO_IN_TransferComplete_CallBack();
 8001368:	f000 f80e 	bl	8001388 <BSP_AUDIO_IN_TransferComplete_CallBack>

}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

	BSP_AUDIO_IN_HalfTransfer_CallBack();
 800137c:	f000 f810 	bl	80013a0 <BSP_AUDIO_IN_HalfTransfer_CallBack>

}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <BSP_AUDIO_IN_TransferComplete_CallBack>:


void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	200041c8 	.word	0x200041c8

080013a0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	200041c8 	.word	0x200041c8

080013b8 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void const * argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f009 fac1 	bl	800a948 <osDelay>
 80013c6:	e7fb      	b.n	80013c0 <StartSDCardTask+0x8>

080013c8 <StartGUI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGUI_Task */
void StartGUI_Task(void const * argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGUI_Task */
	uint16_t toggleCount = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
      // Toggle LED
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80013d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <StartGUI_Task+0x44>)
 80013da:	f003 fe5a 	bl	8005092 <HAL_GPIO_TogglePin>
      toggleCount++;
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	81fb      	strh	r3, [r7, #14]

      // Signal SDCardTask every 5 toggles
      if (toggleCount == 5)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10a      	bne.n	8001402 <StartGUI_Task+0x3a>
      {
          xQueueSend(AudioQueueHandle, (void *) &toggleCount, portMAX_DELAY);
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <StartGUI_Task+0x48>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f107 010e 	add.w	r1, r7, #14
 80013f4:	2300      	movs	r3, #0
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	f009 fd9f 	bl	800af3c <xQueueGenericSend>
          toggleCount = 0; // Reset counter
 80013fe:	2300      	movs	r3, #0
 8001400:	81fb      	strh	r3, [r7, #14]

      }

      osDelay(500); // Run every 500ms
 8001402:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001406:	f009 fa9f 	bl	800a948 <osDelay>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800140a:	e7e3      	b.n	80013d4 <StartGUI_Task+0xc>
 800140c:	40022400 	.word	0x40022400
 8001410:	2000495c 	.word	0x2000495c

08001414 <StartRecordTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecordTask */
void StartRecordTask(void const * argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecordTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f009 fa93 	bl	800a948 <osDelay>
 8001422:	e7fb      	b.n	800141c <StartRecordTask+0x8>

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800142c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <Error_Handler+0x20>)
 8001432:	f003 fe2e 	bl	8005092 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8001436:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800143a:	f002 fa09 	bl	8003850 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800143e:	bf00      	nop
 8001440:	e7f4      	b.n	800142c <Error_Handler+0x8>
 8001442:	bf00      	nop
 8001444:	40022400 	.word	0x40022400

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	f06f 0001 	mvn.w	r0, #1
 8001486:	f002 fae2 	bl	8003a4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_DFSDM_FilterMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_filter: DFSDM_Filter handle pointer
  * @retval None
  */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2290      	movs	r2, #144	@ 0x90
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00b fedf 	bl	800d27c <memset>
  if(DFSDM1_Init == 0)
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <HAL_DFSDM_FilterMspInit+0xdc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d152      	bne.n	800156c <HAL_DFSDM_FilterMspInit+0xd4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80014c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80014ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 f8b8 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80014e2:	f7ff ff9f 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_DFSDM_FilterMspInit+0xe0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a22      	ldr	r2, [pc, #136]	@ (8001578 <HAL_DFSDM_FilterMspInit+0xe0>)
 80014ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_DFSDM_FilterMspInit+0xe0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10b      	bne.n	8001510 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014f8:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 80014fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001502:	6453      	str	r3, [r2, #68]	@ 0x44
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_DFSDM_FilterMspInit+0xe4>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001528:	2318      	movs	r3, #24
 800152a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001540:	2306      	movs	r3, #6
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001546:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <HAL_DFSDM_FilterMspInit+0xe8>)
 800154e:	f003 fab7 	bl	8004ac0 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	2063      	movs	r0, #99	@ 0x63
 8001558:	f002 fa79 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800155c:	2063      	movs	r0, #99	@ 0x63
 800155e:	f002 fa92 	bl	8003a86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <HAL_DFSDM_FilterMspInit+0xdc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a02      	ldr	r2, [pc, #8]	@ (8001574 <HAL_DFSDM_FilterMspInit+0xdc>)
 800156a:	6013      	str	r3, [r2, #0]
  }

}
 800156c:	bf00      	nop
 800156e:	37b8      	adds	r7, #184	@ 0xb8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20004964 	.word	0x20004964
 8001578:	20004960 	.word	0x20004960
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00

08001584 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0ae      	sub	sp, #184	@ 0xb8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2290      	movs	r2, #144	@ 0x90
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00b fe69 	bl	800d27c <memset>
  if(DFSDM1_Init == 0)
 80015aa:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d14a      	bne.n	8001648 <HAL_DFSDM_ChannelMspInit+0xc4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80015b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80015b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 f842 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80015ce:	f7ff ff29 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80015da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10b      	bne.n	80015fc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a15      	ldr	r2, [pc, #84]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001614:	2318      	movs	r3, #24
 8001616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800162c:	2306      	movs	r3, #6
 800162e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001636:	4619      	mov	r1, r3
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800163a:	f003 fa41 	bl	8004ac0 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a02      	ldr	r2, [pc, #8]	@ (8001650 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001646:	6013      	str	r3, [r2, #0]
  }

}
 8001648:	bf00      	nop
 800164a:	37b8      	adds	r7, #184	@ 0xb8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20004964 	.word	0x20004964
 8001654:	20004960 	.word	0x20004960
 8001658:	40023800 	.word	0x40023800
 800165c:	40020c00 	.word	0x40020c00

08001660 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0ae      	sub	sp, #184	@ 0xb8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2290      	movs	r2, #144	@ 0x90
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f00b fdfb 	bl	800d27c <memset>
  if(hsd->Instance==SDMMC2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a74      	ldr	r2, [pc, #464]	@ (800185c <HAL_SD_MspInit+0x1fc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	f040 80e0 	bne.w	8001852 <HAL_SD_MspInit+0x1f2>

    /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8001692:	f04f 6384 	mov.w	r3, #69206016	@ 0x4200000
 8001696:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 ffcf 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80016b4:	f7ff feb6 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80016b8:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016bc:	4a68      	ldr	r2, [pc, #416]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	4a62      	ldr	r2, [pc, #392]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6313      	str	r3, [r2, #48]	@ 0x30
 80016dc:	4b60      	ldr	r3, [pc, #384]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <HAL_SD_MspInit+0x200>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC2 GPIO Configuration
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001700:	23c0      	movs	r3, #192	@ 0xc0
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001718:	230b      	movs	r3, #11
 800171a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001722:	4619      	mov	r1, r3
 8001724:	484f      	ldr	r0, [pc, #316]	@ (8001864 <HAL_SD_MspInit+0x204>)
 8001726:	f003 f9cb 	bl	8004ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800172a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800172e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001744:	230b      	movs	r3, #11
 8001746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800174e:	4619      	mov	r1, r3
 8001750:	4845      	ldr	r0, [pc, #276]	@ (8001868 <HAL_SD_MspInit+0x208>)
 8001752:	f003 f9b5 	bl	8004ac0 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8001756:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001758:	4a45      	ldr	r2, [pc, #276]	@ (8001870 <HAL_SD_MspInit+0x210>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 800175c:	4b43      	ldr	r3, [pc, #268]	@ (800186c <HAL_SD_MspInit+0x20c>)
 800175e:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001764:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <HAL_SD_MspInit+0x20c>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b3e      	ldr	r3, [pc, #248]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001778:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <HAL_SD_MspInit+0x20c>)
 800177a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800177e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001780:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001786:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8001788:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_SD_MspInit+0x20c>)
 800178a:	2220      	movs	r2, #32
 800178c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001794:	4b35      	ldr	r3, [pc, #212]	@ (800186c <HAL_SD_MspInit+0x20c>)
 8001796:	2204      	movs	r2, #4
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_SD_MspInit+0x20c>)
 800179c:	2203      	movs	r2, #3
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017a0:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_SD_MspInit+0x20c>)
 80017a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_SD_MspInit+0x20c>)
 80017aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80017b0:	482e      	ldr	r0, [pc, #184]	@ (800186c <HAL_SD_MspInit+0x20c>)
 80017b2:	f002 fd81 	bl	80042b8 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80017bc:	f7ff fe32 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a2a      	ldr	r2, [pc, #168]	@ (800186c <HAL_SD_MspInit+0x20c>)
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017c6:	4a29      	ldr	r2, [pc, #164]	@ (800186c <HAL_SD_MspInit+0x20c>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80017cc:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001878 <HAL_SD_MspInit+0x218>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017d4:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017dc:	2240      	movs	r2, #64	@ 0x40
 80017de:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_SD_MspInit+0x214>)
 80017f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_SD_MspInit+0x214>)
 800180c:	2204      	movs	r2, #4
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001812:	2203      	movs	r2, #3
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001818:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001820:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001824:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8001826:	4813      	ldr	r0, [pc, #76]	@ (8001874 <HAL_SD_MspInit+0x214>)
 8001828:	f002 fd46 	bl	80042b8 <HAL_DMA_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001832:	f7ff fdf7 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_SD_MspInit+0x214>)
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_SD_MspInit+0x214>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	2067      	movs	r0, #103	@ 0x67
 8001848:	f002 f901 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800184c:	2067      	movs	r0, #103	@ 0x67
 800184e:	f002 f91a 	bl	8003a86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	37b8      	adds	r7, #184	@ 0xb8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40011c00 	.word	0x40011c00
 8001860:	40023800 	.word	0x40023800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021800 	.word	0x40021800
 800186c:	20004808 	.word	0x20004808
 8001870:	40026410 	.word	0x40026410
 8001874:	20004868 	.word	0x20004868
 8001878:	40026488 	.word	0x40026488

0800187c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0ae      	sub	sp, #184	@ 0xb8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2290      	movs	r2, #144	@ 0x90
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00b fced 	bl	800d27c <memset>
  if(huart->Instance==USART1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <HAL_UART_MspInit+0xb0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d13a      	bne.n	8001922 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018ac:	2340      	movs	r3, #64	@ 0x40
 80018ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018b0:	2300      	movs	r3, #0
 80018b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fec7 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c4:	f7ff fdae 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_UART_MspInit+0xb4>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80018f8:	23c0      	movs	r3, #192	@ 0xc0
 80018fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001910:	2307      	movs	r3, #7
 8001912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	@ (8001934 <HAL_UART_MspInit+0xb8>)
 800191e:	f003 f8cf 	bl	8004ac0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	37b8      	adds	r7, #184	@ 0xb8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40011000 	.word	0x40011000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	@ 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <HAL_SAI_MspInit+0x1c8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d174      	bne.n	8001a34 <HAL_SAI_MspInit+0xfc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800194a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10b      	bne.n	800196a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a6c      	ldr	r2, [pc, #432]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800196a:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	4a64      	ldr	r2, [pc, #400]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 8001972:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001974:	2370      	movs	r3, #112	@ 0x70
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001984:	2306      	movs	r3, #6
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	485f      	ldr	r0, [pc, #380]	@ (8001b0c <HAL_SAI_MspInit+0x1d4>)
 8001990:	f003 f896 	bl	8004ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019a4:	2306      	movs	r3, #6
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4858      	ldr	r0, [pc, #352]	@ (8001b10 <HAL_SAI_MspInit+0x1d8>)
 80019b0:	f003 f886 	bl	8004ac0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80019b4:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019b6:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <HAL_SAI_MspInit+0x1e0>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80019ba:	4b56      	ldr	r3, [pc, #344]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c0:	4b54      	ldr	r3, [pc, #336]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c6:	4b53      	ldr	r3, [pc, #332]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80019cc:	4b51      	ldr	r3, [pc, #324]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019da:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80019e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ea:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80019ec:	4b49      	ldr	r3, [pc, #292]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f2:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f4:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fa:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a00:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a06:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001a0c:	4841      	ldr	r0, [pc, #260]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a0e:	f002 fc53 	bl	80042b8 <HAL_DMA_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8001a18:	f7ff fd04 	bl	8001424 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a20:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a22:	4a3c      	ldr	r2, [pc, #240]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a2c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001a2e:	4a39      	ldr	r2, [pc, #228]	@ (8001b14 <HAL_SAI_MspInit+0x1dc>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a38      	ldr	r2, [pc, #224]	@ (8001b1c <HAL_SAI_MspInit+0x1e4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d15c      	bne.n	8001af8 <HAL_SAI_MspInit+0x1c0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001a3e:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10b      	bne.n	8001a5e <HAL_SAI_MspInit+0x126>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a46:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <HAL_SAI_MspInit+0x1d0>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a27      	ldr	r2, [pc, #156]	@ (8001b04 <HAL_SAI_MspInit+0x1cc>)
 8001a66:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a78:	2306      	movs	r3, #6
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4822      	ldr	r0, [pc, #136]	@ (8001b0c <HAL_SAI_MspInit+0x1d4>)
 8001a84:	f003 f81c 	bl	8004ac0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <HAL_SAI_MspInit+0x1ec>)
 8001a8c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a94:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a96:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001aa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa8:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001aac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ab0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ac0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001ac4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ac8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001ad0:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001ad2:	f002 fbf1 	bl	80042b8 <HAL_DMA_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8001adc:	f7ff fca2 	bl	8001424 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001ae4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a0c      	ldr	r2, [pc, #48]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001af0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001af2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_SAI_MspInit+0x1e8>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	@ 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40015804 	.word	0x40015804
 8001b04:	20004968 	.word	0x20004968
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021800 	.word	0x40021800
 8001b14:	200046c4 	.word	0x200046c4
 8001b18:	40026428 	.word	0x40026428
 8001b1c:	40015824 	.word	0x40015824
 8001b20:	20004724 	.word	0x20004724
 8001b24:	40026470 	.word	0x40026470

08001b28 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <HAL_SAI_MspDeInit+0xa0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d120      	bne.n	8001b7c <HAL_SAI_MspDeInit+0x54>
    {
    SAI1_client --;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b42:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_SAI_MspDeInit+0xa8>)
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_SAI_MspDeInit+0xa8>)
 8001b52:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b56:	6453      	str	r3, [r2, #68]	@ 0x44
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001b58:	2170      	movs	r1, #112	@ 0x70
 8001b5a:	481e      	ldr	r0, [pc, #120]	@ (8001bd4 <HAL_SAI_MspDeInit+0xac>)
 8001b5c:	f003 f95c 	bl	8004e18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7);
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	481d      	ldr	r0, [pc, #116]	@ (8001bd8 <HAL_SAI_MspDeInit+0xb0>)
 8001b64:	f003 f958 	bl	8004e18 <HAL_GPIO_DeInit>

    /* SAI1 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fc51 	bl	8004414 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fc4c 	bl	8004414 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI1_Block_B)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <HAL_SAI_MspDeInit+0xb4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d11c      	bne.n	8001bc0 <HAL_SAI_MspDeInit+0x98>
    {
    SAI1_client --;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b8e:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_SAI_MspDeInit+0xa4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_SAI_MspDeInit+0x7c>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_SAI_MspDeInit+0xa8>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_SAI_MspDeInit+0xa8>)
 8001b9e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ba2:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <HAL_SAI_MspDeInit+0xac>)
 8001ba8:	f003 f936 	bl	8004e18 <HAL_GPIO_DeInit>

    /* SAI1 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fc2f 	bl	8004414 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fc2a 	bl	8004414 <HAL_DMA_DeInit>
    }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40015804 	.word	0x40015804
 8001bcc:	20004968 	.word	0x20004968
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	40015824 	.word	0x40015824

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1a:	f001 fdf9 	bl	8003810 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c1e:	f00a fc01 	bl	800c424 <xTaskGetSchedulerState>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c28:	f00a feae 	bl	800c988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <DMA2_Stream0_IRQHandler+0x10>)
 8001c36:	f002 fccd 	bl	80045d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004808 	.word	0x20004808

08001c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <DMA2_Stream1_IRQHandler+0x10>)
 8001c4a:	f002 fcc3 	bl	80045d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200046c4 	.word	0x200046c4

08001c58 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <DMA2_Stream4_IRQHandler+0x10>)
 8001c5e:	f002 fcb9 	bl	80045d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20004724 	.word	0x20004724

08001c6c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <DMA2_Stream5_IRQHandler+0x10>)
 8001c72:	f002 fcaf 	bl	80045d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20004868 	.word	0x20004868

08001c80 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001c86:	f002 f929 	bl	8003edc <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20004530 	.word	0x20004530

08001c94 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <SDMMC2_IRQHandler+0x10>)
 8001c9a:	f006 fa4d 	bl	8008138 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20004784 	.word	0x20004784

08001ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
  }

  return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf1      	blt.n	8001cf4 <_write+0x12>
  }
  return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
  return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:

int _isatty(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f00b fb0e 	bl	800d3d4 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20080000 	.word	0x20080000
 8001de4:	00000800 	.word	0x00000800
 8001de8:	2000496c 	.word	0x2000496c
 8001dec:	20010ca8 	.word	0x20010ca8

08001df0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e4c <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e18:	f7ff ffea 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f00b facd 	bl	800d3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7fe ff3b 	bl	8000cc0 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001e58:	0800d9f0 	.word	0x0800d9f0
  ldr r2, =_sbss
 8001e5c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001e60:	20010ca4 	.word	0x20010ca4

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	4603      	mov	r3, r0
 8001e72:	81fb      	strh	r3, [r7, #14]
 8001e74:	460b      	mov	r3, r1
 8001e76:	81bb      	strh	r3, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001e80:	89bb      	ldrh	r3, [r7, #12]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001e86:	89bb      	ldrh	r3, [r7, #12]
 8001e88:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e8c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001e92:	f001 fc0d 	bl	80036b0 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fa89 	bl	80033b8 <CODEC_IO_Write>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f640 0117 	movw	r1, #2071	@ 0x817
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fa7c 	bl	80033b8 <CODEC_IO_Write>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fa6f 	bl	80033b8 <CODEC_IO_Write>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	226c      	movs	r2, #108	@ 0x6c
 8001eea:	2139      	movs	r1, #57	@ 0x39
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fa63 	bl	80033b8 <CODEC_IO_Write>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001efc:	8afb      	ldrh	r3, [r7, #22]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2213      	movs	r2, #19
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fa54 	bl	80033b8 <CODEC_IO_Write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e00b      	b.n	8001f34 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2203      	movs	r2, #3
 8001f22:	2101      	movs	r1, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 fa47 	bl	80033b8 <CODEC_IO_Write>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f001 fc23 	bl	8003780 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001f3a:	8b3b      	ldrh	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 815f 	beq.w	8002200 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001f42:	4bae      	ldr	r3, [pc, #696]	@ (80021fc <wm8994_Init+0x394>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001f48:	8b3b      	ldrh	r3, [r7, #24]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	f000 808c 	beq.w	8002068 <wm8994_Init+0x200>
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	f300 8111 	bgt.w	8002178 <wm8994_Init+0x310>
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d002      	beq.n	8001f60 <wm8994_Init+0xf8>
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d042      	beq.n	8001fe4 <wm8994_Init+0x17c>
 8001f5e:	e10b      	b.n	8002178 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001f60:	89fb      	ldrh	r3, [r7, #14]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001f68:	2105      	movs	r1, #5
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fa24 	bl	80033b8 <CODEC_IO_Write>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f240 6101 	movw	r1, #1537	@ 0x601
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fa17 	bl	80033b8 <CODEC_IO_Write>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f240 6102 	movw	r1, #1538	@ 0x602
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fa0a 	bl	80033b8 <CODEC_IO_Write>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 f9fd 	bl	80033b8 <CODEC_IO_Write>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f240 6105 	movw	r1, #1541	@ 0x605
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 f9f0 	bl	80033b8 <CODEC_IO_Write>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
      break;
 8001fe2:	e110      	b.n	8002206 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f240 3203 	movw	r2, #771	@ 0x303
 8001fec:	2105      	movs	r1, #5
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f9e2 	bl	80033b8 <CODEC_IO_Write>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2201      	movs	r2, #1
 8002004:	f240 6101 	movw	r1, #1537	@ 0x601
 8002008:	4618      	mov	r0, r3
 800200a:	f001 f9d5 	bl	80033b8 <CODEC_IO_Write>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2201      	movs	r2, #1
 800201e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f9c8 	bl	80033b8 <CODEC_IO_Write>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2200      	movs	r2, #0
 8002038:	f240 6104 	movw	r1, #1540	@ 0x604
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f9bb 	bl	80033b8 <CODEC_IO_Write>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2200      	movs	r2, #0
 8002052:	f240 6105 	movw	r1, #1541	@ 0x605
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f9ae 	bl	80033b8 <CODEC_IO_Write>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
      break;
 8002066:	e0ce      	b.n	8002206 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002068:	8afb      	ldrh	r3, [r7, #22]
 800206a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800206e:	d141      	bne.n	80020f4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002070:	89fb      	ldrh	r3, [r7, #14]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002078:	2105      	movs	r1, #5
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f99c 	bl	80033b8 <CODEC_IO_Write>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800208a:	89fb      	ldrh	r3, [r7, #14]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2203      	movs	r2, #3
 8002090:	f240 6101 	movw	r1, #1537	@ 0x601
 8002094:	4618      	mov	r0, r3
 8002096:	f001 f98f 	bl	80033b8 <CODEC_IO_Write>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80020a4:	89fb      	ldrh	r3, [r7, #14]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2203      	movs	r2, #3
 80020aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f982 	bl	80033b8 <CODEC_IO_Write>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80020be:	89fb      	ldrh	r3, [r7, #14]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2203      	movs	r2, #3
 80020c4:	f240 6104 	movw	r1, #1540	@ 0x604
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 f975 	bl	80033b8 <CODEC_IO_Write>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2203      	movs	r2, #3
 80020de:	f240 6105 	movw	r1, #1541	@ 0x605
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 f968 	bl	80033b8 <CODEC_IO_Write>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80020f2:	e088      	b.n	8002206 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80020fc:	2105      	movs	r1, #5
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 f95a 	bl	80033b8 <CODEC_IO_Write>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2201      	movs	r2, #1
 8002114:	f240 6101 	movw	r1, #1537	@ 0x601
 8002118:	4618      	mov	r0, r3
 800211a:	f001 f94d 	bl	80033b8 <CODEC_IO_Write>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2201      	movs	r2, #1
 800212e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002132:	4618      	mov	r0, r3
 8002134:	f001 f940 	bl	80033b8 <CODEC_IO_Write>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2202      	movs	r2, #2
 8002148:	f240 6104 	movw	r1, #1540	@ 0x604
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f933 	bl	80033b8 <CODEC_IO_Write>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	4413      	add	r3, r2
 800215a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2202      	movs	r2, #2
 8002162:	f240 6105 	movw	r1, #1541	@ 0x605
 8002166:	4618      	mov	r0, r3
 8002168:	f001 f926 	bl	80033b8 <CODEC_IO_Write>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	61fb      	str	r3, [r7, #28]
      break;
 8002176:	e046      	b.n	8002206 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f240 3203 	movw	r2, #771	@ 0x303
 8002180:	2105      	movs	r1, #5
 8002182:	4618      	mov	r0, r3
 8002184:	f001 f918 	bl	80033b8 <CODEC_IO_Write>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2201      	movs	r2, #1
 8002198:	f240 6101 	movw	r1, #1537	@ 0x601
 800219c:	4618      	mov	r0, r3
 800219e:	f001 f90b 	bl	80033b8 <CODEC_IO_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 f8fe 	bl	80033b8 <CODEC_IO_Write>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2200      	movs	r2, #0
 80021cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 f8f1 	bl	80033b8 <CODEC_IO_Write>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f8e4 	bl	80033b8 <CODEC_IO_Write>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	61fb      	str	r3, [r7, #28]
      break;
 80021fa:	e004      	b.n	8002206 <wm8994_Init+0x39e>
 80021fc:	20004970 	.word	0x20004970
    }
  }
  else
  {
    outputEnabled = 0;
 8002200:	4b99      	ldr	r3, [pc, #612]	@ (8002468 <wm8994_Init+0x600>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002206:	8afb      	ldrh	r3, [r7, #22]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 81ab 	beq.w	8002564 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800220e:	4b97      	ldr	r3, [pc, #604]	@ (800246c <wm8994_Init+0x604>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002214:	8afb      	ldrh	r3, [r7, #22]
 8002216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800221a:	f000 8129 	beq.w	8002470 <wm8994_Init+0x608>
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002222:	f300 819b 	bgt.w	800255c <wm8994_Init+0x6f4>
 8002226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800222a:	d05a      	beq.n	80022e2 <wm8994_Init+0x47a>
 800222c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002230:	f300 8194 	bgt.w	800255c <wm8994_Init+0x6f4>
 8002234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002238:	f000 80c6 	beq.w	80023c8 <wm8994_Init+0x560>
 800223c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002240:	f040 818c 	bne.w	800255c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800224c:	2104      	movs	r1, #4
 800224e:	4618      	mov	r0, r3
 8002250:	f001 f8b2 	bl	80033b8 <CODEC_IO_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	22db      	movs	r2, #219	@ 0xdb
 8002264:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002268:	4618      	mov	r0, r3
 800226a:	f001 f8a5 	bl	80033b8 <CODEC_IO_Write>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f001 f898 	bl	80033b8 <CODEC_IO_Write>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2202      	movs	r2, #2
 8002298:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800229c:	4618      	mov	r0, r3
 800229e:	f001 f88b 	bl	80033b8 <CODEC_IO_Write>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2202      	movs	r2, #2
 80022b2:	f240 6109 	movw	r1, #1545	@ 0x609
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 f87e 	bl	80033b8 <CODEC_IO_Write>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	220e      	movs	r2, #14
 80022cc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f871 	bl	80033b8 <CODEC_IO_Write>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	61fb      	str	r3, [r7, #28]
      break;
 80022e0:	e143      	b.n	800256a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80022e2:	89fb      	ldrh	r3, [r7, #14]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2211      	movs	r2, #17
 80022e8:	2128      	movs	r1, #40	@ 0x28
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 f864 	bl	80033b8 <CODEC_IO_Write>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2220      	movs	r2, #32
 8002300:	2129      	movs	r1, #41	@ 0x29
 8002302:	4618      	mov	r0, r3
 8002304:	f001 f858 	bl	80033b8 <CODEC_IO_Write>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8002312:	89fb      	ldrh	r3, [r7, #14]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2220      	movs	r2, #32
 8002318:	212a      	movs	r1, #42	@ 0x2a
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f84c 	bl	80033b8 <CODEC_IO_Write>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f240 3203 	movw	r2, #771	@ 0x303
 8002332:	2104      	movs	r1, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f83f 	bl	80033b8 <CODEC_IO_Write>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	22db      	movs	r2, #219	@ 0xdb
 800234a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800234e:	4618      	mov	r0, r3
 8002350:	f001 f832 	bl	80033b8 <CODEC_IO_Write>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f001 f825 	bl	80033b8 <CODEC_IO_Write>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002378:	89fb      	ldrh	r3, [r7, #14]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2202      	movs	r2, #2
 800237e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f818 	bl	80033b8 <CODEC_IO_Write>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2202      	movs	r2, #2
 8002398:	f240 6107 	movw	r1, #1543	@ 0x607
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f80b 	bl	80033b8 <CODEC_IO_Write>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	220d      	movs	r2, #13
 80023b2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fffe 	bl	80033b8 <CODEC_IO_Write>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	61fb      	str	r3, [r7, #28]
      break;
 80023c6:	e0d0      	b.n	800256a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80023c8:	89fb      	ldrh	r3, [r7, #14]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80023d0:	2104      	movs	r1, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fff0 	bl	80033b8 <CODEC_IO_Write>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	22db      	movs	r2, #219	@ 0xdb
 80023e8:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 ffe3 	bl	80033b8 <CODEC_IO_Write>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ffd6 	bl	80033b8 <CODEC_IO_Write>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2202      	movs	r2, #2
 800241c:	f240 6106 	movw	r1, #1542	@ 0x606
 8002420:	4618      	mov	r0, r3
 8002422:	f000 ffc9 	bl	80033b8 <CODEC_IO_Write>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2202      	movs	r2, #2
 8002436:	f240 6107 	movw	r1, #1543	@ 0x607
 800243a:	4618      	mov	r0, r3
 800243c:	f000 ffbc 	bl	80033b8 <CODEC_IO_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	220d      	movs	r2, #13
 8002450:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002454:	4618      	mov	r0, r3
 8002456:	f000 ffaf 	bl	80033b8 <CODEC_IO_Write>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
      break; 
 8002464:	e081      	b.n	800256a <wm8994_Init+0x702>
 8002466:	bf00      	nop
 8002468:	20004970 	.word	0x20004970
 800246c:	20004974 	.word	0x20004974
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002478:	2104      	movs	r1, #4
 800247a:	4618      	mov	r0, r3
 800247c:	f000 ff9c 	bl	80033b8 <CODEC_IO_Write>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	22db      	movs	r2, #219	@ 0xdb
 8002490:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002494:	4618      	mov	r0, r3
 8002496:	f000 ff8f 	bl	80033b8 <CODEC_IO_Write>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	22db      	movs	r2, #219	@ 0xdb
 80024aa:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 ff82 	bl	80033b8 <CODEC_IO_Write>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80024c6:	2102      	movs	r1, #2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 ff75 	bl	80033b8 <CODEC_IO_Write>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2202      	movs	r2, #2
 80024de:	f240 6106 	movw	r1, #1542	@ 0x606
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 ff68 	bl	80033b8 <CODEC_IO_Write>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2202      	movs	r2, #2
 80024f8:	f240 6107 	movw	r1, #1543	@ 0x607
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 ff5b 	bl	80033b8 <CODEC_IO_Write>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800250c:	89fb      	ldrh	r3, [r7, #14]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2202      	movs	r2, #2
 8002512:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002516:	4618      	mov	r0, r3
 8002518:	f000 ff4e 	bl	80033b8 <CODEC_IO_Write>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2202      	movs	r2, #2
 800252c:	f240 6109 	movw	r1, #1545	@ 0x609
 8002530:	4618      	mov	r0, r3
 8002532:	f000 ff41 	bl	80033b8 <CODEC_IO_Write>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	220d      	movs	r2, #13
 8002546:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800254a:	4618      	mov	r0, r3
 800254c:	f000 ff34 	bl	80033b8 <CODEC_IO_Write>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
      break;    
 800255a:	e006      	b.n	800256a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
      break;
 8002562:	e002      	b.n	800256a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002564:	4bb1      	ldr	r3, [pc, #708]	@ (800282c <wm8994_Init+0x9c4>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4ab0      	ldr	r2, [pc, #704]	@ (8002830 <wm8994_Init+0x9c8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d079      	beq.n	8002666 <wm8994_Init+0x7fe>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4aae      	ldr	r2, [pc, #696]	@ (8002830 <wm8994_Init+0x9c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f200 80ad 	bhi.w	80026d6 <wm8994_Init+0x86e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002582:	4293      	cmp	r3, r2
 8002584:	d061      	beq.n	800264a <wm8994_Init+0x7e2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800258c:	4293      	cmp	r3, r2
 800258e:	f200 80a2 	bhi.w	80026d6 <wm8994_Init+0x86e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002598:	4293      	cmp	r3, r2
 800259a:	f000 808e 	beq.w	80026ba <wm8994_Init+0x852>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f200 8096 	bhi.w	80026d6 <wm8994_Init+0x86e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80025b0:	d03d      	beq.n	800262e <wm8994_Init+0x7c6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80025b8:	f200 808d 	bhi.w	80026d6 <wm8994_Init+0x86e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f245 6222 	movw	r2, #22050	@ 0x5622
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d06b      	beq.n	800269e <wm8994_Init+0x836>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f245 6222 	movw	r2, #22050	@ 0x5622
 80025cc:	4293      	cmp	r3, r2
 80025ce:	f200 8082 	bhi.w	80026d6 <wm8994_Init+0x86e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80025d8:	d01b      	beq.n	8002612 <wm8994_Init+0x7aa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80025e0:	d879      	bhi.n	80026d6 <wm8994_Init+0x86e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80025e8:	d005      	beq.n	80025f6 <wm8994_Init+0x78e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d046      	beq.n	8002682 <wm8994_Init+0x81a>
 80025f4:	e06f      	b.n	80026d6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2203      	movs	r2, #3
 80025fc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fed9 	bl	80033b8 <CODEC_IO_Write>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
    break;
 8002610:	e06f      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2233      	movs	r2, #51	@ 0x33
 8002618:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fecb 	bl	80033b8 <CODEC_IO_Write>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
    break;
 800262c:	e061      	b.n	80026f2 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2263      	movs	r2, #99	@ 0x63
 8002634:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002638:	4618      	mov	r0, r3
 800263a:	f000 febd 	bl	80033b8 <CODEC_IO_Write>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]
    break;
 8002648:	e053      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2283      	movs	r2, #131	@ 0x83
 8002650:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002654:	4618      	mov	r0, r3
 8002656:	f000 feaf 	bl	80033b8 <CODEC_IO_Write>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]
    break;
 8002664:	e045      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002666:	89fb      	ldrh	r3, [r7, #14]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	22a3      	movs	r2, #163	@ 0xa3
 800266c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fea1 	bl	80033b8 <CODEC_IO_Write>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
    break;
 8002680:	e037      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2213      	movs	r2, #19
 8002688:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fe93 	bl	80033b8 <CODEC_IO_Write>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
    break;
 800269c:	e029      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2243      	movs	r2, #67	@ 0x43
 80026a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fe85 	bl	80033b8 <CODEC_IO_Write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
    break;
 80026b8:	e01b      	b.n	80026f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2273      	movs	r2, #115	@ 0x73
 80026c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fe77 	bl	80033b8 <CODEC_IO_Write>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	61fb      	str	r3, [r7, #28]
    break; 
 80026d4:	e00d      	b.n	80026f2 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2283      	movs	r2, #131	@ 0x83
 80026dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fe69 	bl	80033b8 <CODEC_IO_Write>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
    break; 
 80026f0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026f8:	d10e      	bne.n	8002718 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002702:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fe56 	bl	80033b8 <CODEC_IO_Write>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e00d      	b.n	8002734 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002720:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fe47 	bl	80033b8 <CODEC_IO_Write>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002734:	89fb      	ldrh	r3, [r7, #14]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2200      	movs	r2, #0
 800273a:	f240 3102 	movw	r1, #770	@ 0x302
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fe3a 	bl	80033b8 <CODEC_IO_Write>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	220a      	movs	r2, #10
 8002754:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fe2d 	bl	80033b8 <CODEC_IO_Write>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2201      	movs	r2, #1
 800276e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fe20 	bl	80033b8 <CODEC_IO_Write>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002782:	8b3b      	ldrh	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8124 	beq.w	80029d2 <wm8994_Init+0xb6a>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002792:	2103      	movs	r1, #3
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fe0f 	bl	80033b8 <CODEC_IO_Write>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80027a4:	89fb      	ldrh	r3, [r7, #14]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	2122      	movs	r1, #34	@ 0x22
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fe03 	bl	80033b8 <CODEC_IO_Write>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	2123      	movs	r1, #35	@ 0x23
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fdf7 	bl	80033b8 <CODEC_IO_Write>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80027dc:	2136      	movs	r1, #54	@ 0x36
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fdea 	bl	80033b8 <CODEC_IO_Write>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f243 0203 	movw	r2, #12291	@ 0x3003
 80027f6:	2101      	movs	r1, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fddd 	bl	80033b8 <CODEC_IO_Write>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002808:	8afb      	ldrh	r3, [r7, #22]
 800280a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800280e:	d111      	bne.n	8002834 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002810:	89fb      	ldrh	r3, [r7, #14]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f240 2205 	movw	r2, #517	@ 0x205
 8002818:	2151      	movs	r1, #81	@ 0x51
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fdcc 	bl	80033b8 <CODEC_IO_Write>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e00f      	b.n	800284c <wm8994_Init+0x9e4>
 800282c:	20004974 	.word	0x20004974
 8002830:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2205      	movs	r2, #5
 800283a:	2151      	movs	r1, #81	@ 0x51
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fdbb 	bl	80033b8 <CODEC_IO_Write>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800284c:	8b7b      	ldrh	r3, [r7, #26]
 800284e:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002852:	f043 0303 	orr.w	r3, r3, #3
 8002856:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	8b7a      	ldrh	r2, [r7, #26]
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fda9 	bl	80033b8 <CODEC_IO_Write>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2222      	movs	r2, #34	@ 0x22
 8002876:	2160      	movs	r1, #96	@ 0x60
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd9d 	bl	80033b8 <CODEC_IO_Write>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002890:	214c      	movs	r1, #76	@ 0x4c
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fd90 	bl	80033b8 <CODEC_IO_Write>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80028a2:	200f      	movs	r0, #15
 80028a4:	f000 ff6c 	bl	8003780 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	212d      	movs	r1, #45	@ 0x2d
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fd81 	bl	80033b8 <CODEC_IO_Write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2201      	movs	r2, #1
 80028c6:	212e      	movs	r1, #46	@ 0x2e
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fd75 	bl	80033b8 <CODEC_IO_Write>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80028e0:	2103      	movs	r1, #3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fd68 	bl	80033b8 <CODEC_IO_Write>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2233      	movs	r2, #51	@ 0x33
 80028f8:	2154      	movs	r1, #84	@ 0x54
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd5c 	bl	80033b8 <CODEC_IO_Write>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 800290a:	f240 1001 	movw	r0, #257	@ 0x101
 800290e:	f000 ff37 	bl	8003780 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	22ee      	movs	r2, #238	@ 0xee
 8002918:	2160      	movs	r1, #96	@ 0x60
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fd4c 	bl	80033b8 <CODEC_IO_Write>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	22c0      	movs	r2, #192	@ 0xc0
 8002930:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fd3f 	bl	80033b8 <CODEC_IO_Write>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	22c0      	movs	r2, #192	@ 0xc0
 800294a:	f240 6111 	movw	r1, #1553	@ 0x611
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd32 	bl	80033b8 <CODEC_IO_Write>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2200      	movs	r2, #0
 8002964:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fd25 	bl	80033b8 <CODEC_IO_Write>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	22c0      	movs	r2, #192	@ 0xc0
 800297e:	f240 6112 	movw	r1, #1554	@ 0x612
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd18 	bl	80033b8 <CODEC_IO_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	22c0      	movs	r2, #192	@ 0xc0
 8002998:	f240 6113 	movw	r1, #1555	@ 0x613
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fd0b 	bl	80033b8 <CODEC_IO_Write>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	f240 4122 	movw	r1, #1058	@ 0x422
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fcfe 	bl	80033b8 <CODEC_IO_Write>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80029c6:	7afa      	ldrb	r2, [r7, #11]
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f983 	bl	8002cd8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80029d2:	8afb      	ldrh	r3, [r7, #22]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a6 	beq.w	8002b26 <wm8994_Init+0xcbe>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e0:	d003      	beq.n	80029ea <wm8994_Init+0xb82>
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e8:	d12b      	bne.n	8002a42 <wm8994_Init+0xbda>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80029ea:	8b7b      	ldrh	r3, [r7, #26]
 80029ec:	f043 0313 	orr.w	r3, r3, #19
 80029f0:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	8b7a      	ldrh	r2, [r7, #26]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fcdc 	bl	80033b8 <CODEC_IO_Write>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fccf 	bl	80033b8 <CODEC_IO_Write>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002a2c:	f240 4111 	movw	r1, #1041	@ 0x411
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fcc1 	bl	80033b8 <CODEC_IO_Write>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	e06b      	b.n	8002b1a <wm8994_Init+0xcb2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002a42:	8afb      	ldrh	r3, [r7, #22]
 8002a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a48:	d139      	bne.n	8002abe <wm8994_Init+0xc56>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
 8002a4c:	f043 0313 	orr.w	r3, r3, #19
 8002a50:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	8b7a      	ldrh	r2, [r7, #26]
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fcac 	bl	80033b8 <CODEC_IO_Write>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fc9f 	bl	80033b8 <CODEC_IO_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002a84:	89fb      	ldrh	r3, [r7, #14]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002a8c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fc91 	bl	80033b8 <CODEC_IO_Write>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002aa8:	f240 4111 	movw	r1, #1041	@ 0x411
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fc83 	bl	80033b8 <CODEC_IO_Write>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e02d      	b.n	8002b1a <wm8994_Init+0xcb2>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002abe:	8afb      	ldrh	r3, [r7, #22]
 8002ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ac4:	d003      	beq.n	8002ace <wm8994_Init+0xc66>
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002acc:	d125      	bne.n	8002b1a <wm8994_Init+0xcb2>
    {
    	//change adam 000B - 3
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	220b      	movs	r2, #11
 8002ad4:	2118      	movs	r1, #24
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fc6e 	bl	80033b8 <CODEC_IO_Write>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	220b      	movs	r2, #11
 8002aec:	211a      	movs	r1, #26
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fc62 	bl	80033b8 <CODEC_IO_Write>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x7800);
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8002b06:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fc54 	bl	80033b8 <CODEC_IO_Write>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002b1a:	7afa      	ldrb	r2, [r7, #11]
 8002b1c:	89fb      	ldrh	r3, [r7, #14]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f8d9 	bl	8002cd8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002b26:	69fb      	ldr	r3, [r7, #28]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002b34:	f000 fdc6 	bl	80036c4 <AUDIO_IO_DeInit>
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002b46:	f000 fdb3 	bl	80036b0 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fde9 	bl	8003728 <AUDIO_IO_Read>
 8002b56:	4603      	mov	r3, r0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	80fb      	strh	r3, [r7, #6]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f9d1 	bl	8002f20 <wm8994_SetMute>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f9bc 	bl	8002f20 <wm8994_SetMute>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fbfd 	bl	80033b8 <CODEC_IO_Write>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f99b 	bl	8002f20 <wm8994_SetMute>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002c0c:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <wm8994_Stop+0xd8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05a      	beq.n	8002cca <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f981 	bl	8002f20 <wm8994_SetMute>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d04e      	beq.n	8002cca <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c34:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fbbd 	bl	80033b8 <CODEC_IO_Write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c50:	f240 4122 	movw	r1, #1058	@ 0x422
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fbaf 	bl	80033b8 <CODEC_IO_Write>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	212d      	movs	r1, #45	@ 0x2d
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fba3 	bl	80033b8 <CODEC_IO_Write>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4413      	add	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	212e      	movs	r1, #46	@ 0x2e
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb97 	bl	80033b8 <CODEC_IO_Write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fb8b 	bl	80033b8 <CODEC_IO_Write>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fb7f 	bl	80033b8 <CODEC_IO_Write>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <wm8994_Stop+0xd8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20004970 	.word	0x20004970

08002cd8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	80fb      	strh	r3, [r7, #6]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002cec:	797b      	ldrb	r3, [r7, #5]
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d80b      	bhi.n	8002d0a <wm8994_SetVolume+0x32>
 8002cf2:	797a      	ldrb	r2, [r7, #5]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	019b      	lsls	r3, r3, #6
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	4a86      	ldr	r2, [pc, #536]	@ (8002f14 <wm8994_SetVolume+0x23c>)
 8002cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8002d00:	1152      	asrs	r2, r2, #5
 8002d02:	17db      	asrs	r3, r3, #31
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e000      	b.n	8002d0c <wm8994_SetVolume+0x34>
 8002d0a:	2364      	movs	r3, #100	@ 0x64
 8002d0c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <wm8994_SetVolume+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 809b 	beq.w	8002e4e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d1c:	d93d      	bls.n	8002d9a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f8fc 	bl	8002f20 <wm8994_SetMute>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f240 127f 	movw	r2, #383	@ 0x17f
 8002d38:	211c      	movs	r1, #28
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fb3c 	bl	80033b8 <CODEC_IO_Write>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f240 127f 	movw	r2, #383	@ 0x17f
 8002d52:	211d      	movs	r1, #29
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fb2f 	bl	80033b8 <CODEC_IO_Write>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4413      	add	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f240 127f 	movw	r2, #383	@ 0x17f
 8002d6c:	2126      	movs	r1, #38	@ 0x26
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb22 	bl	80033b8 <CODEC_IO_Write>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f240 127f 	movw	r2, #383	@ 0x17f
 8002d86:	2127      	movs	r1, #39	@ 0x27
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb15 	bl	80033b8 <CODEC_IO_Write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e059      	b.n	8002e4e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002d9a:	797b      	ldrb	r3, [r7, #5]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2101      	movs	r1, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 f8bb 	bl	8002f20 <wm8994_SetMute>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e04c      	b.n	8002e4e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f8b1 	bl	8002f20 <wm8994_SetMute>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2d8      	uxtb	r0, r3
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	211c      	movs	r1, #28
 8002dda:	f000 faed 	bl	80033b8 <CODEC_IO_Write>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2d8      	uxtb	r0, r3
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	211d      	movs	r1, #29
 8002dfc:	f000 fadc 	bl	80033b8 <CODEC_IO_Write>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	b2d8      	uxtb	r0, r3
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2126      	movs	r1, #38	@ 0x26
 8002e1e:	f000 facb 	bl	80033b8 <CODEC_IO_Write>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	b2d8      	uxtb	r0, r3
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2127      	movs	r1, #39	@ 0x27
 8002e40:	f000 faba 	bl	80033b8 <CODEC_IO_Write>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8002e4e:	4b33      	ldr	r3, [pc, #204]	@ (8002f1c <wm8994_SetVolume+0x244>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d059      	beq.n	8002f0a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8002e56:	797b      	ldrb	r3, [r7, #5]
 8002e58:	2b63      	cmp	r3, #99	@ 0x63
 8002e5a:	d80c      	bhi.n	8002e76 <wm8994_SetVolume+0x19e>
 8002e5c:	797a      	ldrb	r2, [r7, #5]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4a2b      	ldr	r2, [pc, #172]	@ (8002f14 <wm8994_SetVolume+0x23c>)
 8002e68:	fb82 1203 	smull	r1, r2, r2, r3
 8002e6c:	1152      	asrs	r2, r2, #5
 8002e6e:	17db      	asrs	r3, r3, #31
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e000      	b.n	8002e78 <wm8994_SetVolume+0x1a0>
 8002e76:	23ef      	movs	r3, #239	@ 0xef
 8002e78:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2d8      	uxtb	r0, r3
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e90:	f000 fa92 	bl	80033b8 <CODEC_IO_Write>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	b2d8      	uxtb	r0, r3
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f240 4101 	movw	r1, #1025	@ 0x401
 8002eb4:	f000 fa80 	bl	80033b8 <CODEC_IO_Write>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	b2d8      	uxtb	r0, r3
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f240 4104 	movw	r1, #1028	@ 0x404
 8002ed8:	f000 fa6e 	bl	80033b8 <CODEC_IO_Write>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	b2d8      	uxtb	r0, r3
 8002eea:	7afb      	ldrb	r3, [r7, #11]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f240 4105 	movw	r1, #1029	@ 0x405
 8002efc:	f000 fa5c 	bl	80033b8 <CODEC_IO_Write>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	51eb851f 	.word	0x51eb851f
 8002f18:	20004970 	.word	0x20004970
 8002f1c:	20004974 	.word	0x20004974

08002f20 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <wm8994_SetMute+0x98>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d039      	beq.n	8002fac <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d11c      	bne.n	8002f78 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f46:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa34 	bl	80033b8 <CODEC_IO_Write>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f62:	f240 4122 	movw	r1, #1058	@ 0x422
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa26 	bl	80033b8 <CODEC_IO_Write>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e019      	b.n	8002fac <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa18 	bl	80033b8 <CODEC_IO_Write>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	f240 4122 	movw	r1, #1058	@ 0x422
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fa0b 	bl	80033b8 <CODEC_IO_Write>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002fac:	68fb      	ldr	r3, [r7, #12]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20004970 	.word	0x20004970

08002fbc <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002fd0:	797b      	ldrb	r3, [r7, #5]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	f000 808c 	beq.w	80030f0 <wm8994_SetOutputMode+0x134>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	f300 80cb 	bgt.w	8003174 <wm8994_SetOutputMode+0x1b8>
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d002      	beq.n	8002fe8 <wm8994_SetOutputMode+0x2c>
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d042      	beq.n	800306c <wm8994_SetOutputMode+0xb0>
 8002fe6:	e0c5      	b.n	8003174 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002ff0:	2105      	movs	r1, #5
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f9e0 	bl	80033b8 <CODEC_IO_Write>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	f240 6101 	movw	r1, #1537	@ 0x601
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f9d3 	bl	80033b8 <CODEC_IO_Write>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2200      	movs	r2, #0
 8003022:	f240 6102 	movw	r1, #1538	@ 0x602
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f9c6 	bl	80033b8 <CODEC_IO_Write>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2202      	movs	r2, #2
 800303c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f9b9 	bl	80033b8 <CODEC_IO_Write>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2202      	movs	r2, #2
 8003056:	f240 6105 	movw	r1, #1541	@ 0x605
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f9ac 	bl	80033b8 <CODEC_IO_Write>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
    break;
 800306a:	e0c5      	b.n	80031f8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f240 3203 	movw	r2, #771	@ 0x303
 8003074:	2105      	movs	r1, #5
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f99e 	bl	80033b8 <CODEC_IO_Write>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2201      	movs	r2, #1
 800308c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f991 	bl	80033b8 <CODEC_IO_Write>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2201      	movs	r2, #1
 80030a6:	f240 6102 	movw	r1, #1538	@ 0x602
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f984 	bl	80033b8 <CODEC_IO_Write>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	f240 6104 	movw	r1, #1540	@ 0x604
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f977 	bl	80033b8 <CODEC_IO_Write>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	f240 6105 	movw	r1, #1541	@ 0x605
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f96a 	bl	80033b8 <CODEC_IO_Write>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    break;
 80030ee:	e083      	b.n	80031f8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80030f8:	2105      	movs	r1, #5
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f95c 	bl	80033b8 <CODEC_IO_Write>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2201      	movs	r2, #1
 8003110:	f240 6101 	movw	r1, #1537	@ 0x601
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f94f 	bl	80033b8 <CODEC_IO_Write>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2201      	movs	r2, #1
 800312a:	f240 6102 	movw	r1, #1538	@ 0x602
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f942 	bl	80033b8 <CODEC_IO_Write>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2202      	movs	r2, #2
 8003144:	f240 6104 	movw	r1, #1540	@ 0x604
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f935 	bl	80033b8 <CODEC_IO_Write>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2202      	movs	r2, #2
 800315e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f928 	bl	80033b8 <CODEC_IO_Write>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    break;
 8003172:	e041      	b.n	80031f8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f240 3203 	movw	r2, #771	@ 0x303
 800317c:	2105      	movs	r1, #5
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f91a 	bl	80033b8 <CODEC_IO_Write>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2201      	movs	r2, #1
 8003194:	f240 6101 	movw	r1, #1537	@ 0x601
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f90d 	bl	80033b8 <CODEC_IO_Write>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2201      	movs	r2, #1
 80031ae:	f240 6102 	movw	r1, #1538	@ 0x602
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f900 	bl	80033b8 <CODEC_IO_Write>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	f240 6104 	movw	r1, #1540	@ 0x604
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f8f3 	bl	80033b8 <CODEC_IO_Write>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	f240 6105 	movw	r1, #1541	@ 0x605
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f8e6 	bl	80033b8 <CODEC_IO_Write>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    break;    
 80031f6:	bf00      	nop
  }  
  return counter;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4a57      	ldr	r2, [pc, #348]	@ (8003374 <wm8994_SetFrequency+0x170>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d05f      	beq.n	80032dc <wm8994_SetFrequency+0xd8>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4a55      	ldr	r2, [pc, #340]	@ (8003374 <wm8994_SetFrequency+0x170>)
 8003220:	4293      	cmp	r3, r2
 8003222:	f200 8093 	bhi.w	800334c <wm8994_SetFrequency+0x148>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800322c:	4293      	cmp	r3, r2
 800322e:	d047      	beq.n	80032c0 <wm8994_SetFrequency+0xbc>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003236:	4293      	cmp	r3, r2
 8003238:	f200 8088 	bhi.w	800334c <wm8994_SetFrequency+0x148>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003242:	4293      	cmp	r3, r2
 8003244:	d074      	beq.n	8003330 <wm8994_SetFrequency+0x12c>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800324c:	4293      	cmp	r3, r2
 800324e:	d87d      	bhi.n	800334c <wm8994_SetFrequency+0x148>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003256:	4293      	cmp	r3, r2
 8003258:	d05c      	beq.n	8003314 <wm8994_SetFrequency+0x110>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003260:	4293      	cmp	r3, r2
 8003262:	d873      	bhi.n	800334c <wm8994_SetFrequency+0x148>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800326a:	d01b      	beq.n	80032a4 <wm8994_SetFrequency+0xa0>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003272:	d86b      	bhi.n	800334c <wm8994_SetFrequency+0x148>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800327a:	d005      	beq.n	8003288 <wm8994_SetFrequency+0x84>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003282:	4293      	cmp	r3, r2
 8003284:	d038      	beq.n	80032f8 <wm8994_SetFrequency+0xf4>
 8003286:	e061      	b.n	800334c <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2203      	movs	r2, #3
 800328e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f890 	bl	80033b8 <CODEC_IO_Write>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    break;
 80032a2:	e061      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2233      	movs	r2, #51	@ 0x33
 80032aa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f882 	bl	80033b8 <CODEC_IO_Write>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    break;
 80032be:	e053      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2283      	movs	r2, #131	@ 0x83
 80032c6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f874 	bl	80033b8 <CODEC_IO_Write>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    break;
 80032da:	e045      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	22a3      	movs	r2, #163	@ 0xa3
 80032e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f866 	bl	80033b8 <CODEC_IO_Write>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    break;
 80032f6:	e037      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2213      	movs	r2, #19
 80032fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f858 	bl	80033b8 <CODEC_IO_Write>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
    break;
 8003312:	e029      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2243      	movs	r2, #67	@ 0x43
 800331a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f84a 	bl	80033b8 <CODEC_IO_Write>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
    break;
 800332e:	e01b      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2273      	movs	r2, #115	@ 0x73
 8003336:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f83c 	bl	80033b8 <CODEC_IO_Write>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    break; 
 800334a:	e00d      	b.n	8003368 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2283      	movs	r2, #131	@ 0x83
 8003352:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f82e 	bl	80033b8 <CODEC_IO_Write>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
    break; 
 8003366:	bf00      	nop
  }
  return counter;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00017700 	.word	0x00017700

08003378 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f812 	bl	80033b8 <CODEC_IO_Write>
 8003394:	4603      	mov	r3, r0
 8003396:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <wm8994_Reset+0x38>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800339e:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <wm8994_Reset+0x3c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

  return counter;
 80033a4:	68fb      	ldr	r3, [r7, #12]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20004970 	.word	0x20004970
 80033b4:	20004974 	.word	0x20004974

080033b8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
 80033c2:	460b      	mov	r3, r1
 80033c4:	80bb      	strh	r3, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	88b9      	ldrh	r1, [r7, #4]
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f97d 	bl	80036d4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	b2db      	uxtb	r3, r3
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	@ 0x30
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <I2Cx_MspInit+0x16c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d15b      	bne.n	80034b0 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 80033f8:	4b57      	ldr	r3, [pc, #348]	@ (8003558 <I2Cx_MspInit+0x170>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <I2Cx_MspInit+0x170>)
 80033fe:	f043 0308 	orr.w	r3, r3, #8
 8003402:	6313      	str	r3, [r2, #48]	@ 0x30
 8003404:	4b54      	ldr	r3, [pc, #336]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003410:	4b51      	ldr	r3, [pc, #324]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	4a50      	ldr	r2, [pc, #320]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	6313      	str	r3, [r2, #48]	@ 0x30
 800341c:	4b4e      	ldr	r3, [pc, #312]	@ (8003558 <I2Cx_MspInit+0x170>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800342c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800342e:	2312      	movs	r3, #18
 8003430:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003436:	2302      	movs	r3, #2
 8003438:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800343a:	2304      	movs	r3, #4
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	4619      	mov	r1, r3
 8003444:	4845      	ldr	r0, [pc, #276]	@ (800355c <I2Cx_MspInit+0x174>)
 8003446:	f001 fb3b 	bl	8004ac0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800344e:	230b      	movs	r3, #11
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	4619      	mov	r1, r3
 8003458:	4841      	ldr	r0, [pc, #260]	@ (8003560 <I2Cx_MspInit+0x178>)
 800345a:	f001 fb31 	bl	8004ac0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800345e:	4b3e      	ldr	r3, [pc, #248]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	4a3d      	ldr	r2, [pc, #244]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003468:	6413      	str	r3, [r2, #64]	@ 0x40
 800346a:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <I2Cx_MspInit+0x170>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003476:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4a37      	ldr	r2, [pc, #220]	@ (8003558 <I2Cx_MspInit+0x170>)
 800347c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003480:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003482:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003488:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	210f      	movs	r1, #15
 8003492:	205f      	movs	r0, #95	@ 0x5f
 8003494:	f000 fadb 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003498:	205f      	movs	r0, #95	@ 0x5f
 800349a:	f000 faf4 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	210f      	movs	r1, #15
 80034a2:	2060      	movs	r0, #96	@ 0x60
 80034a4:	f000 fad3 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80034a8:	2060      	movs	r0, #96	@ 0x60
 80034aa:	f000 faec 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80034ae:	e04d      	b.n	800354c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80034b0:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <I2Cx_MspInit+0x170>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <I2Cx_MspInit+0x170>)
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <I2Cx_MspInit+0x170>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80034c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80034ce:	2312      	movs	r3, #18
 80034d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80034d6:	2302      	movs	r3, #2
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80034da:	2304      	movs	r3, #4
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	481e      	ldr	r0, [pc, #120]	@ (8003560 <I2Cx_MspInit+0x178>)
 80034e6:	f001 faeb 	bl	8004ac0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80034ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	4619      	mov	r1, r3
 80034f6:	481a      	ldr	r0, [pc, #104]	@ (8003560 <I2Cx_MspInit+0x178>)
 80034f8:	f001 fae2 	bl	8004ac0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80034fc:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <I2Cx_MspInit+0x170>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003506:	6413      	str	r3, [r2, #64]	@ 0x40
 8003508:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <I2Cx_MspInit+0x170>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003514:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a0f      	ldr	r2, [pc, #60]	@ (8003558 <I2Cx_MspInit+0x170>)
 800351a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800351e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003520:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4a0c      	ldr	r2, [pc, #48]	@ (8003558 <I2Cx_MspInit+0x170>)
 8003526:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800352a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	210f      	movs	r1, #15
 8003530:	201f      	movs	r0, #31
 8003532:	f000 fa8c 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003536:	201f      	movs	r0, #31
 8003538:	f000 faa5 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	210f      	movs	r1, #15
 8003540:	2020      	movs	r0, #32
 8003542:	f000 fa84 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003546:	2020      	movs	r0, #32
 8003548:	f000 fa9d 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 800354c:	bf00      	nop
 800354e:	3730      	adds	r7, #48	@ 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20004978 	.word	0x20004978
 8003558:	40023800 	.word	0x40023800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40020400 	.word	0x40020400

08003564 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f002 f8b9 	bl	80056e4 <HAL_I2C_GetState>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d125      	bne.n	80035c4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <I2Cx_Init+0x68>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a13      	ldr	r2, [pc, #76]	@ (80035d0 <I2Cx_Init+0x6c>)
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e002      	b.n	800358e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <I2Cx_Init+0x70>)
 800358c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a11      	ldr	r2, [pc, #68]	@ (80035d8 <I2Cx_Init+0x74>)
 8003592:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff15 	bl	80033e8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fd82 	bl	80050c8 <HAL_I2C_Init>
  }
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20004978 	.word	0x20004978
 80035d0:	40006000 	.word	0x40006000
 80035d4:	40005400 	.word	0x40005400
 80035d8:	40912732 	.word	0x40912732

080035dc <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	@ 0x28
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	72fb      	strb	r3, [r7, #11]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	b299      	uxth	r1, r3
 80035fe:	88f8      	ldrh	r0, [r7, #6]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f001 ff4c 	bl	80054b0 <HAL_I2C_Mem_Read>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	4619      	mov	r1, r3
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f832 	bl	8003690 <I2Cx_Error>
  }
  return status;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b08a      	sub	sp, #40	@ 0x28
 800363a:	af04      	add	r7, sp, #16
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	4608      	mov	r0, r1
 8003640:	4611      	mov	r1, r2
 8003642:	461a      	mov	r2, r3
 8003644:	4603      	mov	r3, r0
 8003646:	72fb      	strb	r3, [r7, #11]
 8003648:	460b      	mov	r3, r1
 800364a:	813b      	strh	r3, [r7, #8]
 800364c:	4613      	mov	r3, r2
 800364e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	b299      	uxth	r1, r3
 8003658:	88f8      	ldrh	r0, [r7, #6]
 800365a:	893a      	ldrh	r2, [r7, #8]
 800365c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003660:	9302      	str	r3, [sp, #8]
 8003662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4603      	mov	r3, r0
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f001 fe0b 	bl	8005288 <HAL_I2C_Mem_Write>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	4619      	mov	r1, r3
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f805 	bl	8003690 <I2Cx_Error>
  }
  return status;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f001 fdaf 	bl	8005200 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff5e 	bl	8003564 <I2Cx_Init>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80036b4:	4802      	ldr	r0, [pc, #8]	@ (80036c0 <AUDIO_IO_Init+0x10>)
 80036b6:	f7ff ff55 	bl	8003564 <I2Cx_Init>
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20004978 	.word	0x20004978

080036c4 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
 80036de:	460b      	mov	r3, r1
 80036e0:	80bb      	strh	r3, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80036ea:	89fb      	ldrh	r3, [r7, #14]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80036f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	b21b      	sxth	r3, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003706:	88ba      	ldrh	r2, [r7, #4]
 8003708:	79f9      	ldrb	r1, [r7, #7]
 800370a:	2302      	movs	r3, #2
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2302      	movs	r3, #2
 8003714:	4803      	ldr	r0, [pc, #12]	@ (8003724 <AUDIO_IO_Write+0x50>)
 8003716:	f7ff ff8e 	bl	8003636 <I2Cx_WriteMultiple>
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20004978 	.word	0x20004978

08003728 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	4603      	mov	r3, r0
 8003730:	460a      	mov	r2, r1
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	4613      	mov	r3, r2
 8003736:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	81bb      	strh	r3, [r7, #12]
 800373c:	2300      	movs	r3, #0
 800373e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003740:	88ba      	ldrh	r2, [r7, #4]
 8003742:	79f9      	ldrb	r1, [r7, #7]
 8003744:	2302      	movs	r3, #2
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2302      	movs	r3, #2
 8003750:	480a      	ldr	r0, [pc, #40]	@ (800377c <AUDIO_IO_Read+0x54>)
 8003752:	f7ff ff43 	bl	80035dc <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003756:	89bb      	ldrh	r3, [r7, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	b21b      	sxth	r3, r3
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	b21a      	sxth	r2, r3
 8003764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003768:	4313      	orrs	r3, r2
 800376a:	b21b      	sxth	r3, r3
 800376c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003772:	89bb      	ldrh	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20004978 	.word	0x20004978

08003780 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f861 	bl	8003850 <HAL_Delay>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379a:	2003      	movs	r0, #3
 800379c:	f000 f94c 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a0:	200f      	movs	r0, #15
 80037a2:	f000 f805 	bl	80037b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a6:	f7fd fe4f 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b8:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_InitTick+0x54>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_InitTick+0x58>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f967 	bl	8003aa2 <HAL_SYSTICK_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e00e      	b.n	80037fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b0f      	cmp	r3, #15
 80037e2:	d80a      	bhi.n	80037fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e4:	2200      	movs	r2, #0
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f000 f92f 	bl	8003a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f0:	4a06      	ldr	r2, [pc, #24]	@ (800380c <HAL_InitTick+0x5c>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000008 	.word	0x20000008
 8003808:	20000040 	.word	0x20000040
 800380c:	2000003c 	.word	0x2000003c

08003810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_IncTick+0x20>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_IncTick+0x24>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4413      	add	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_IncTick+0x24>)
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000040 	.word	0x20000040
 8003834:	200049cc 	.word	0x200049cc

08003838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return uwTick;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_GetTick+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	200049cc 	.word	0x200049cc

08003850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003858:	f7ff ffee 	bl	8003838 <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d005      	beq.n	8003876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800386a:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <HAL_Delay+0x44>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003876:	bf00      	nop
 8003878:	f7ff ffde 	bl	8003838 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d8f7      	bhi.n	8003878 <HAL_Delay+0x28>
  {
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000040 	.word	0x20000040

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <__NVIC_SetPriorityGrouping+0x40>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c6:	4a04      	ldr	r2, [pc, #16]	@ (80038d8 <__NVIC_SetPriorityGrouping+0x40>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	60d3      	str	r3, [r2, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00
 80038dc:	05fa0000 	.word	0x05fa0000

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	@ (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	@ (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	@ (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	@ 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	@ 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff3e 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff8e 	bl	800398c <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5d 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff31 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa2 	bl	80039f4 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d106      	bne.n	8003ad8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003ad6:	e005      	b.n	8003ae4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ade:	f023 0304 	bic.w	r3, r3, #4
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0ac      	b.n	8003c60 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fb88 	bl	8004220 <DFSDM_GetChannelFromInstance>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a55      	ldr	r2, [pc, #340]	@ (8003c68 <HAL_DFSDM_ChannelInit+0x174>)
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e09f      	b.n	8003c60 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fd fd2f 	bl	8001584 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b26:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <HAL_DFSDM_ChannelInit+0x178>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c6c <HAL_DFSDM_ChannelInit+0x178>)
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8003b30:	4b4e      	ldr	r3, [pc, #312]	@ (8003c6c <HAL_DFSDM_ChannelInit+0x178>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d125      	bne.n	8003b84 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b38:	4b4d      	ldr	r3, [pc, #308]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b42:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b44:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4948      	ldr	r1, [pc, #288]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b52:	4b47      	ldr	r3, [pc, #284]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a46      	ldr	r2, [pc, #280]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b58:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003b5c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d108      	bne.n	8003b78 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8003b66:	4b42      	ldr	r3, [pc, #264]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	493f      	ldr	r1, [pc, #252]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b78:	4b3d      	ldr	r3, [pc, #244]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b82:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003b92:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ba2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ba8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 020f 	bic.w	r2, r2, #15
 8003bc0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003be8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f002 0207 	and.w	r2, r2, #7
 8003c14:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c40:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fae6 	bl	8004220 <DFSDM_GetChannelFromInstance>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4904      	ldr	r1, [pc, #16]	@ (8003c68 <HAL_DFSDM_ChannelInit+0x174>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200049d4 	.word	0x200049d4
 8003c6c:	200049d0 	.word	0x200049d0
 8003c70:	40017400 	.word	0x40017400

08003c74 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0c6      	b.n	8003e3c <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a64      	ldr	r2, [pc, #400]	@ (8003e44 <HAL_DFSDM_FilterInit+0x1a8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d109      	bne.n	8003ccc <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d003      	beq.n	8003cc8 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b7      	b.n	8003e3c <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fbd7 	bl	8001498 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003cf8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7a1b      	ldrb	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e007      	b.n	8003d24 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003d22:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7a5b      	ldrb	r3, [r3, #9]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d108      	bne.n	8003d3e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e007      	b.n	8003d4e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b3b      	ldr	r3, [pc, #236]	@ (8003e48 <HAL_DFSDM_FilterInit+0x1ac>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d108      	bne.n	8003d78 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7c1b      	ldrb	r3, [r3, #16]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d108      	bne.n	8003d92 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0210 	orr.w	r2, r2, #16
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e007      	b.n	8003da2 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0210 	bic.w	r2, r2, #16
 8003da0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7c5b      	ldrb	r3, [r3, #17]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0220 	orr.w	r2, r2, #32
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0220 	bic.w	r2, r2, #32
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6959      	ldr	r1, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_DFSDM_FilterInit+0x1b0>)
 8003dd8:	400b      	ands	r3, r1
 8003dda:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6959      	ldr	r1, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003dee:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003df6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7c1a      	ldrb	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40017500 	.word	0x40017500
 8003e48:	ffff80f7 	.word	0xffff80f7
 8003e4c:	1c00ff00 	.word	0x1c00ff00

08003e50 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02c      	beq.n	8003ec4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003e70:	2bff      	cmp	r3, #255	@ 0xff
 8003e72:	d027      	beq.n	8003ec4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8003e80:	400b      	ands	r3, r1
 8003e82:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10d      	bne.n	8003ea6 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e00a      	b.n	8003ebc <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec2:	e001      	b.n	8003ec8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	f8fbffff 	.word	0xf8fbffff

08003edc <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	@ 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check if overrun occurs during regular conversion */
  if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) != 0) && \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d011      	beq.n	8003f16 <HAL_DFSDM_IRQHandler+0x3a>
     ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_ROVRIE) != 0))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
  if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) != 0) && \
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_DFSDM_IRQHandler+0x3a>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2208      	movs	r2, #8
 8003f06:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f97c 	bl	800420c <HAL_DFSDM_FilterErrorCallback>
 8003f14:	e152      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) != 0) && \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <HAL_DFSDM_IRQHandler+0x6c>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JOVRIE) != 0))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) != 0) && \
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2204      	movs	r2, #4
 8003f38:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f963 	bl	800420c <HAL_DFSDM_FilterErrorCallback>
 8003f46:	e139      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if end of regular conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != 0) && \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d027      	beq.n	8003fa6 <HAL_DFSDM_IRQHandler+0xca>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_REOCIE) != 0))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != 0) && \
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_DFSDM_IRQHandler+0xca>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f931 	bl	80041cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 8123 	bne.w	80041ba <HAL_DFSDM_IRQHandler+0x2de>
       (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 811e 	bne.w	80041ba <HAL_DFSDM_IRQHandler+0x2de>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0202 	bic.w	r2, r2, #2
 8003f8c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d101      	bne.n	8003f9c <HAL_DFSDM_IRQHandler+0xc0>
 8003f98:	2201      	movs	r2, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_DFSDM_IRQHandler+0xc2>
 8003f9c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003fa4:	e109      	b.n	80041ba <HAL_DFSDM_IRQHandler+0x2de>
    }
  }
  /* Check if end of injected conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != 0) && \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d036      	beq.n	8004022 <HAL_DFSDM_IRQHandler+0x146>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JEOCIE) != 0))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 0301 	and.w	r3, r3, #1
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != 0) && \
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02f      	beq.n	8004022 <HAL_DFSDM_IRQHandler+0x146>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f90c 	bl	80041e0 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	649a      	str	r2, [r3, #72]	@ 0x48
    if(hdfsdm_filter->InjConvRemaining == 0)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 80f0 	bne.w	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
    {
      /* End of conversion if trigger is software */
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d112      	bne.n	800400a <HAL_DFSDM_IRQHandler+0x12e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d101      	bne.n	8004002 <HAL_DFSDM_IRQHandler+0x126>
 8003ffe:	2201      	movs	r2, #1
 8004000:	e000      	b.n	8004004 <HAL_DFSDM_IRQHandler+0x128>
 8004002:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <HAL_DFSDM_IRQHandler+0x13e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	e000      	b.n	800401c <HAL_DFSDM_IRQHandler+0x140>
 800401a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6493      	str	r3, [r2, #72]	@ 0x48
    if(hdfsdm_filter->InjConvRemaining == 0)
 8004020:	e0cc      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if analog watchdog occurs */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_AWDF) != 0) && \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d042      	beq.n	80040b6 <HAL_DFSDM_IRQHandler+0x1da>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_AWDIE) != 0))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0310 	and.w	r3, r3, #16
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_AWDF) != 0) && \
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03b      	beq.n	80040b6 <HAL_DFSDM_IRQHandler+0x1da>
  {
    uint32_t reg = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t threshold = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
    uint32_t channel = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	623b      	str	r3, [r7, #32]

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_DFSDM_IRQHandler+0x182>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_DFSDM_IRQHandler+0x184>
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
    if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_DFSDM_IRQHandler+0x1a0>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    while((reg & 1) == 0)
 800406e:	e005      	b.n	800407c <HAL_DFSDM_IRQHandler+0x1a0>
    {
      channel++;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	3301      	adds	r3, #1
 8004074:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
    while((reg & 1) == 0)
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f4      	beq.n	8004070 <HAL_DFSDM_IRQHandler+0x194>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_DFSDM_IRQHandler+0x1be>
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	3308      	adds	r3, #8
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	461a      	mov	r2, r3
 8004098:	e004      	b.n	80040a4 <HAL_DFSDM_IRQHandler+0x1c8>
                                     (1 << channel);
 800409a:	2201      	movs	r2, #1
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
                                        (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80040a2:	461a      	mov	r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	6a39      	ldr	r1, [r7, #32]
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8a0 	bl	80041f4 <HAL_DFSDM_FilterAwdCallback>
  {
 80040b4:	e082      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if clock absence occurs */
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a42      	ldr	r2, [pc, #264]	@ (80041c4 <HAL_DFSDM_IRQHandler+0x2e8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d145      	bne.n	800414c <HAL_DFSDM_IRQHandler+0x270>
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03e      	beq.n	800414c <HAL_DFSDM_IRQHandler+0x270>
         ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_CKABIE) != 0))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d037      	beq.n	800414c <HAL_DFSDM_IRQHandler+0x270>
  {
    uint32_t reg = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    uint32_t channel = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	61fb      	str	r3, [r7, #28]

    while(channel < DFSDM1_CHANNEL_NUMBER)
 80040f0:	e028      	b.n	8004144 <HAL_DFSDM_IRQHandler+0x268>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if(((reg & 1) != 0) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01d      	beq.n	8004138 <HAL_DFSDM_IRQHandler+0x25c>
 80040fc:	4a32      	ldr	r2, [pc, #200]	@ (80041c8 <HAL_DFSDM_IRQHandler+0x2ec>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_DFSDM_IRQHandler+0x25c>
      {
        /* Check clock absence has been enabled for this channel */
        if((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0)
 8004108:	4a2f      	ldr	r2, [pc, #188]	@ (80041c8 <HAL_DFSDM_IRQHandler+0x2ec>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_DFSDM_IRQHandler+0x25c>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3310      	adds	r3, #16
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <HAL_DFSDM_IRQHandler+0x2ec>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fd9e 	bl	8003c74 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3301      	adds	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
    while(channel < DFSDM1_CHANNEL_NUMBER)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b07      	cmp	r3, #7
 8004148:	d9d3      	bls.n	80040f2 <HAL_DFSDM_IRQHandler+0x216>
  {
 800414a:	e037      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if short circuit detection occurs */
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1c      	ldr	r2, [pc, #112]	@ (80041c4 <HAL_DFSDM_IRQHandler+0x2e8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d132      	bne.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004160:	d32c      	bcc.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
         ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_SCDIE) != 0))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0320 	and.w	r3, r3, #32
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 800416c:	2b00      	cmp	r3, #0
 800416e:	d025      	beq.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
  {
    uint32_t reg = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
    uint32_t channel = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0e1b      	lsrs	r3, r3, #24
 8004180:	b2db      	uxtb	r3, r3
 8004182:	617b      	str	r3, [r7, #20]
    while((reg & 1) == 0)
 8004184:	e005      	b.n	8004192 <HAL_DFSDM_IRQHandler+0x2b6>
    {
      channel++;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3301      	adds	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
      reg = reg >> 1;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	617b      	str	r3, [r7, #20]
    while((reg & 1) == 0)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f4      	beq.n	8004186 <HAL_DFSDM_IRQHandler+0x2aa>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	3318      	adds	r3, #24
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80041aa:	4a07      	ldr	r2, [pc, #28]	@ (80041c8 <HAL_DFSDM_IRQHandler+0x2ec>)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fd68 	bl	8003c88 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80041b8:	e000      	b.n	80041bc <HAL_DFSDM_IRQHandler+0x2e0>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80041ba:	bf00      	nop
}
 80041bc:	bf00      	nop
 80041be:	3728      	adds	r7, #40	@ 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40017500 	.word	0x40017500
 80041c8:	200049d4 	.word	0x200049d4

080041cc <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <DFSDM_GetChannelFromInstance+0x7c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e02b      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <DFSDM_GetChannelFromInstance+0x80>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d102      	bne.n	8004244 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e024      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <DFSDM_GetChannelFromInstance+0x84>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800424c:	2302      	movs	r3, #2
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e01d      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <DFSDM_GetChannelFromInstance+0x88>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d102      	bne.n	8004260 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800425a:	2303      	movs	r3, #3
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e016      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <DFSDM_GetChannelFromInstance+0x8c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d102      	bne.n	800426e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004268:	2304      	movs	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e00f      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a0f      	ldr	r2, [pc, #60]	@ (80042b0 <DFSDM_GetChannelFromInstance+0x90>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d102      	bne.n	800427c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004276:	2305      	movs	r3, #5
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e008      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <DFSDM_GetChannelFromInstance+0x94>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d102      	bne.n	800428a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004284:	2306      	movs	r3, #6
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e001      	b.n	800428e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800428a:	2307      	movs	r3, #7
 800428c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40017400 	.word	0x40017400
 80042a0:	40017420 	.word	0x40017420
 80042a4:	40017440 	.word	0x40017440
 80042a8:	40017460 	.word	0x40017460
 80042ac:	40017480 	.word	0x40017480
 80042b0:	400174a0 	.word	0x400174a0
 80042b4:	400174c0 	.word	0x400174c0

080042b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7ff fab8 	bl	8003838 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e099      	b.n	8004408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f4:	e00f      	b.n	8004316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042f6:	f7ff fa9f 	bl	8003838 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b05      	cmp	r3, #5
 8004302:	d908      	bls.n	8004316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2203      	movs	r2, #3
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e078      	b.n	8004408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e8      	bne.n	80042f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4b38      	ldr	r3, [pc, #224]	@ (8004410 <HAL_DMA_Init+0x158>)
 8004330:	4013      	ands	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	2b04      	cmp	r3, #4
 800436e:	d107      	bne.n	8004380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004378:	4313      	orrs	r3, r2
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d117      	bne.n	80043da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb03 	bl	80049c8 <DMA_CheckFifoParam>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2240      	movs	r2, #64	@ 0x40
 80043cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043d6:	2301      	movs	r3, #1
 80043d8:	e016      	b.n	8004408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 faba 	bl	800495c <DMA_CalcBaseAndBitshift>
 80043e8:	4603      	mov	r3, r0
 80043ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	223f      	movs	r2, #63	@ 0x3f
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	e010803f 	.word	0xe010803f

08004414 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e050      	b.n	80044c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d101      	bne.n	8004436 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	e048      	b.n	80044c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2221      	movs	r2, #33	@ 0x21
 8004474:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa70 	bl	800495c <DMA_CalcBaseAndBitshift>
 800447c:	4603      	mov	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	223f      	movs	r2, #63	@ 0x3f
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_DMA_Start_IT+0x26>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e048      	b.n	8004588 <HAL_DMA_Start_IT+0xb8>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d137      	bne.n	800457a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f9ee 	bl	8004900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	223f      	movs	r2, #63	@ 0x3f
 800452a:	409a      	lsls	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0216 	orr.w	r2, r2, #22
 800453e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800454e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0208 	orr.w	r2, r2, #8
 8004566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e005      	b.n	8004586 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2280      	movs	r2, #128	@ 0x80
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00c      	b.n	80045c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2205      	movs	r2, #5
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80045e0:	4b8e      	ldr	r3, [pc, #568]	@ (800481c <HAL_DMA_IRQHandler+0x248>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a8e      	ldr	r2, [pc, #568]	@ (8004820 <HAL_DMA_IRQHandler+0x24c>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	2208      	movs	r2, #8
 8004600:	409a      	lsls	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01a      	beq.n	8004640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462c:	2208      	movs	r2, #8
 800462e:	409a      	lsls	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	2201      	movs	r2, #1
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467a:	2204      	movs	r2, #4
 800467c:	409a      	lsls	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d012      	beq.n	80046ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00b      	beq.n	80046ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	2204      	movs	r2, #4
 800469a:	409a      	lsls	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	f043 0204 	orr.w	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	2210      	movs	r2, #16
 80046b2:	409a      	lsls	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d043      	beq.n	8004744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03c      	beq.n	8004744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	2210      	movs	r2, #16
 80046d0:	409a      	lsls	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d108      	bne.n	8004704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d024      	beq.n	8004744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
 8004702:	e01f      	b.n	8004744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
 8004714:	e016      	b.n	8004744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0208 	bic.w	r2, r2, #8
 8004732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	2220      	movs	r2, #32
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 808f 	beq.w	8004874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8087 	beq.w	8004874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476a:	2220      	movs	r2, #32
 800476c:	409a      	lsls	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b05      	cmp	r3, #5
 800477c:	d136      	bne.n	80047ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0216 	bic.w	r2, r2, #22
 800478c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800479c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_DMA_IRQHandler+0x1da>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0208 	bic.w	r2, r2, #8
 80047bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	223f      	movs	r2, #63	@ 0x3f
 80047c4:	409a      	lsls	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d07e      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
        }
        return;
 80047ea:	e079      	b.n	80048e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480c:	2b00      	cmp	r3, #0
 800480e:	d031      	beq.n	8004874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
 8004818:	e02c      	b.n	8004874 <HAL_DMA_IRQHandler+0x2a0>
 800481a:	bf00      	nop
 800481c:	20000008 	.word	0x20000008
 8004820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d023      	beq.n	8004874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
 8004834:	e01e      	b.n	8004874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10f      	bne.n	8004864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0210 	bic.w	r2, r2, #16
 8004852:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	2b00      	cmp	r3, #0
 800487a:	d032      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2205      	movs	r2, #5
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d307      	bcc.n	80048bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f2      	bne.n	80048a0 <HAL_DMA_IRQHandler+0x2cc>
 80048ba:	e000      	b.n	80048be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
 80048de:	e000      	b.n	80048e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048e0:	bf00      	nop
    }
  }
}
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800491c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b40      	cmp	r3, #64	@ 0x40
 800492c:	d108      	bne.n	8004940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800493e:	e007      	b.n	8004950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3b10      	subs	r3, #16
 800496c:	4a13      	ldr	r2, [pc, #76]	@ (80049bc <DMA_CalcBaseAndBitshift+0x60>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004976:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <DMA_CalcBaseAndBitshift+0x64>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d908      	bls.n	800499c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004992:	4013      	ands	r3, r2
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	659a      	str	r2, [r3, #88]	@ 0x58
 800499a:	e006      	b.n	80049aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b08      	ldr	r3, [pc, #32]	@ (80049c4 <DMA_CalcBaseAndBitshift+0x68>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	aaaaaaab 	.word	0xaaaaaaab
 80049c0:	0800d9c4 	.word	0x0800d9c4
 80049c4:	fffffc00 	.word	0xfffffc00

080049c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11f      	bne.n	8004a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d856      	bhi.n	8004a96 <DMA_CheckFifoParam+0xce>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <DMA_CheckFifoParam+0x28>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a13 	.word	0x08004a13
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a97 	.word	0x08004a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d046      	beq.n	8004a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a10:	e043      	b.n	8004a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a1a:	d140      	bne.n	8004a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e03d      	b.n	8004a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	d121      	bne.n	8004a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d837      	bhi.n	8004aa2 <DMA_CheckFifoParam+0xda>
 8004a32:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <DMA_CheckFifoParam+0x70>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a4f 	.word	0x08004a4f
 8004a40:	08004a49 	.word	0x08004a49
 8004a44:	08004a61 	.word	0x08004a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e030      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d025      	beq.n	8004aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5e:	e022      	b.n	8004aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a68:	d11f      	bne.n	8004aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a6e:	e01c      	b.n	8004aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d903      	bls.n	8004a7e <DMA_CheckFifoParam+0xb6>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d003      	beq.n	8004a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a7c:	e018      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
      break;
 8004a82:	e015      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e00b      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004a96:	bf00      	nop
 8004a98:	e00a      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e008      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e006      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e004      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8004aae:	bf00      	nop
    }
  } 
  
  return status; 
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop

08004ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	@ 0x24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	e175      	b.n	8004dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	f040 8164 	bne.w	8004dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d005      	beq.n	8004b16 <HAL_GPIO_Init+0x56>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d130      	bne.n	8004b78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 0201 	and.w	r2, r3, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d017      	beq.n	8004bb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	2203      	movs	r2, #3
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d123      	bne.n	8004c08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	08da      	lsrs	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	08da      	lsrs	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3208      	adds	r2, #8
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2203      	movs	r2, #3
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0203 	and.w	r2, r3, #3
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80be 	beq.w	8004dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4a:	4b66      	ldr	r3, [pc, #408]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	4a65      	ldr	r2, [pc, #404]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c62:	4a61      	ldr	r2, [pc, #388]	@ (8004de8 <HAL_GPIO_Init+0x328>)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	3302      	adds	r3, #2
 8004c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a58      	ldr	r2, [pc, #352]	@ (8004dec <HAL_GPIO_Init+0x32c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d037      	beq.n	8004cfe <HAL_GPIO_Init+0x23e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a57      	ldr	r2, [pc, #348]	@ (8004df0 <HAL_GPIO_Init+0x330>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <HAL_GPIO_Init+0x23a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a56      	ldr	r2, [pc, #344]	@ (8004df4 <HAL_GPIO_Init+0x334>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d02b      	beq.n	8004cf6 <HAL_GPIO_Init+0x236>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a55      	ldr	r2, [pc, #340]	@ (8004df8 <HAL_GPIO_Init+0x338>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d025      	beq.n	8004cf2 <HAL_GPIO_Init+0x232>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a54      	ldr	r2, [pc, #336]	@ (8004dfc <HAL_GPIO_Init+0x33c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01f      	beq.n	8004cee <HAL_GPIO_Init+0x22e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a53      	ldr	r2, [pc, #332]	@ (8004e00 <HAL_GPIO_Init+0x340>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d019      	beq.n	8004cea <HAL_GPIO_Init+0x22a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	@ (8004e04 <HAL_GPIO_Init+0x344>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_GPIO_Init+0x226>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a51      	ldr	r2, [pc, #324]	@ (8004e08 <HAL_GPIO_Init+0x348>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_GPIO_Init+0x222>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a50      	ldr	r2, [pc, #320]	@ (8004e0c <HAL_GPIO_Init+0x34c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <HAL_GPIO_Init+0x21e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e10 <HAL_GPIO_Init+0x350>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_GPIO_Init+0x21a>
 8004cd6:	2309      	movs	r3, #9
 8004cd8:	e012      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cda:	230a      	movs	r3, #10
 8004cdc:	e010      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	e00e      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004ce2:	2307      	movs	r3, #7
 8004ce4:	e00c      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004ce6:	2306      	movs	r3, #6
 8004ce8:	e00a      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cea:	2305      	movs	r3, #5
 8004cec:	e008      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	e006      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e004      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e002      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <HAL_GPIO_Init+0x240>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	f002 0203 	and.w	r2, r2, #3
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	4093      	lsls	r3, r2
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d10:	4935      	ldr	r1, [pc, #212]	@ (8004de8 <HAL_GPIO_Init+0x328>)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	3302      	adds	r3, #2
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d42:	4a34      	ldr	r2, [pc, #208]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d48:	4b32      	ldr	r3, [pc, #200]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d6c:	4a29      	ldr	r2, [pc, #164]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d96:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <HAL_GPIO_Init+0x354>)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	f67f ae86 	bls.w	8004ae0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3724      	adds	r7, #36	@ 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40013800 	.word	0x40013800
 8004dec:	40020000 	.word	0x40020000
 8004df0:	40020400 	.word	0x40020400
 8004df4:	40020800 	.word	0x40020800
 8004df8:	40020c00 	.word	0x40020c00
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40021400 	.word	0x40021400
 8004e04:	40021800 	.word	0x40021800
 8004e08:	40021c00 	.word	0x40021c00
 8004e0c:	40022000 	.word	0x40022000
 8004e10:	40022400 	.word	0x40022400
 8004e14:	40013c00 	.word	0x40013c00

08004e18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e0d9      	b.n	8004fe8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e34:	2201      	movs	r2, #1
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f040 80c9 	bne.w	8004fe2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004e50:	4a6b      	ldr	r2, [pc, #428]	@ (8005000 <HAL_GPIO_DeInit+0x1e8>)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	089b      	lsrs	r3, r3, #2
 8004e56:	3302      	adds	r3, #2
 8004e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	220f      	movs	r2, #15
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a63      	ldr	r2, [pc, #396]	@ (8005004 <HAL_GPIO_DeInit+0x1ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d037      	beq.n	8004eea <HAL_GPIO_DeInit+0xd2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a62      	ldr	r2, [pc, #392]	@ (8005008 <HAL_GPIO_DeInit+0x1f0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_GPIO_DeInit+0xce>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a61      	ldr	r2, [pc, #388]	@ (800500c <HAL_GPIO_DeInit+0x1f4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d02b      	beq.n	8004ee2 <HAL_GPIO_DeInit+0xca>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a60      	ldr	r2, [pc, #384]	@ (8005010 <HAL_GPIO_DeInit+0x1f8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d025      	beq.n	8004ede <HAL_GPIO_DeInit+0xc6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a5f      	ldr	r2, [pc, #380]	@ (8005014 <HAL_GPIO_DeInit+0x1fc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <HAL_GPIO_DeInit+0xc2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8005018 <HAL_GPIO_DeInit+0x200>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_DeInit+0xbe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800501c <HAL_GPIO_DeInit+0x204>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_DeInit+0xba>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a5c      	ldr	r2, [pc, #368]	@ (8005020 <HAL_GPIO_DeInit+0x208>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_DeInit+0xb6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a5b      	ldr	r2, [pc, #364]	@ (8005024 <HAL_GPIO_DeInit+0x20c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_DeInit+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8005028 <HAL_GPIO_DeInit+0x210>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_DeInit+0xae>
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	e012      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e010      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	e00e      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ece:	2307      	movs	r3, #7
 8004ed0:	e00c      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	e00a      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	e008      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004eda:	2304      	movs	r3, #4
 8004edc:	e006      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e004      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e002      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_GPIO_DeInit+0xd4>
 8004eea:	2300      	movs	r3, #0
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	f002 0203 	and.w	r2, r2, #3
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4093      	lsls	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d132      	bne.n	8004f62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004efc:	4b4b      	ldr	r3, [pc, #300]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	4949      	ldr	r1, [pc, #292]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f0a:	4b48      	ldr	r3, [pc, #288]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	4946      	ldr	r1, [pc, #280]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f18:	4b44      	ldr	r3, [pc, #272]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	4942      	ldr	r1, [pc, #264]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f26:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	493f      	ldr	r1, [pc, #252]	@ (800502c <HAL_GPIO_DeInit+0x214>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004f44:	4a2e      	ldr	r2, [pc, #184]	@ (8005000 <HAL_GPIO_DeInit+0x1e8>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	43da      	mvns	r2, r3
 8004f54:	482a      	ldr	r0, [pc, #168]	@ (8005000 <HAL_GPIO_DeInit+0x1e8>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	401a      	ands	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	08da      	lsrs	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3208      	adds	r2, #8
 8004f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	08d2      	lsrs	r2, r2, #3
 8004f98:	4019      	ands	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2103      	movs	r1, #3
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2103      	movs	r1, #3
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	401a      	ands	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b0f      	cmp	r3, #15
 8004fec:	f67f af22 	bls.w	8004e34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40013800 	.word	0x40013800
 8005004:	40020000 	.word	0x40020000
 8005008:	40020400 	.word	0x40020400
 800500c:	40020800 	.word	0x40020800
 8005010:	40020c00 	.word	0x40020c00
 8005014:	40021000 	.word	0x40021000
 8005018:	40021400 	.word	0x40021400
 800501c:	40021800 	.word	0x40021800
 8005020:	40021c00 	.word	0x40021c00
 8005024:	40022000 	.word	0x40022000
 8005028:	40022400 	.word	0x40022400
 800502c:	40013c00 	.word	0x40013c00

08005030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	e001      	b.n	8005052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
 800506c:	4613      	mov	r3, r2
 800506e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800507c:	e003      	b.n	8005086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	041a      	lsls	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	619a      	str	r2, [r3, #24]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	041a      	lsls	r2, r3, #16
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	43d9      	mvns	r1, r3
 80050b0:	887b      	ldrh	r3, [r7, #2]
 80050b2:	400b      	ands	r3, r1
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	619a      	str	r2, [r3, #24]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e08b      	b.n	80051f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8b5 	bl	800525e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	@ 0x24
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	e006      	b.n	8005150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800514e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d108      	bne.n	800516a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	e007      	b.n	800517a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b1d      	ldr	r3, [pc, #116]	@ (80051fc <HAL_I2C_Init+0x134>)
 8005186:	430b      	orrs	r3, r1
 8005188:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005198:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69d9      	ldr	r1, [r3, #28]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	02008000 	.word	0x02008000

08005200 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e021      	b.n	8005256 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	@ 0x24
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f821 	bl	8005272 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	4608      	mov	r0, r1
 8005292:	4611      	mov	r1, r2
 8005294:	461a      	mov	r2, r3
 8005296:	4603      	mov	r3, r0
 8005298:	817b      	strh	r3, [r7, #10]
 800529a:	460b      	mov	r3, r1
 800529c:	813b      	strh	r3, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	f040 80f9 	bne.w	80054a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_I2C_Mem_Write+0x34>
 80052b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0ed      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_I2C_Mem_Write+0x4e>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e0e6      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052de:	f7fe faab 	bl	8003838 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2319      	movs	r3, #25
 80052ea:	2201      	movs	r2, #1
 80052ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fad1 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0d1      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2221      	movs	r2, #33	@ 0x21
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2240      	movs	r2, #64	@ 0x40
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005328:	88f8      	ldrh	r0, [r7, #6]
 800532a:	893a      	ldrh	r2, [r7, #8]
 800532c:	8979      	ldrh	r1, [r7, #10]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4603      	mov	r3, r0
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f9e1 	bl	8005700 <I2C_RequestMemoryWrite>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0a9      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2bff      	cmp	r3, #255	@ 0xff
 8005358:	d90e      	bls.n	8005378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	22ff      	movs	r2, #255	@ 0xff
 800535e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005364:	b2da      	uxtb	r2, r3
 8005366:	8979      	ldrh	r1, [r7, #10]
 8005368:	2300      	movs	r3, #0
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fc55 	bl	8005c20 <I2C_TransferConfig>
 8005376:	e00f      	b.n	8005398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	2300      	movs	r3, #0
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fc44 	bl	8005c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fad4 	bl	800594a <I2C_WaitOnTXISFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e07b      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d034      	beq.n	8005450 <HAL_I2C_Mem_Write+0x1c8>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d130      	bne.n	8005450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2200      	movs	r2, #0
 80053f6:	2180      	movs	r1, #128	@ 0x80
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fa4d 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e04d      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2bff      	cmp	r3, #255	@ 0xff
 8005410:	d90e      	bls.n	8005430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	@ 0xff
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	8979      	ldrh	r1, [r7, #10]
 8005420:	2300      	movs	r3, #0
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fbf9 	bl	8005c20 <I2C_TransferConfig>
 800542e:	e00f      	b.n	8005450 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543e:	b2da      	uxtb	r2, r3
 8005440:	8979      	ldrh	r1, [r7, #10]
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fbe8 	bl	8005c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d19e      	bne.n	8005398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 faba 	bl	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e01a      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2220      	movs	r2, #32
 8005474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <HAL_I2C_Mem_Write+0x224>)
 8005482:	400b      	ands	r3, r1
 8005484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	fe00e800 	.word	0xfe00e800

080054b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	460b      	mov	r3, r1
 80054c4:	813b      	strh	r3, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	f040 80fd 	bne.w	80056d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_I2C_Mem_Read+0x34>
 80054de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0f1      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_I2C_Mem_Read+0x4e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0ea      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005506:	f7fe f997 	bl	8003838 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2319      	movs	r3, #25
 8005512:	2201      	movs	r2, #1
 8005514:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f9bd 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0d5      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2222      	movs	r2, #34	@ 0x22
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2240      	movs	r2, #64	@ 0x40
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005548:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005550:	88f8      	ldrh	r0, [r7, #6]
 8005552:	893a      	ldrh	r2, [r7, #8]
 8005554:	8979      	ldrh	r1, [r7, #10]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4603      	mov	r3, r0
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f921 	bl	80057a8 <I2C_RequestMemoryRead>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0ad      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2bff      	cmp	r3, #255	@ 0xff
 8005580:	d90e      	bls.n	80055a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558c:	b2da      	uxtb	r2, r3
 800558e:	8979      	ldrh	r1, [r7, #10]
 8005590:	4b52      	ldr	r3, [pc, #328]	@ (80056dc <HAL_I2C_Mem_Read+0x22c>)
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fb41 	bl	8005c20 <I2C_TransferConfig>
 800559e:	e00f      	b.n	80055c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	8979      	ldrh	r1, [r7, #10]
 80055b2:	4b4a      	ldr	r3, [pc, #296]	@ (80056dc <HAL_I2C_Mem_Read+0x22c>)
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fb30 	bl	8005c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2200      	movs	r2, #0
 80055c8:	2104      	movs	r1, #4
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f964 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e07c      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d034      	beq.n	8005680 <HAL_I2C_Mem_Read+0x1d0>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d130      	bne.n	8005680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2200      	movs	r2, #0
 8005626:	2180      	movs	r1, #128	@ 0x80
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f935 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e04d      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2bff      	cmp	r3, #255	@ 0xff
 8005640:	d90e      	bls.n	8005660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564c:	b2da      	uxtb	r2, r3
 800564e:	8979      	ldrh	r1, [r7, #10]
 8005650:	2300      	movs	r3, #0
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fae1 	bl	8005c20 <I2C_TransferConfig>
 800565e:	e00f      	b.n	8005680 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566e:	b2da      	uxtb	r2, r3
 8005670:	8979      	ldrh	r1, [r7, #10]
 8005672:	2300      	movs	r3, #0
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fad0 	bl	8005c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d19a      	bne.n	80055c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f9a2 	bl	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e01a      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2220      	movs	r2, #32
 80056a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <HAL_I2C_Mem_Read+0x230>)
 80056b2:	400b      	ands	r3, r1
 80056b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e000      	b.n	80056d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
  }
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	80002400 	.word	0x80002400
 80056e0:	fe00e800 	.word	0xfe00e800

080056e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	b2db      	uxtb	r3, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	460b      	mov	r3, r1
 8005714:	813b      	strh	r3, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	8979      	ldrh	r1, [r7, #10]
 8005720:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <I2C_RequestMemoryWrite+0xa4>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fa79 	bl	8005c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f909 	bl	800594a <I2C_WaitOnTXISFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e02c      	b.n	800579c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005748:	893b      	ldrh	r3, [r7, #8]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	629a      	str	r2, [r3, #40]	@ 0x28
 8005752:	e015      	b.n	8005780 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	b2da      	uxtb	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f8ef 	bl	800594a <I2C_WaitOnTXISFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e012      	b.n	800579c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005776:	893b      	ldrh	r3, [r7, #8]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2200      	movs	r2, #0
 8005788:	2180      	movs	r1, #128	@ 0x80
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f884 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	80002000 	.word	0x80002000

080057a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	817b      	strh	r3, [r7, #10]
 80057ba:	460b      	mov	r3, r1
 80057bc:	813b      	strh	r3, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	8979      	ldrh	r1, [r7, #10]
 80057c8:	4b20      	ldr	r3, [pc, #128]	@ (800584c <I2C_RequestMemoryRead+0xa4>)
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	2300      	movs	r3, #0
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa26 	bl	8005c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	69b9      	ldr	r1, [r7, #24]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f8b6 	bl	800594a <I2C_WaitOnTXISFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e02c      	b.n	8005842 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d105      	bne.n	80057fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ee:	893b      	ldrh	r3, [r7, #8]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80057f8:	e015      	b.n	8005826 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	b29b      	uxth	r3, r3
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f89c 	bl	800594a <I2C_WaitOnTXISFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e012      	b.n	8005842 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800581c:	893b      	ldrh	r3, [r7, #8]
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2200      	movs	r2, #0
 800582e:	2140      	movs	r1, #64	@ 0x40
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f831 	bl	8005898 <I2C_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	80002000 	.word	0x80002000

08005850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d103      	bne.n	800586e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d007      	beq.n	800588c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	619a      	str	r2, [r3, #24]
  }
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a8:	e03b      	b.n	8005922 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f8d6 	bl	8005a60 <I2C_IsErrorOccurred>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e041      	b.n	8005942 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d02d      	beq.n	8005922 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fd ffb7 	bl	8003838 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d122      	bne.n	8005922 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d113      	bne.n	8005922 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00f      	b.n	8005942 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d0b4      	beq.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005956:	e033      	b.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f87f 	bl	8005a60 <I2C_IsErrorOccurred>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e031      	b.n	80059d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d025      	beq.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fd ff60 	bl	8003838 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11a      	bne.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d013      	beq.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599c:	f043 0220 	orr.w	r2, r3, #32
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e007      	b.n	80059d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d1c4      	bne.n	8005958 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059e4:	e02f      	b.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f838 	bl	8005a60 <I2C_IsErrorOccurred>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e02d      	b.n	8005a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fd ff1d 	bl	8003838 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11a      	bne.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d013      	beq.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e007      	b.n	8005a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d1c8      	bne.n	80059e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d068      	beq.n	8005b5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2210      	movs	r2, #16
 8005a92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a94:	e049      	b.n	8005b2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d045      	beq.n	8005b2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fd fecb 	bl	8003838 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_IsErrorOccurred+0x54>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d13a      	bne.n	8005b2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005abe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ac6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad6:	d121      	bne.n	8005b1c <I2C_IsErrorOccurred+0xbc>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ade:	d01d      	beq.n	8005b1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d01a      	beq.n	8005b1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005af4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005af6:	f7fd fe9f 	bl	8003838 <HAL_GetTick>
 8005afa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005afc:	e00e      	b.n	8005b1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005afe:	f7fd fe9b 	bl	8003838 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b19      	cmp	r3, #25
 8005b0a:	d907      	bls.n	8005b1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f043 0320 	orr.w	r3, r3, #32
 8005b12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b1a:	e006      	b.n	8005b2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d1e9      	bne.n	8005afe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d003      	beq.n	8005b40 <I2C_IsErrorOccurred+0xe0>
 8005b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0aa      	beq.n	8005a96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f043 0308 	orr.w	r3, r3, #8
 8005b98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	f043 0302 	orr.w	r3, r3, #2
 8005bba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01c      	beq.n	8005c0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fe3b 	bl	8005850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <I2C_IsErrorOccurred+0x1bc>)
 8005be6:	400b      	ands	r3, r1
 8005be8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3728      	adds	r7, #40	@ 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	fe00e800 	.word	0xfe00e800

08005c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c38:	7a7b      	ldrb	r3, [r7, #9]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	0d5b      	lsrs	r3, r3, #21
 8005c5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c5e:	4b08      	ldr	r3, [pc, #32]	@ (8005c80 <I2C_TransferConfig+0x60>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	43db      	mvns	r3, r3
 8005c64:	ea02 0103 	and.w	r1, r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	03ff63ff 	.word	0x03ff63ff

08005c84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	4a22      	ldr	r2, [pc, #136]	@ (8005d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1d      	ldr	r2, [pc, #116]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cb2:	f7fd fdc1 	bl	8003838 <HAL_GetTick>
 8005cb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cb8:	e009      	b.n	8005cce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cba:	f7fd fdbd 	bl	8003838 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cc8:	d901      	bls.n	8005cce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e022      	b.n	8005d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cce:	4b14      	ldr	r3, [pc, #80]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cda:	d1ee      	bne.n	8005cba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cdc:	4b10      	ldr	r3, [pc, #64]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ce8:	f7fd fda6 	bl	8003838 <HAL_GetTick>
 8005cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cee:	e009      	b.n	8005d04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cf0:	f7fd fda2 	bl	8003838 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cfe:	d901      	bls.n	8005d04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e007      	b.n	8005d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40007000 	.word	0x40007000

08005d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e29b      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8087 	beq.w	8005e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d48:	4b96      	ldr	r3, [pc, #600]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d00c      	beq.n	8005d6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d54:	4b93      	ldr	r3, [pc, #588]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 030c 	and.w	r3, r3, #12
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d112      	bne.n	8005d86 <HAL_RCC_OscConfig+0x62>
 8005d60:	4b90      	ldr	r3, [pc, #576]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d06c      	beq.n	8005e54 <HAL_RCC_OscConfig+0x130>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d168      	bne.n	8005e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e275      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_OscConfig+0x7a>
 8005d90:	4b84      	ldr	r3, [pc, #528]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a83      	ldr	r2, [pc, #524]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e02e      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x9c>
 8005da6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a7e      	ldr	r2, [pc, #504]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7b      	ldr	r2, [pc, #492]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e01d      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCC_OscConfig+0xc0>
 8005dca:	4b76      	ldr	r3, [pc, #472]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a75      	ldr	r2, [pc, #468]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	4b73      	ldr	r3, [pc, #460]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a72      	ldr	r2, [pc, #456]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00b      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005de4:	4b6f      	ldr	r3, [pc, #444]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4b6c      	ldr	r3, [pc, #432]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6b      	ldr	r2, [pc, #428]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd fd18 	bl	8003838 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7fd fd14 	bl	8003838 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	@ 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e229      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1e:	4b61      	ldr	r3, [pc, #388]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0xe8>
 8005e2a:	e014      	b.n	8005e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fd fd04 	bl	8003838 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7fd fd00 	bl	8003838 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	@ 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e215      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e46:	4b57      	ldr	r3, [pc, #348]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x110>
 8005e52:	e000      	b.n	8005e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d069      	beq.n	8005f36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e62:	4b50      	ldr	r3, [pc, #320]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d11c      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x190>
 8005e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d116      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e86:	4b47      	ldr	r3, [pc, #284]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_RCC_OscConfig+0x17a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d001      	beq.n	8005e9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e1e9      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9e:	4b41      	ldr	r3, [pc, #260]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	493d      	ldr	r1, [pc, #244]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb2:	e040      	b.n	8005f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d023      	beq.n	8005f04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ebc:	4b39      	ldr	r3, [pc, #228]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a38      	ldr	r2, [pc, #224]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fcb6 	bl	8003838 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fd fcb2 	bl	8003838 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1c7      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee2:	4b30      	ldr	r3, [pc, #192]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eee:	4b2d      	ldr	r3, [pc, #180]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4929      	ldr	r1, [pc, #164]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]
 8005f02:	e018      	b.n	8005f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f04:	4b27      	ldr	r3, [pc, #156]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a26      	ldr	r2, [pc, #152]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fd fc92 	bl	8003838 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f18:	f7fd fc8e 	bl	8003838 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1a3      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d038      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d019      	beq.n	8005f7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4a:	4b16      	ldr	r3, [pc, #88]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4e:	4a15      	ldr	r2, [pc, #84]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fd fc6f 	bl	8003838 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fd fc6b 	bl	8003838 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e180      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x23a>
 8005f7c:	e01a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f7e:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f82:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <HAL_RCC_OscConfig+0x280>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8a:	f7fd fc55 	bl	8003838 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f92:	f7fd fc51 	bl	8003838 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d903      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e166      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
 8005fa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa8:	4b92      	ldr	r3, [pc, #584]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8005faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ee      	bne.n	8005f92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80a4 	beq.w	800610a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc2:	4b8c      	ldr	r3, [pc, #560]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10d      	bne.n	8005fea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fce:	4b89      	ldr	r3, [pc, #548]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	4a88      	ldr	r2, [pc, #544]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fda:	4b86      	ldr	r3, [pc, #536]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe2:	60bb      	str	r3, [r7, #8]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fea:	4b83      	ldr	r3, [pc, #524]	@ (80061f8 <HAL_RCC_OscConfig+0x4d4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d118      	bne.n	8006028 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ff6:	4b80      	ldr	r3, [pc, #512]	@ (80061f8 <HAL_RCC_OscConfig+0x4d4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7f      	ldr	r2, [pc, #508]	@ (80061f8 <HAL_RCC_OscConfig+0x4d4>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006002:	f7fd fc19 	bl	8003838 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7fd fc15 	bl	8003838 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b64      	cmp	r3, #100	@ 0x64
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e12a      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800601c:	4b76      	ldr	r3, [pc, #472]	@ (80061f8 <HAL_RCC_OscConfig+0x4d4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d106      	bne.n	800603e <HAL_RCC_OscConfig+0x31a>
 8006030:	4b70      	ldr	r3, [pc, #448]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006034:	4a6f      	ldr	r2, [pc, #444]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6713      	str	r3, [r2, #112]	@ 0x70
 800603c:	e02d      	b.n	800609a <HAL_RCC_OscConfig+0x376>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0x33c>
 8006046:	4b6b      	ldr	r3, [pc, #428]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	4a6a      	ldr	r2, [pc, #424]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800604c:	f023 0301 	bic.w	r3, r3, #1
 8006050:	6713      	str	r3, [r2, #112]	@ 0x70
 8006052:	4b68      	ldr	r3, [pc, #416]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006056:	4a67      	ldr	r2, [pc, #412]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006058:	f023 0304 	bic.w	r3, r3, #4
 800605c:	6713      	str	r3, [r2, #112]	@ 0x70
 800605e:	e01c      	b.n	800609a <HAL_RCC_OscConfig+0x376>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b05      	cmp	r3, #5
 8006066:	d10c      	bne.n	8006082 <HAL_RCC_OscConfig+0x35e>
 8006068:	4b62      	ldr	r3, [pc, #392]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606c:	4a61      	ldr	r2, [pc, #388]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	6713      	str	r3, [r2, #112]	@ 0x70
 8006074:	4b5f      	ldr	r3, [pc, #380]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006078:	4a5e      	ldr	r2, [pc, #376]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006080:	e00b      	b.n	800609a <HAL_RCC_OscConfig+0x376>
 8006082:	4b5c      	ldr	r3, [pc, #368]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a5b      	ldr	r2, [pc, #364]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
 800608e:	4b59      	ldr	r3, [pc, #356]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	4a58      	ldr	r2, [pc, #352]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d015      	beq.n	80060ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fd fbc9 	bl	8003838 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fd fbc5 	bl	8003838 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e0d8      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	4b4c      	ldr	r3, [pc, #304]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0ee      	beq.n	80060aa <HAL_RCC_OscConfig+0x386>
 80060cc:	e014      	b.n	80060f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ce:	f7fd fbb3 	bl	8003838 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d4:	e00a      	b.n	80060ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d6:	f7fd fbaf 	bl	8003838 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e0c2      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ec:	4b41      	ldr	r3, [pc, #260]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ee      	bne.n	80060d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d105      	bne.n	800610a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fe:	4b3d      	ldr	r3, [pc, #244]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	4a3c      	ldr	r2, [pc, #240]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006108:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80ae 	beq.w	8006270 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006114:	4b37      	ldr	r3, [pc, #220]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b08      	cmp	r3, #8
 800611e:	d06d      	beq.n	80061fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d14b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006128:	4b32      	ldr	r3, [pc, #200]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a31      	ldr	r2, [pc, #196]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800612e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fd fb80 	bl	8003838 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613c:	f7fd fb7c 	bl	8003838 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e091      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	4b29      	ldr	r3, [pc, #164]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	3b01      	subs	r3, #1
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	071b      	lsls	r3, r3, #28
 8006186:	491b      	ldr	r1, [pc, #108]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006188:	4313      	orrs	r3, r2
 800618a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800618c:	4b19      	ldr	r3, [pc, #100]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 8006192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fd fb4e 	bl	8003838 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fd fb4a 	bl	8003838 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e05f      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b2:	4b10      	ldr	r3, [pc, #64]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x47c>
 80061be:	e057      	b.n	8006270 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b0c      	ldr	r3, [pc, #48]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a0b      	ldr	r2, [pc, #44]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80061c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd fb34 	bl	8003838 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fd fb30 	bl	8003838 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e045      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_RCC_OscConfig+0x4d0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x4b0>
 80061f2:	e03d      	b.n	8006270 <HAL_RCC_OscConfig+0x54c>
 80061f4:	40023800 	.word	0x40023800
 80061f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80061fc:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <HAL_RCC_OscConfig+0x558>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d030      	beq.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006214:	429a      	cmp	r2, r3
 8006216:	d129      	bne.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d122      	bne.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006234:	4293      	cmp	r3, r2
 8006236:	d119      	bne.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	3b01      	subs	r3, #1
 8006246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d10f      	bne.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006266:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0d0      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006298:	4b6a      	ldr	r3, [pc, #424]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d910      	bls.n	80062c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b67      	ldr	r3, [pc, #412]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 020f 	bic.w	r2, r3, #15
 80062ae:	4965      	ldr	r1, [pc, #404]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b63      	ldr	r3, [pc, #396]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0b8      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062e0:	4b59      	ldr	r3, [pc, #356]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4a58      	ldr	r2, [pc, #352]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80062e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062f8:	4b53      	ldr	r3, [pc, #332]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4a52      	ldr	r2, [pc, #328]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80062fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006304:	4b50      	ldr	r3, [pc, #320]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	494d      	ldr	r1, [pc, #308]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006312:	4313      	orrs	r3, r2
 8006314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d040      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d107      	bne.n	800633a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632a:	4b47      	ldr	r3, [pc, #284]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d115      	bne.n	8006362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e07f      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006342:	4b41      	ldr	r3, [pc, #260]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e073      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006352:	4b3d      	ldr	r3, [pc, #244]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e06b      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006362:	4b39      	ldr	r3, [pc, #228]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4936      	ldr	r1, [pc, #216]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006374:	f7fd fa60 	bl	8003838 <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637a:	e00a      	b.n	8006392 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637c:	f7fd fa5c 	bl	8003838 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e053      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	4b2d      	ldr	r3, [pc, #180]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 020c 	and.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d1eb      	bne.n	800637c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063a4:	4b27      	ldr	r3, [pc, #156]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d210      	bcs.n	80063d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	4b24      	ldr	r3, [pc, #144]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f023 020f 	bic.w	r2, r3, #15
 80063ba:	4922      	ldr	r1, [pc, #136]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c2:	4b20      	ldr	r3, [pc, #128]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e032      	b.n	800643a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063e0:	4b19      	ldr	r3, [pc, #100]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4916      	ldr	r1, [pc, #88]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063fe:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	490e      	ldr	r1, [pc, #56]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 800640e:	4313      	orrs	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006412:	f000 f821 	bl	8006458 <HAL_RCC_GetSysClockFreq>
 8006416:	4602      	mov	r2, r0
 8006418:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	490a      	ldr	r1, [pc, #40]	@ (800644c <HAL_RCC_ClockConfig+0x1cc>)
 8006424:	5ccb      	ldrb	r3, [r1, r3]
 8006426:	fa22 f303 	lsr.w	r3, r2, r3
 800642a:	4a09      	ldr	r2, [pc, #36]	@ (8006450 <HAL_RCC_ClockConfig+0x1d0>)
 800642c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800642e:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <HAL_RCC_ClockConfig+0x1d4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f7fd f9bc 	bl	80037b0 <HAL_InitTick>

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023c00 	.word	0x40023c00
 8006448:	40023800 	.word	0x40023800
 800644c:	0800d9ac 	.word	0x0800d9ac
 8006450:	20000008 	.word	0x20000008
 8006454:	2000003c 	.word	0x2000003c

08006458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800645c:	b090      	sub	sp, #64	@ 0x40
 800645e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006468:	2300      	movs	r3, #0
 800646a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006470:	4b59      	ldr	r3, [pc, #356]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	2b08      	cmp	r3, #8
 800647a:	d00d      	beq.n	8006498 <HAL_RCC_GetSysClockFreq+0x40>
 800647c:	2b08      	cmp	r3, #8
 800647e:	f200 80a1 	bhi.w	80065c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x34>
 8006486:	2b04      	cmp	r3, #4
 8006488:	d003      	beq.n	8006492 <HAL_RCC_GetSysClockFreq+0x3a>
 800648a:	e09b      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800648c:	4b53      	ldr	r3, [pc, #332]	@ (80065dc <HAL_RCC_GetSysClockFreq+0x184>)
 800648e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006490:	e09b      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006492:	4b53      	ldr	r3, [pc, #332]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006494:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006496:	e098      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006498:	4b4f      	ldr	r3, [pc, #316]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064a2:	4b4d      	ldr	r3, [pc, #308]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d028      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ae:	4b4a      	ldr	r3, [pc, #296]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	099b      	lsrs	r3, r3, #6
 80064b4:	2200      	movs	r2, #0
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80064c0:	2100      	movs	r1, #0
 80064c2:	4b47      	ldr	r3, [pc, #284]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80064c4:	fb03 f201 	mul.w	r2, r3, r1
 80064c8:	2300      	movs	r3, #0
 80064ca:	fb00 f303 	mul.w	r3, r0, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	4a43      	ldr	r2, [pc, #268]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80064d2:	fba0 1202 	umull	r1, r2, r0, r2
 80064d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d8:	460a      	mov	r2, r1
 80064da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064de:	4413      	add	r3, r2
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e4:	2200      	movs	r2, #0
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	61fa      	str	r2, [r7, #28]
 80064ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064f2:	f7f9 fea5 	bl	8000240 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4613      	mov	r3, r2
 80064fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064fe:	e053      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006500:	4b35      	ldr	r3, [pc, #212]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	099b      	lsrs	r3, r3, #6
 8006506:	2200      	movs	r2, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	617a      	str	r2, [r7, #20]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006512:	f04f 0b00 	mov.w	fp, #0
 8006516:	4652      	mov	r2, sl
 8006518:	465b      	mov	r3, fp
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	0159      	lsls	r1, r3, #5
 8006524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006528:	0150      	lsls	r0, r2, #5
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	ebb2 080a 	subs.w	r8, r2, sl
 8006532:	eb63 090b 	sbc.w	r9, r3, fp
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006542:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006546:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800654a:	ebb2 0408 	subs.w	r4, r2, r8
 800654e:	eb63 0509 	sbc.w	r5, r3, r9
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	00eb      	lsls	r3, r5, #3
 800655c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006560:	00e2      	lsls	r2, r4, #3
 8006562:	4614      	mov	r4, r2
 8006564:	461d      	mov	r5, r3
 8006566:	eb14 030a 	adds.w	r3, r4, sl
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	eb45 030b 	adc.w	r3, r5, fp
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800657e:	4629      	mov	r1, r5
 8006580:	028b      	lsls	r3, r1, #10
 8006582:	4621      	mov	r1, r4
 8006584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006588:	4621      	mov	r1, r4
 800658a:	028a      	lsls	r2, r1, #10
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006592:	2200      	movs	r2, #0
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	60fa      	str	r2, [r7, #12]
 8006598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800659c:	f7f9 fe50 	bl	8000240 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80065a8:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	3301      	adds	r3, #1
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80065b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065c2:	e002      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <HAL_RCC_GetSysClockFreq+0x184>)
 80065c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3740      	adds	r7, #64	@ 0x40
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	017d7840 	.word	0x017d7840

080065e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e8:	4b03      	ldr	r3, [pc, #12]	@ (80065f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000008 	.word	0x20000008

080065fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006600:	f7ff fff0 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0a9b      	lsrs	r3, r3, #10
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4903      	ldr	r1, [pc, #12]	@ (8006620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	0800d9bc 	.word	0x0800d9bc

08006624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006628:	f7ff ffdc 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0b5b      	lsrs	r3, r3, #13
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	@ (8006648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800d9bc 	.word	0x0800d9bc

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d012      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006674:	4b69      	ldr	r3, [pc, #420]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4a68      	ldr	r2, [pc, #416]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800667e:	6093      	str	r3, [r2, #8]
 8006680:	4b66      	ldr	r3, [pc, #408]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006688:	4964      	ldr	r1, [pc, #400]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668a:	4313      	orrs	r3, r2
 800668c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006696:	2301      	movs	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a6:	4b5d      	ldr	r3, [pc, #372]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b4:	4959      	ldr	r1, [pc, #356]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c4:	d101      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066e2:	4b4e      	ldr	r3, [pc, #312]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f0:	494a      	ldr	r1, [pc, #296]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006700:	d101      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006702:	2301      	movs	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800670e:	2301      	movs	r3, #1
 8006710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800671e:	2301      	movs	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 808b 	beq.w	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006730:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	4a39      	ldr	r2, [pc, #228]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800673a:	6413      	str	r3, [r2, #64]	@ 0x40
 800673c:	4b37      	ldr	r3, [pc, #220]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006748:	4b35      	ldr	r3, [pc, #212]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a34      	ldr	r2, [pc, #208]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006754:	f7fd f870 	bl	8003838 <HAL_GetTick>
 8006758:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800675a:	e008      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fd f86c 	bl	8003838 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	@ 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e38f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800676e:	4b2c      	ldr	r3, [pc, #176]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800677a:	4b28      	ldr	r3, [pc, #160]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006782:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d035      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d02e      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006798:	4b20      	ldr	r3, [pc, #128]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a6:	4a1d      	ldr	r2, [pc, #116]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067ae:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b2:	4a1a      	ldr	r2, [pc, #104]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80067ba:	4a18      	ldr	r2, [pc, #96]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067c0:	4b16      	ldr	r3, [pc, #88]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d114      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fd f834 	bl	8003838 <HAL_GetTick>
 80067d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d2:	e00a      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067d4:	f7fd f830 	bl	8003838 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e351      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ea:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0ee      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006802:	d111      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006804:	4b05      	ldr	r3, [pc, #20]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006810:	4b04      	ldr	r3, [pc, #16]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006812:	400b      	ands	r3, r1
 8006814:	4901      	ldr	r1, [pc, #4]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
 800681a:	e00b      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800681c:	40023800 	.word	0x40023800
 8006820:	40007000 	.word	0x40007000
 8006824:	0ffffcff 	.word	0x0ffffcff
 8006828:	4bac      	ldr	r3, [pc, #688]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4aab      	ldr	r2, [pc, #684]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800682e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006832:	6093      	str	r3, [r2, #8]
 8006834:	4ba9      	ldr	r3, [pc, #676]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006836:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006840:	49a6      	ldr	r1, [pc, #664]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006842:	4313      	orrs	r3, r2
 8006844:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b00      	cmp	r3, #0
 8006850:	d010      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006852:	4ba2      	ldr	r3, [pc, #648]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006858:	4aa0      	ldr	r2, [pc, #640]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800685e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006862:	4b9e      	ldr	r3, [pc, #632]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006864:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686c:	499b      	ldr	r1, [pc, #620]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006880:	4b96      	ldr	r3, [pc, #600]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006886:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800688e:	4993      	ldr	r1, [pc, #588]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068a2:	4b8e      	ldr	r3, [pc, #568]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068b0:	498a      	ldr	r1, [pc, #552]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068c4:	4b85      	ldr	r3, [pc, #532]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d2:	4982      	ldr	r1, [pc, #520]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e6:	4b7d      	ldr	r3, [pc, #500]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4979      	ldr	r1, [pc, #484]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006908:	4b74      	ldr	r3, [pc, #464]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	f023 0203 	bic.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006916:	4971      	ldr	r1, [pc, #452]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800692a:	4b6c      	ldr	r3, [pc, #432]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006930:	f023 020c 	bic.w	r2, r3, #12
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006938:	4968      	ldr	r1, [pc, #416]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800694c:	4b63      	ldr	r3, [pc, #396]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695a:	4960      	ldr	r1, [pc, #384]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800696e:	4b5b      	ldr	r3, [pc, #364]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006974:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697c:	4957      	ldr	r1, [pc, #348]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006990:	4b52      	ldr	r3, [pc, #328]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006996:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	494f      	ldr	r1, [pc, #316]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80069b2:	4b4a      	ldr	r3, [pc, #296]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c0:	4946      	ldr	r1, [pc, #280]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069d4:	4b41      	ldr	r3, [pc, #260]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e2:	493e      	ldr	r1, [pc, #248]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069f6:	4b39      	ldr	r3, [pc, #228]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a04:	4935      	ldr	r1, [pc, #212]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a18:	4b30      	ldr	r3, [pc, #192]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a26:	492d      	ldr	r1, [pc, #180]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a3a:	4b28      	ldr	r3, [pc, #160]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a40:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a48:	4924      	ldr	r1, [pc, #144]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a58:	d101      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a7a:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a88:	4914      	ldr	r1, [pc, #80]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aac:	490b      	ldr	r1, [pc, #44]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00f      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006ac0:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad0:	4902      	ldr	r1, [pc, #8]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ad8:	e002      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aec:	4b8a      	ldr	r3, [pc, #552]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006af2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afc:	4986      	ldr	r1, [pc, #536]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b10:	4b81      	ldr	r3, [pc, #516]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b20:	497d      	ldr	r1, [pc, #500]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d006      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80d6 	beq.w	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b3c:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a75      	ldr	r2, [pc, #468]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b48:	f7fc fe76 	bl	8003838 <HAL_GetTick>
 8006b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b50:	f7fc fe72 	bl	8003838 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	@ 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e195      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b62:	4b6d      	ldr	r3, [pc, #436]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d021      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b82:	4b65      	ldr	r3, [pc, #404]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b90:	4b61      	ldr	r3, [pc, #388]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b96:	0e1b      	lsrs	r3, r3, #24
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	019a      	lsls	r2, r3, #6
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	061b      	lsls	r3, r3, #24
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	071b      	lsls	r3, r3, #28
 8006bb6:	4958      	ldr	r1, [pc, #352]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02e      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be8:	d129      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006bea:	4b4b      	ldr	r3, [pc, #300]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bf8:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfe:	0f1b      	lsrs	r3, r3, #28
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	019a      	lsls	r2, r3, #6
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	071b      	lsls	r3, r3, #28
 8006c1e:	493e      	ldr	r1, [pc, #248]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c26:	4b3c      	ldr	r3, [pc, #240]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2c:	f023 021f 	bic.w	r2, r3, #31
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	3b01      	subs	r3, #1
 8006c36:	4938      	ldr	r1, [pc, #224]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01d      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c4a:	4b33      	ldr	r3, [pc, #204]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c58:	4b2f      	ldr	r3, [pc, #188]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c5e:	0f1b      	lsrs	r3, r3, #28
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	019a      	lsls	r2, r3, #6
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	431a      	orrs	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	061b      	lsls	r3, r3, #24
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	071b      	lsls	r3, r3, #28
 8006c7e:	4926      	ldr	r1, [pc, #152]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	019a      	lsls	r2, r3, #6
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	061b      	lsls	r3, r3, #24
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	491a      	ldr	r1, [pc, #104]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cb6:	4b18      	ldr	r3, [pc, #96]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a17      	ldr	r2, [pc, #92]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc2:	f7fc fdb9 	bl	8003838 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cca:	f7fc fdb5 	bl	8003838 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b64      	cmp	r3, #100	@ 0x64
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e0d8      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	f040 80ce 	bne.w	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cf0:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a08      	ldr	r2, [pc, #32]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfc:	f7fc fd9c 	bl	8003838 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d02:	e00b      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d04:	f7fc fd98 	bl	8003838 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	@ 0x64
 8006d10:	d904      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e0bb      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006d16:	bf00      	nop
 8006d18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d28:	d0ec      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d02e      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d12a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d52:	4b51      	ldr	r3, [pc, #324]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d60:	4b4d      	ldr	r3, [pc, #308]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d66:	0f1b      	lsrs	r3, r3, #28
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	019a      	lsls	r2, r3, #6
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	061b      	lsls	r3, r3, #24
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	071b      	lsls	r3, r3, #28
 8006d86:	4944      	ldr	r1, [pc, #272]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d8e:	4b42      	ldr	r3, [pc, #264]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d94:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	493d      	ldr	r1, [pc, #244]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d022      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dbc:	d11d      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dbe:	4b36      	ldr	r3, [pc, #216]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc4:	0e1b      	lsrs	r3, r3, #24
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dcc:	4b32      	ldr	r3, [pc, #200]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd2:	0f1b      	lsrs	r3, r3, #28
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	019a      	lsls	r2, r3, #6
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	431a      	orrs	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	071b      	lsls	r3, r3, #28
 8006df2:	4929      	ldr	r1, [pc, #164]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d028      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e06:	4b24      	ldr	r3, [pc, #144]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0c:	0e1b      	lsrs	r3, r3, #24
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e14:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	019a      	lsls	r2, r3, #6
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	4917      	ldr	r1, [pc, #92]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	4911      	ldr	r1, [pc, #68]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e58:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e64:	f7fc fce8 	bl	8003838 <HAL_GetTick>
 8006e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e6c:	f7fc fce4 	bl	8003838 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b64      	cmp	r3, #100	@ 0x64
 8006e78:	d901      	bls.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e007      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e7e:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e8a:	d1ef      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800

08006e9c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a8c      	ldr	r2, [pc, #560]	@ (80070dc <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 8006eac:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006eae:	4b8c      	ldr	r3, [pc, #560]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ebe:	4b88      	ldr	r3, [pc, #544]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	f003 0203 	and.w	r2, r3, #3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ece:	4b84      	ldr	r3, [pc, #528]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 020f 	and.w	r2, r3, #15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ede:	4b80      	ldr	r3, [pc, #512]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee4:	0f1b      	lsrs	r3, r3, #28
 8006ee6:	f003 0207 	and.w	r2, r3, #7
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006eee:	4b7c      	ldr	r3, [pc, #496]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	099b      	lsrs	r3, r3, #6
 8006ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006efe:	4b78      	ldr	r3, [pc, #480]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0203 	and.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f0e:	4b74      	ldr	r3, [pc, #464]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	0e1b      	lsrs	r3, r3, #24
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f1e:	4b70      	ldr	r3, [pc, #448]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	0f1b      	lsrs	r3, r3, #28
 8006f26:	f003 0207 	and.w	r2, r3, #7
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f34:	f003 021f 	and.w	r2, r3, #31
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006f3c:	4b68      	ldr	r3, [pc, #416]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f42:	0a1b      	lsrs	r3, r3, #8
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006f4c:	4b64      	ldr	r3, [pc, #400]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	f003 0203 	and.w	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006f5c:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f62:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8006f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f70:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006f78:	4b59      	ldr	r3, [pc, #356]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8006f84:	4b56      	ldr	r3, [pc, #344]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006f92:	4b53      	ldr	r3, [pc, #332]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f98:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa6:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8006fae:	4b4c      	ldr	r3, [pc, #304]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006fbc:	4b48      	ldr	r3, [pc, #288]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc2:	f003 0203 	and.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8006fca:	4b45      	ldr	r3, [pc, #276]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd0:	f003 020c 	and.w	r2, r3, #12
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006fd8:	4b41      	ldr	r3, [pc, #260]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fde:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fec:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffa:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007002:	4b37      	ldr	r3, [pc, #220]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007008:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007010:	4b33      	ldr	r3, [pc, #204]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007016:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800701e:	4b30      	ldr	r3, [pc, #192]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007024:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800702c:	4b2c      	ldr	r3, [pc, #176]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007032:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800703a:	4b29      	ldr	r3, [pc, #164]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007040:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007048:	4b25      	ldr	r3, [pc, #148]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007056:	4b22      	ldr	r3, [pc, #136]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007066:	4b1e      	ldr	r3, [pc, #120]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007076:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800707c:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007086:	4b16      	ldr	r3, [pc, #88]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800708c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007096:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800709e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80070b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	1cfffff1 	.word	0x1cfffff1
 80070e0:	40023800 	.word	0x40023800

080070e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007102:	f040 80a4 	bne.w	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007106:	4ba6      	ldr	r3, [pc, #664]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800710c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007114:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800711c:	f000 808a 	beq.w	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007126:	f200 8091 	bhi.w	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007130:	d07d      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007138:	f200 8088 	bhi.w	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007148:	d039      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800714a:	e07f      	b.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800714c:	4b94      	ldr	r3, [pc, #592]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d108      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007158:	4b91      	ldr	r3, [pc, #580]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007160:	4a90      	ldr	r2, [pc, #576]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	e007      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800716a:	4b8d      	ldr	r3, [pc, #564]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007172:	4a8d      	ldr	r2, [pc, #564]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007174:	fbb2 f3f3 	udiv	r3, r2, r3
 8007178:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800717a:	4b89      	ldr	r3, [pc, #548]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007188:	4b85      	ldr	r3, [pc, #532]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	fb03 f202 	mul.w	r2, r3, r2
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80071a2:	4b7f      	ldr	r3, [pc, #508]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	617b      	str	r3, [r7, #20]
        break;
 80071bc:	e047      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80071be:	4b78      	ldr	r3, [pc, #480]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d108      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071ca:	4b75      	ldr	r3, [pc, #468]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d2:	4a74      	ldr	r2, [pc, #464]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	e007      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80071dc:	4b70      	ldr	r3, [pc, #448]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071e4:	4a70      	ldr	r2, [pc, #448]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	0e1b      	lsrs	r3, r3, #24
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80071fa:	4b69      	ldr	r3, [pc, #420]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007200:	099b      	lsrs	r3, r3, #6
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	fb03 f202 	mul.w	r2, r3, r2
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007214:	4b62      	ldr	r3, [pc, #392]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	617b      	str	r3, [r7, #20]
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800722e:	4b5f      	ldr	r3, [pc, #380]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007230:	617b      	str	r3, [r7, #20]
        break;
 8007232:	e00c      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007234:	4b5a      	ldr	r3, [pc, #360]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8007240:	4b58      	ldr	r3, [pc, #352]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007242:	617b      	str	r3, [r7, #20]
        break;
 8007244:	e003      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8007246:	4b58      	ldr	r3, [pc, #352]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007248:	617b      	str	r3, [r7, #20]
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800724c:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007254:	f040 80ad 	bne.w	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007258:	4b51      	ldr	r3, [pc, #324]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800725e:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007266:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800726e:	f000 808a 	beq.w	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007278:	f200 809a 	bhi.w	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007282:	d07d      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800728a:	f200 8091 	bhi.w	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800729a:	d039      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800729c:	e088      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800729e:	4b40      	ldr	r3, [pc, #256]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d108      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072aa:	4b3d      	ldr	r3, [pc, #244]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072b2:	4a3c      	ldr	r2, [pc, #240]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e007      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80072bc:	4b38      	ldr	r3, [pc, #224]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072c4:	4a38      	ldr	r2, [pc, #224]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80072cc:	4b34      	ldr	r3, [pc, #208]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80072da:	4b31      	ldr	r3, [pc, #196]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e0:	099b      	lsrs	r3, r3, #6
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	fb03 f202 	mul.w	r2, r3, r2
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80072f4:	4b2a      	ldr	r3, [pc, #168]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072fa:	0a1b      	lsrs	r3, r3, #8
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]
        break;
 800730e:	e050      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007310:	4b23      	ldr	r3, [pc, #140]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d108      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800731c:	4b20      	ldr	r3, [pc, #128]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007324:	4a1f      	ldr	r2, [pc, #124]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	e007      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800732e:	4b1c      	ldr	r3, [pc, #112]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007336:	4a1c      	ldr	r2, [pc, #112]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800733e:	4b18      	ldr	r3, [pc, #96]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800734c:	4b14      	ldr	r3, [pc, #80]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800734e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007352:	099b      	lsrs	r3, r3, #6
 8007354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	fb03 f202 	mul.w	r2, r3, r2
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007366:	4b0e      	ldr	r3, [pc, #56]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	617b      	str	r3, [r7, #20]
        break;
 800737e:	e018      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007380:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007382:	617b      	str	r3, [r7, #20]
        break;
 8007384:	e015      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007386:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 8007392:	4b04      	ldr	r3, [pc, #16]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007394:	617b      	str	r3, [r7, #20]
        break;
 8007396:	e00c      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8007398:	4b03      	ldr	r3, [pc, #12]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800739a:	617b      	str	r3, [r7, #20]
        break;
 800739c:	e009      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	017d7840 	.word	0x017d7840
 80073ac:	00bb8000 	.word	0x00bb8000
        break;
 80073b0:	bf00      	nop
      }
    }
  }

  return frequency;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e156      	b.n	800768c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fa faa0 	bl	8001938 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb31 	bl	8007a68 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d00c      	beq.n	8007428 <HAL_SAI_Init+0x68>
 800740e:	2b02      	cmp	r3, #2
 8007410:	d80d      	bhi.n	800742e <HAL_SAI_Init+0x6e>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_SAI_Init+0x5c>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d003      	beq.n	8007422 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800741a:	e008      	b.n	800742e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
      break;
 8007420:	e006      	b.n	8007430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007422:	2310      	movs	r3, #16
 8007424:	61fb      	str	r3, [r7, #28]
      break;
 8007426:	e003      	b.n	8007430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007428:	2320      	movs	r3, #32
 800742a:	61fb      	str	r3, [r7, #28]
      break;
 800742c:	e000      	b.n	8007430 <HAL_SAI_Init+0x70>
      break;
 800742e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d81e      	bhi.n	8007476 <HAL_SAI_Init+0xb6>
 8007438:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <HAL_SAI_Init+0x80>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007451 	.word	0x08007451
 8007444:	08007457 	.word	0x08007457
 8007448:	0800745f 	.word	0x0800745f
 800744c:	08007467 	.word	0x08007467
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
    }
    break;
 8007454:	e010      	b.n	8007478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800745a:	617b      	str	r3, [r7, #20]
    }
    break;
 800745c:	e00c      	b.n	8007478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800745e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007462:	617b      	str	r3, [r7, #20]
    }
    break;
 8007464:	e008      	b.n	8007478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007466:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800746a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007474:	e000      	b.n	8007478 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007476:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a85      	ldr	r2, [pc, #532]	@ (8007694 <HAL_SAI_Init+0x2d4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_SAI_Init+0xcc>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a84      	ldr	r2, [pc, #528]	@ (8007698 <HAL_SAI_Init+0x2d8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d103      	bne.n	8007494 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800748c:	4a83      	ldr	r2, [pc, #524]	@ (800769c <HAL_SAI_Init+0x2dc>)
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e002      	b.n	800749a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007494:	4a82      	ldr	r2, [pc, #520]	@ (80076a0 <HAL_SAI_Init+0x2e0>)
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d04c      	beq.n	800753c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a7a      	ldr	r2, [pc, #488]	@ (8007694 <HAL_SAI_Init+0x2d4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_SAI_Init+0xfa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a78      	ldr	r2, [pc, #480]	@ (8007698 <HAL_SAI_Init+0x2d8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d104      	bne.n	80074c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80074ba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80074be:	f7ff fe11 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80074c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a76      	ldr	r2, [pc, #472]	@ (80076a4 <HAL_SAI_Init+0x2e4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <HAL_SAI_Init+0x118>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	@ (80076a8 <HAL_SAI_Init+0x2e8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d104      	bne.n	80074e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80074d8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80074dc:	f7ff fe02 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80074e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	025b      	lsls	r3, r3, #9
 80074f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a6b      	ldr	r2, [pc, #428]	@ (80076ac <HAL_SAI_Init+0x2ec>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	08da      	lsrs	r2, r3, #3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007508:	68f9      	ldr	r1, [r7, #12]
 800750a:	4b68      	ldr	r3, [pc, #416]	@ (80076ac <HAL_SAI_Init+0x2ec>)
 800750c:	fba3 2301 	umull	r2, r3, r3, r1
 8007510:	08da      	lsrs	r2, r3, #3
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	1aca      	subs	r2, r1, r3
 800751c:	2a08      	cmp	r2, #8
 800751e:	d904      	bls.n	800752a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752e:	2b04      	cmp	r3, #4
 8007530:	d104      	bne.n	800753c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	085a      	lsrs	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_SAI_Init+0x18c>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d109      	bne.n	8007560 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_SAI_Init+0x198>
 8007554:	2300      	movs	r3, #0
 8007556:	e001      	b.n	800755c <HAL_SAI_Init+0x19c>
 8007558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e008      	b.n	8007572 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d102      	bne.n	800756e <HAL_SAI_Init+0x1ae>
 8007568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800756c:	e000      	b.n	8007570 <HAL_SAI_Init+0x1b0>
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b4c      	ldr	r3, [pc, #304]	@ (80076b0 <HAL_SAI_Init+0x2f0>)
 800757e:	400b      	ands	r3, r1
 8007580:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007596:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759c:	431a      	orrs	r2, r3
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80075aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80075b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	051b      	lsls	r3, r3, #20
 80075be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4b38      	ldr	r3, [pc, #224]	@ (80076b4 <HAL_SAI_Init+0x2f4>)
 80075d4:	400b      	ands	r3, r1
 80075d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b2d      	ldr	r3, [pc, #180]	@ (80076b8 <HAL_SAI_Init+0x2f8>)
 8007602:	400b      	ands	r3, r1
 8007604:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007616:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800761c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007622:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	3b01      	subs	r3, #1
 800762a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800762c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68d9      	ldr	r1, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007644:	400b      	ands	r3, r1
 8007646:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68d9      	ldr	r1, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007656:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007664:	3b01      	subs	r3, #1
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40015804 	.word	0x40015804
 8007698:	40015824 	.word	0x40015824
 800769c:	40015800 	.word	0x40015800
 80076a0:	40015c00 	.word	0x40015c00
 80076a4:	40015c04 	.word	0x40015c04
 80076a8:	40015c24 	.word	0x40015c24
 80076ac:	cccccccd 	.word	0xcccccccd
 80076b0:	ff05c010 	.word	0xff05c010
 80076b4:	ffff1ff0 	.word	0xffff1ff0
 80076b8:	fff88000 	.word	0xfff88000

080076bc <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e027      	b.n	800771e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9bd 	bl	8007a68 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0208 	orr.w	r2, r2, #8
 80076fc:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fa fa12 	bl	8001b28 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007736:	f7fc f87f 	bl	8003838 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SAI_Transmit_DMA+0x20>
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e093      	b.n	8007874 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 808c 	bne.w	8007872 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_SAI_Transmit_DMA+0x40>
 8007764:	2302      	movs	r3, #2
 8007766:	e085      	b.n	8007874 <HAL_SAI_Transmit_DMA+0x14c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2212      	movs	r2, #18
 8007792:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779a:	4a38      	ldr	r2, [pc, #224]	@ (800787c <HAL_SAI_Transmit_DMA+0x154>)
 800779c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a2:	4a37      	ldr	r2, [pc, #220]	@ (8007880 <HAL_SAI_Transmit_DMA+0x158>)
 80077a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077aa:	4a36      	ldr	r2, [pc, #216]	@ (8007884 <HAL_SAI_Transmit_DMA+0x15c>)
 80077ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077b2:	2200      	movs	r2, #0
 80077b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077be:	4619      	mov	r1, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	331c      	adds	r3, #28
 80077c6:	461a      	mov	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077ce:	f7fc fe7f 	bl	80044d0 <HAL_DMA_Start_IT>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e047      	b.n	8007874 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80077e4:	2100      	movs	r1, #0
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 f908 	bl	80079fc <SAI_InterruptFlag>
 80077ec:	4601      	mov	r1, r0
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800780a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800780c:	e015      	b.n	800783a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800780e:	f7fc f813 	bl	8003838 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800781c:	d90d      	bls.n	800783a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007824:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e01c      	b.n	8007874 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0e2      	beq.n	800780e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007864:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08007b39 	.word	0x08007b39
 8007880:	08007ad9 	.word	0x08007ad9
 8007884:	08007bd1 	.word	0x08007bd1

08007888 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SAI_Receive_DMA+0x1a>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e074      	b.n	8007990 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d16d      	bne.n	800798e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_SAI_Receive_DMA+0x38>
 80078bc:	2302      	movs	r3, #2
 80078be:	e067      	b.n	8007990 <HAL_SAI_Receive_DMA+0x108>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2222      	movs	r2, #34	@ 0x22
 80078ea:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	4a29      	ldr	r2, [pc, #164]	@ (8007998 <HAL_SAI_Receive_DMA+0x110>)
 80078f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fa:	4a28      	ldr	r2, [pc, #160]	@ (800799c <HAL_SAI_Receive_DMA+0x114>)
 80078fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007902:	4a27      	ldr	r2, [pc, #156]	@ (80079a0 <HAL_SAI_Receive_DMA+0x118>)
 8007904:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	2200      	movs	r2, #0
 800790c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	331c      	adds	r3, #28
 8007918:	4619      	mov	r1, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007926:	f7fc fdd3 	bl	80044d0 <HAL_DMA_Start_IT>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e029      	b.n	8007990 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f85c 	bl	80079fc <SAI_InterruptFlag>
 8007944:	4601      	mov	r1, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007962:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007980:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e000      	b.n	8007990 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800798e:	2302      	movs	r3, #2
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	08007bb5 	.word	0x08007bb5
 800799c:	08007b55 	.word	0x08007b55
 80079a0:	08007bd1 	.word	0x08007bd1

080079a4 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80079ee:	b2db      	uxtb	r3, r3
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d103      	bne.n	8007a18 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f043 0308 	orr.w	r3, r3, #8
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d10b      	bne.n	8007a38 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d003      	beq.n	8007a30 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d103      	bne.n	8007a38 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f043 0310 	orr.w	r3, r3, #16
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d003      	beq.n	8007a48 <SAI_InterruptFlag+0x4c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d104      	bne.n	8007a52 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e003      	b.n	8007a5a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f043 0304 	orr.w	r3, r3, #4
 8007a58:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007a70:	4b17      	ldr	r3, [pc, #92]	@ (8007ad0 <SAI_Disable+0x68>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <SAI_Disable+0x6c>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	0b1b      	lsrs	r3, r3, #12
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007a92:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	1e5a      	subs	r2, r3, #1
 8007a98:	60fa      	str	r2, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab2:	e006      	b.n	8007ac2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e8      	bne.n	8007a94 <SAI_Disable+0x2c>

  return status;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20000008 	.word	0x20000008
 8007ad4:	95cbec1b 	.word	0x95cbec1b

08007ad8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aee:	d01c      	beq.n	8007b2a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b06:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b08:	2100      	movs	r1, #0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff ff76 	bl	80079fc <SAI_InterruptFlag>
 8007b10:	4603      	mov	r3, r0
 8007b12:	43d9      	mvns	r1, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	400a      	ands	r2, r1
 8007b20:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff ff3a 	bl	80079a4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff ff36 	bl	80079b8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6a:	d01c      	beq.n	8007ba6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b7a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff ff38 	bl	80079fc <SAI_InterruptFlag>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	43d9      	mvns	r1, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7f9 fbda 	bl	8001360 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7f9 fbd6 	bl	8001374 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d004      	beq.n	8007c02 <SAI_DMAError+0x32>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d112      	bne.n	8007c28 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c10:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ff28 	bl	8007a68 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fecf 	bl	80079cc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e022      	b.n	8007c8e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7f9 fd00 	bl	8001660 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2203      	movs	r2, #3
 8007c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f815 	bl	8007c98 <HAL_SD_InitCard>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e00a      	b.n	8007c8e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b08e      	sub	sp, #56	@ 0x38
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007cb4:	2376      	movs	r3, #118	@ 0x76
 8007cb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681d      	ldr	r5, [r3, #0]
 8007cbc:	466c      	mov	r4, sp
 8007cbe:	f107 0314 	add.w	r3, r7, #20
 8007cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f001 fda7 	bl	8009824 <SDMMC_Init>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e059      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fddb 	bl	80098b8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d10:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d12:	2002      	movs	r0, #2
 8007d14:	f7fb fd9c 	bl	8003850 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 ff59 	bl	8008bd0 <SD_PowerON>
 8007d1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e02e      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fe78 	bl	8008a34 <SD_InitCard>
 8007d44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e01b      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fe35 	bl	80099dc <SDMMC_CmdBlockLength>
 8007d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a09      	ldr	r2, [pc, #36]	@ (8007da4 <HAL_SD_InitCard+0x10c>)
 8007d80:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3728      	adds	r7, #40	@ 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bdb0      	pop	{r4, r5, r7, pc}
 8007da4:	004005ff 	.word	0x004005ff

08007da8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08c      	sub	sp, #48	@ 0x30
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d107      	bne.n	8007dd0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0c3      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	f040 80bc 	bne.w	8007f56 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	441a      	add	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d907      	bls.n	8007e02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e0aa      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e26:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f64 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007e30:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	2200      	movs	r2, #0
 8007e38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	2200      	movs	r2, #0
 8007e40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3380      	adds	r3, #128	@ 0x80
 8007e68:	4619      	mov	r1, r3
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	025b      	lsls	r3, r3, #9
 8007e70:	089b      	lsrs	r3, r3, #2
 8007e72:	f7fc fb2d 	bl	80044d0 <HAL_DMA_Start_IT>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d017      	beq.n	8007eac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a35      	ldr	r2, [pc, #212]	@ (8007f68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e055      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d002      	beq.n	8007eca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	025b      	lsls	r3, r3, #9
 8007ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	025b      	lsls	r3, r3, #9
 8007ed4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ed6:	2390      	movs	r3, #144	@ 0x90
 8007ed8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007eda:	2302      	movs	r3, #2
 8007edc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f107 0210 	add.w	r2, r7, #16
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 fd47 	bl	8009984 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d90a      	bls.n	8007f12 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2282      	movs	r2, #130	@ 0x82
 8007f00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fdab 	bl	8009a64 <SDMMC_CmdReadMultiBlock>
 8007f0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007f10:	e009      	b.n	8007f26 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2281      	movs	r2, #129	@ 0x81
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fd7e 	bl	8009a20 <SDMMC_CmdReadSingleBlock>
 8007f24:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d012      	beq.n	8007f52 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0d      	ldr	r2, [pc, #52]	@ (8007f68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e002      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3730      	adds	r7, #48	@ 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	08008843 	.word	0x08008843
 8007f64:	080088b5 	.word	0x080088b5
 8007f68:	004005ff 	.word	0x004005ff

08007f6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	@ 0x30
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d107      	bne.n	8007f94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e0c6      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	f040 80bf 	bne.w	8008120 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	441a      	add	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d907      	bls.n	8007fc6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0ad      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 021a 	orr.w	r2, r2, #26
 8007fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	4a50      	ldr	r2, [pc, #320]	@ (800812c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8008130 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007ff4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008008:	025b      	lsls	r3, r3, #9
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d90a      	bls.n	8008028 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22a0      	movs	r2, #160	@ 0xa0
 8008016:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fd64 	bl	8009aec <SDMMC_CmdWriteMultiBlock>
 8008024:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008026:	e009      	b.n	800803c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2290      	movs	r2, #144	@ 0x90
 800802c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fd37 	bl	8009aa8 <SDMMC_CmdWriteSingleBlock>
 800803a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d012      	beq.n	8008068 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3b      	ldr	r2, [pc, #236]	@ (8008134 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008048:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e05c      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0208 	orr.w	r2, r2, #8
 8008076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	2240      	movs	r2, #64	@ 0x40
 800807e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3380      	adds	r3, #128	@ 0x80
 80080a8:	461a      	mov	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	025b      	lsls	r3, r3, #9
 80080ae:	089b      	lsrs	r3, r3, #2
 80080b0:	f7fc fa0e 	bl	80044d0 <HAL_DMA_Start_IT>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01a      	beq.n	80080f0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 021a 	bic.w	r2, r2, #26
 80080c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e018      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	025b      	lsls	r3, r3, #9
 80080fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080fc:	2390      	movs	r3, #144	@ 0x90
 80080fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008104:	2300      	movs	r3, #0
 8008106:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008108:	2301      	movs	r3, #1
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f107 0210 	add.w	r2, r7, #16
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fc34 	bl	8009984 <SDMMC_ConfigData>

      return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3730      	adds	r7, #48	@ 0x30
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	08008819 	.word	0x08008819
 8008130:	080088b5 	.word	0x080088b5
 8008134:	004005ff 	.word	0x004005ff

08008138 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008144:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fdec 	bl	8008d3c <SD_Read_IT>
 8008164:	e15a      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 808d 	beq.w	8008290 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800817e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b9a      	ldr	r3, [pc, #616]	@ (80083f4 <HAL_SD_IRQHandler+0x2bc>)
 800818c:	400b      	ands	r3, r1
 800818e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d039      	beq.n	800821e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <HAL_SD_IRQHandler+0x86>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fcb4 	bl	8009b30 <SDMMC_CmdStopTransfer>
 80081c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f921 	bl	8008424 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80081ea:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_SD_IRQHandler+0xd6>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f002 f8ca 	bl	800a3a8 <HAL_SD_RxCpltCallback>
 8008214:	e102      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f002 f8bc 	bl	800a394 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800821c:	e0fe      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80f9 	beq.w	800841c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d011      	beq.n	8008258 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fc79 	bl	8009b30 <SDMMC_CmdStopTransfer>
 800823e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8e6 	bl	8008424 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	f040 80dc 	bne.w	800841c <HAL_SD_IRQHandler+0x2e4>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 80d6 	bne.w	800841c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0208 	bic.w	r2, r2, #8
 800827e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f002 f883 	bl	800a394 <HAL_SD_TxCpltCallback>
}
 800828e:	e0c5      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <HAL_SD_IRQHandler+0x178>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fd98 	bl	8008dde <SD_Write_IT>
 80082ae:	e0b5      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 80ae 	beq.w	800841c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	f043 0202 	orr.w	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	f043 0208 	orr.w	r2, r3, #8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	f043 0220 	orr.w	r2, r3, #32
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	f043 0210 	orr.w	r2, r3, #16
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008330:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008340:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fbf2 	bl	8009b30 <SDMMC_CmdStopTransfer>
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f857 	bl	8008424 <HAL_SD_ErrorCallback>
}
 8008376:	e051      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d04c      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <HAL_SD_IRQHandler+0x25e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <HAL_SD_IRQHandler+0x2c0>)
 800839c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fc f8f4 	bl	8004590 <HAL_DMA_Abort_IT>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d036      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fad0 	bl	8008958 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80083b8:	e030      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <HAL_SD_IRQHandler+0x296>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d018      	beq.n	8008400 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	4a0a      	ldr	r2, [pc, #40]	@ (80083fc <HAL_SD_IRQHandler+0x2c4>)
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc f8d8 	bl	8004590 <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01a      	beq.n	800841c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 faeb 	bl	80089c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083f0:	e014      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
 80083f2:	bf00      	nop
 80083f4:	ffff3ec5 	.word	0xffff3ec5
 80083f8:	08008959 	.word	0x08008959
 80083fc:	080089c7 	.word	0x080089c7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 ffb3 	bl	800a380 <HAL_SD_AbortCallback>
}
 800841a:	e7ff      	b.n	800841c <HAL_SD_IRQHandler+0x2e4>
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008446:	0f9b      	lsrs	r3, r3, #30
 8008448:	b2da      	uxtb	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008452:	0e9b      	lsrs	r3, r3, #26
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	b2da      	uxtb	r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008464:	0e1b      	lsrs	r3, r3, #24
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	b2da      	uxtb	r2, r3
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	b2da      	uxtb	r2, r3
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008498:	0d1b      	lsrs	r3, r3, #20
 800849a:	b29a      	uxth	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084b6:	0bdb      	lsrs	r3, r3, #15
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c8:	0b9b      	lsrs	r3, r3, #14
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084da:	0b5b      	lsrs	r3, r3, #13
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ec:	0b1b      	lsrs	r3, r3, #12
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2200      	movs	r2, #0
 80084fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008504:	2b00      	cmp	r3, #0
 8008506:	d163      	bne.n	80085d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800850c:	009a      	lsls	r2, r3, #2
 800850e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008512:	4013      	ands	r3, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008518:	0f92      	lsrs	r2, r2, #30
 800851a:	431a      	orrs	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008524:	0edb      	lsrs	r3, r3, #27
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	b2da      	uxtb	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008536:	0e1b      	lsrs	r3, r3, #24
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	b2da      	uxtb	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008548:	0d5b      	lsrs	r3, r3, #21
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	b2da      	uxtb	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855a:	0c9b      	lsrs	r3, r3, #18
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	b2da      	uxtb	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856c:	0bdb      	lsrs	r3, r3, #15
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	b2da      	uxtb	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	7e1b      	ldrb	r3, [r3, #24]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	3302      	adds	r3, #2
 8008590:	2201      	movs	r2, #1
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800859a:	fb03 f202 	mul.w	r2, r3, r2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	7a1b      	ldrb	r3, [r3, #8]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	2201      	movs	r2, #1
 80085ae:	409a      	lsls	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80085bc:	0a52      	lsrs	r2, r2, #9
 80085be:	fb03 f202 	mul.w	r2, r3, r2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80085ce:	e031      	b.n	8008634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d11d      	bne.n	8008614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	431a      	orrs	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	3301      	adds	r3, #1
 80085f4:	029a      	lsls	r2, r3, #10
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008608:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	661a      	str	r2, [r3, #96]	@ 0x60
 8008612:	e00f      	b.n	8008634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a58      	ldr	r2, [pc, #352]	@ (800877c <HAL_SD_GetCardCSD+0x344>)
 800861a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e09d      	b.n	8008770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008638:	0b9b      	lsrs	r3, r3, #14
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	b2da      	uxtb	r2, r3
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	09db      	lsrs	r3, r3, #7
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008652:	b2da      	uxtb	r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866c:	0fdb      	lsrs	r3, r3, #31
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008678:	0f5b      	lsrs	r3, r3, #29
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	b2da      	uxtb	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868a:	0e9b      	lsrs	r3, r3, #26
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	b2da      	uxtb	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	0d9b      	lsrs	r3, r3, #22
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ae:	0d5b      	lsrs	r3, r3, #21
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	0bdb      	lsrs	r3, r3, #15
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	0b9b      	lsrs	r3, r3, #14
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008706:	0b5b      	lsrs	r3, r3, #13
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	0b1b      	lsrs	r3, r3, #12
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	0a9b      	lsrs	r3, r3, #10
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	004005ff 	.word	0x004005ff

08008780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa7e 	bl	8008cec <SD_SendStatus>
 80087f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800880e:	693b      	ldr	r3, [r7, #16]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008834:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008836:	bf00      	nop
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008854:	2b82      	cmp	r3, #130	@ 0x82
 8008856:	d111      	bne.n	800887c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f001 f967 	bl	8009b30 <SDMMC_CmdStopTransfer>
 8008862:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	431a      	orrs	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fdd4 	bl	8008424 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0208 	bic.w	r2, r2, #8
 800888a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008894:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f001 fd7f 	bl	800a3a8 <HAL_SD_RxCpltCallback>
#endif
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fc f810 	bl	80048e8 <HAL_DMA_GetError>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d03e      	beq.n	800894c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d002      	beq.n	80088ea <SD_DMAError+0x36>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d12d      	bne.n	8008946 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a19      	ldr	r2, [pc, #100]	@ (8008954 <SD_DMAError+0xa0>)
 80088f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008900:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008906:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	f7ff ff62 	bl	80087d8 <HAL_SD_GetCardState>
 8008914:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b06      	cmp	r3, #6
 800891a:	d002      	beq.n	8008922 <SD_DMAError+0x6e>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d10a      	bne.n	8008938 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f902 	bl	8009b30 <SDMMC_CmdStopTransfer>
 800892c:	4602      	mov	r2, r0
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008932:	431a      	orrs	r2, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f7ff fd6c 	bl	8008424 <HAL_SD_ErrorCallback>
#endif
  }
}
 800894c:	bf00      	nop
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	004005ff 	.word	0x004005ff

08008958 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008964:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800896e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7ff ff31 	bl	80087d8 <HAL_SD_GetCardState>
 8008976:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b06      	cmp	r3, #6
 800898a:	d002      	beq.n	8008992 <SD_DMATxAbort+0x3a>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b05      	cmp	r3, #5
 8008990:	d10a      	bne.n	80089a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f8ca 	bl	8009b30 <SDMMC_CmdStopTransfer>
 800899c:	4602      	mov	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f001 fce5 	bl	800a380 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80089b6:	e002      	b.n	80089be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fd33 	bl	8008424 <HAL_SD_ErrorCallback>
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089dc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fefa 	bl	80087d8 <HAL_SD_GetCardState>
 80089e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b06      	cmp	r3, #6
 80089f8:	d002      	beq.n	8008a00 <SD_DMARxAbort+0x3a>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b05      	cmp	r3, #5
 80089fe:	d10a      	bne.n	8008a16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f893 	bl	8009b30 <SDMMC_CmdStopTransfer>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	431a      	orrs	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 fcae 	bl	800a380 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a24:	e002      	b.n	8008a2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff fcfc 	bl	8008424 <HAL_SD_ErrorCallback>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b094      	sub	sp, #80	@ 0x50
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 ff45 	bl	80098d4 <SDMMC_GetPowerState>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008a54:	e0b8      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d02f      	beq.n	8008abe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f92c 	bl	8009cc0 <SDMMC_CmdSendCID>
 8008a68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <SD_InitCard+0x40>
    {
      return errorstate;
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	e0a9      	b.n	8008bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 ff6f 	bl	800995e <SDMMC_GetResponse>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 ff66 	bl	800995e <SDMMC_GetResponse>
 8008a92:	4602      	mov	r2, r0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2108      	movs	r1, #8
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 ff5d 	bl	800995e <SDMMC_GetResponse>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	210c      	movs	r1, #12
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 ff54 	bl	800995e <SDMMC_GetResponse>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d00d      	beq.n	8008ae2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f107 020e 	add.w	r2, r7, #14
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f932 	bl	8009d3a <SDMMC_CmdSetRelAdd>
 8008ad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <SD_InitCard+0xae>
    {
      return errorstate;
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	e072      	b.n	8008bc8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d036      	beq.n	8008b58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008aea:	89fb      	ldrh	r3, [r7, #14]
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f001 f8fc 	bl	8009cfc <SDMMC_CmdSendCSD>
 8008b04:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	e05b      	b.n	8008bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 ff21 	bl	800995e <SDMMC_GetResponse>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2104      	movs	r1, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff18 	bl	800995e <SDMMC_GetResponse>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2108      	movs	r1, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 ff0f 	bl	800995e <SDMMC_GetResponse>
 8008b40:	4602      	mov	r2, r0
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	210c      	movs	r1, #12
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 ff06 	bl	800995e <SDMMC_GetResponse>
 8008b52:	4602      	mov	r2, r0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2104      	movs	r1, #4
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fefd 	bl	800995e <SDMMC_GetResponse>
 8008b64:	4603      	mov	r3, r0
 8008b66:	0d1a      	lsrs	r2, r3, #20
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008b6c:	f107 0310 	add.w	r3, r7, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fc60 	bl	8008438 <HAL_SD_GetCardCSD>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b82:	e021      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6819      	ldr	r1, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8c:	041b      	lsls	r3, r3, #16
 8008b8e:	2200      	movs	r2, #0
 8008b90:	461c      	mov	r4, r3
 8008b92:	4615      	mov	r5, r2
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	4608      	mov	r0, r1
 8008b9a:	f000 ffeb 	bl	8009b74 <SDMMC_CmdSelDesel>
 8008b9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <SD_InitCard+0x176>
  {
    return errorstate;
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba8:	e00e      	b.n	8008bc8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681d      	ldr	r5, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	466c      	mov	r4, sp
 8008bb2:	f103 0210 	add.w	r2, r3, #16
 8008bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fe2f 	bl	8009824 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3740      	adds	r7, #64	@ 0x40
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bdb0      	pop	{r4, r5, r7, pc}

08008bd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 ffe6 	bl	8009bba <SDMMC_CmdGoIdleState>
 8008bee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <SD_PowerON+0x2a>
  {
    return errorstate;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	e072      	b.n	8008ce0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fff9 	bl	8009bf6 <SDMMC_CmdOperCond>
 8008c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 ffcf 	bl	8009bba <SDMMC_CmdGoIdleState>
 8008c1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e05b      	b.n	8008ce0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d137      	bne.n	8008ca6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 fff9 	bl	8009c34 <SDMMC_CmdAppCommand>
 8008c42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02d      	beq.n	8008ca6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c4e:	e047      	b.n	8008ce0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 ffec 	bl	8009c34 <SDMMC_CmdAppCommand>
 8008c5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <SD_PowerON+0x98>
    {
      return errorstate;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	e03b      	b.n	8008ce0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	491e      	ldr	r1, [pc, #120]	@ (8008ce8 <SD_PowerON+0x118>)
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f001 f802 	bl	8009c78 <SDMMC_CmdAppOperCommand>
 8008c74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c80:	e02e      	b.n	8008ce0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fe68 	bl	800995e <SDMMC_GetResponse>
 8008c8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	0fdb      	lsrs	r3, r3, #31
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <SD_PowerON+0xcc>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <SD_PowerON+0xce>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	613b      	str	r3, [r7, #16]

    count++;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d802      	bhi.n	8008cb6 <SD_PowerON+0xe6>
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0cc      	beq.n	8008c50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d902      	bls.n	8008cc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cc4:	e00c      	b.n	8008ce0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8008cd6:	e002      	b.n	8008cde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	c1100000 	.word	0xc1100000

08008cec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d00:	e018      	b.n	8008d34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0a:	041b      	lsls	r3, r3, #16
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f001 f834 	bl	8009d7c <SDMMC_CmdSendStatus>
 8008d14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e009      	b.n	8008d34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fe19 	bl	800995e <SDMMC_GetResponse>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03f      	beq.n	8008dd6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e033      	b.n	8008dc4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fd8b 	bl	800987c <SDMMC_ReadFIFO>
 8008d66:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	0e1b      	lsrs	r3, r3, #24
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	d9c8      	bls.n	8008d5c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d043      	beq.n	8008e80 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e037      	b.n	8008e6e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	021a      	lsls	r2, r3, #8
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	041a      	lsls	r2, r3, #16
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	061a      	lsls	r2, r3, #24
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f107 0208 	add.w	r2, r7, #8
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fd17 	bl	8009896 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b07      	cmp	r3, #7
 8008e72:	d9c4      	bls.n	8008dfe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008e80:	bf00      	nop
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e040      	b.n	8008f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f8 fce6 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2224      	movs	r2, #36	@ 0x24
 8008eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0201 	bic.w	r2, r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa8c 	bl	80093ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f825 	bl	8008f24 <UART_SetConfig>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e01b      	b.n	8008f1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb0b 	bl	8009530 <UART_CheckIdleState>
 8008f1a:	4603      	mov	r3, r0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80091e8 <UART_SetConfig+0x2c4>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a94      	ldr	r2, [pc, #592]	@ (80091ec <UART_SetConfig+0x2c8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d120      	bne.n	8008fe2 <UART_SetConfig+0xbe>
 8008fa0:	4b93      	ldr	r3, [pc, #588]	@ (80091f0 <UART_SetConfig+0x2cc>)
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d816      	bhi.n	8008fdc <UART_SetConfig+0xb8>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <UART_SetConfig+0x90>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fc5 	.word	0x08008fc5
 8008fb8:	08008fd1 	.word	0x08008fd1
 8008fbc:	08008fcb 	.word	0x08008fcb
 8008fc0:	08008fd7 	.word	0x08008fd7
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e150      	b.n	800926c <UART_SetConfig+0x348>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e14d      	b.n	800926c <UART_SetConfig+0x348>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e14a      	b.n	800926c <UART_SetConfig+0x348>
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e147      	b.n	800926c <UART_SetConfig+0x348>
 8008fdc:	2310      	movs	r3, #16
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e144      	b.n	800926c <UART_SetConfig+0x348>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a83      	ldr	r2, [pc, #524]	@ (80091f4 <UART_SetConfig+0x2d0>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d132      	bne.n	8009052 <UART_SetConfig+0x12e>
 8008fec:	4b80      	ldr	r3, [pc, #512]	@ (80091f0 <UART_SetConfig+0x2cc>)
 8008fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff2:	f003 030c 	and.w	r3, r3, #12
 8008ff6:	2b0c      	cmp	r3, #12
 8008ff8:	d828      	bhi.n	800904c <UART_SetConfig+0x128>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <UART_SetConfig+0xdc>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009035 	.word	0x08009035
 8009004:	0800904d 	.word	0x0800904d
 8009008:	0800904d 	.word	0x0800904d
 800900c:	0800904d 	.word	0x0800904d
 8009010:	08009041 	.word	0x08009041
 8009014:	0800904d 	.word	0x0800904d
 8009018:	0800904d 	.word	0x0800904d
 800901c:	0800904d 	.word	0x0800904d
 8009020:	0800903b 	.word	0x0800903b
 8009024:	0800904d 	.word	0x0800904d
 8009028:	0800904d 	.word	0x0800904d
 800902c:	0800904d 	.word	0x0800904d
 8009030:	08009047 	.word	0x08009047
 8009034:	2300      	movs	r3, #0
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	e118      	b.n	800926c <UART_SetConfig+0x348>
 800903a:	2302      	movs	r3, #2
 800903c:	77fb      	strb	r3, [r7, #31]
 800903e:	e115      	b.n	800926c <UART_SetConfig+0x348>
 8009040:	2304      	movs	r3, #4
 8009042:	77fb      	strb	r3, [r7, #31]
 8009044:	e112      	b.n	800926c <UART_SetConfig+0x348>
 8009046:	2308      	movs	r3, #8
 8009048:	77fb      	strb	r3, [r7, #31]
 800904a:	e10f      	b.n	800926c <UART_SetConfig+0x348>
 800904c:	2310      	movs	r3, #16
 800904e:	77fb      	strb	r3, [r7, #31]
 8009050:	e10c      	b.n	800926c <UART_SetConfig+0x348>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a68      	ldr	r2, [pc, #416]	@ (80091f8 <UART_SetConfig+0x2d4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d120      	bne.n	800909e <UART_SetConfig+0x17a>
 800905c:	4b64      	ldr	r3, [pc, #400]	@ (80091f0 <UART_SetConfig+0x2cc>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009062:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009066:	2b30      	cmp	r3, #48	@ 0x30
 8009068:	d013      	beq.n	8009092 <UART_SetConfig+0x16e>
 800906a:	2b30      	cmp	r3, #48	@ 0x30
 800906c:	d814      	bhi.n	8009098 <UART_SetConfig+0x174>
 800906e:	2b20      	cmp	r3, #32
 8009070:	d009      	beq.n	8009086 <UART_SetConfig+0x162>
 8009072:	2b20      	cmp	r3, #32
 8009074:	d810      	bhi.n	8009098 <UART_SetConfig+0x174>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <UART_SetConfig+0x15c>
 800907a:	2b10      	cmp	r3, #16
 800907c:	d006      	beq.n	800908c <UART_SetConfig+0x168>
 800907e:	e00b      	b.n	8009098 <UART_SetConfig+0x174>
 8009080:	2300      	movs	r3, #0
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e0f2      	b.n	800926c <UART_SetConfig+0x348>
 8009086:	2302      	movs	r3, #2
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e0ef      	b.n	800926c <UART_SetConfig+0x348>
 800908c:	2304      	movs	r3, #4
 800908e:	77fb      	strb	r3, [r7, #31]
 8009090:	e0ec      	b.n	800926c <UART_SetConfig+0x348>
 8009092:	2308      	movs	r3, #8
 8009094:	77fb      	strb	r3, [r7, #31]
 8009096:	e0e9      	b.n	800926c <UART_SetConfig+0x348>
 8009098:	2310      	movs	r3, #16
 800909a:	77fb      	strb	r3, [r7, #31]
 800909c:	e0e6      	b.n	800926c <UART_SetConfig+0x348>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a56      	ldr	r2, [pc, #344]	@ (80091fc <UART_SetConfig+0x2d8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d120      	bne.n	80090ea <UART_SetConfig+0x1c6>
 80090a8:	4b51      	ldr	r3, [pc, #324]	@ (80091f0 <UART_SetConfig+0x2cc>)
 80090aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b4:	d013      	beq.n	80090de <UART_SetConfig+0x1ba>
 80090b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b8:	d814      	bhi.n	80090e4 <UART_SetConfig+0x1c0>
 80090ba:	2b80      	cmp	r3, #128	@ 0x80
 80090bc:	d009      	beq.n	80090d2 <UART_SetConfig+0x1ae>
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d810      	bhi.n	80090e4 <UART_SetConfig+0x1c0>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <UART_SetConfig+0x1a8>
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d006      	beq.n	80090d8 <UART_SetConfig+0x1b4>
 80090ca:	e00b      	b.n	80090e4 <UART_SetConfig+0x1c0>
 80090cc:	2300      	movs	r3, #0
 80090ce:	77fb      	strb	r3, [r7, #31]
 80090d0:	e0cc      	b.n	800926c <UART_SetConfig+0x348>
 80090d2:	2302      	movs	r3, #2
 80090d4:	77fb      	strb	r3, [r7, #31]
 80090d6:	e0c9      	b.n	800926c <UART_SetConfig+0x348>
 80090d8:	2304      	movs	r3, #4
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e0c6      	b.n	800926c <UART_SetConfig+0x348>
 80090de:	2308      	movs	r3, #8
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e0c3      	b.n	800926c <UART_SetConfig+0x348>
 80090e4:	2310      	movs	r3, #16
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e0c0      	b.n	800926c <UART_SetConfig+0x348>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a44      	ldr	r2, [pc, #272]	@ (8009200 <UART_SetConfig+0x2dc>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d125      	bne.n	8009140 <UART_SetConfig+0x21c>
 80090f4:	4b3e      	ldr	r3, [pc, #248]	@ (80091f0 <UART_SetConfig+0x2cc>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009102:	d017      	beq.n	8009134 <UART_SetConfig+0x210>
 8009104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009108:	d817      	bhi.n	800913a <UART_SetConfig+0x216>
 800910a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800910e:	d00b      	beq.n	8009128 <UART_SetConfig+0x204>
 8009110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009114:	d811      	bhi.n	800913a <UART_SetConfig+0x216>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <UART_SetConfig+0x1fe>
 800911a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911e:	d006      	beq.n	800912e <UART_SetConfig+0x20a>
 8009120:	e00b      	b.n	800913a <UART_SetConfig+0x216>
 8009122:	2300      	movs	r3, #0
 8009124:	77fb      	strb	r3, [r7, #31]
 8009126:	e0a1      	b.n	800926c <UART_SetConfig+0x348>
 8009128:	2302      	movs	r3, #2
 800912a:	77fb      	strb	r3, [r7, #31]
 800912c:	e09e      	b.n	800926c <UART_SetConfig+0x348>
 800912e:	2304      	movs	r3, #4
 8009130:	77fb      	strb	r3, [r7, #31]
 8009132:	e09b      	b.n	800926c <UART_SetConfig+0x348>
 8009134:	2308      	movs	r3, #8
 8009136:	77fb      	strb	r3, [r7, #31]
 8009138:	e098      	b.n	800926c <UART_SetConfig+0x348>
 800913a:	2310      	movs	r3, #16
 800913c:	77fb      	strb	r3, [r7, #31]
 800913e:	e095      	b.n	800926c <UART_SetConfig+0x348>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a2f      	ldr	r2, [pc, #188]	@ (8009204 <UART_SetConfig+0x2e0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d125      	bne.n	8009196 <UART_SetConfig+0x272>
 800914a:	4b29      	ldr	r3, [pc, #164]	@ (80091f0 <UART_SetConfig+0x2cc>)
 800914c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009150:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009158:	d017      	beq.n	800918a <UART_SetConfig+0x266>
 800915a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800915e:	d817      	bhi.n	8009190 <UART_SetConfig+0x26c>
 8009160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009164:	d00b      	beq.n	800917e <UART_SetConfig+0x25a>
 8009166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800916a:	d811      	bhi.n	8009190 <UART_SetConfig+0x26c>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <UART_SetConfig+0x254>
 8009170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009174:	d006      	beq.n	8009184 <UART_SetConfig+0x260>
 8009176:	e00b      	b.n	8009190 <UART_SetConfig+0x26c>
 8009178:	2301      	movs	r3, #1
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e076      	b.n	800926c <UART_SetConfig+0x348>
 800917e:	2302      	movs	r3, #2
 8009180:	77fb      	strb	r3, [r7, #31]
 8009182:	e073      	b.n	800926c <UART_SetConfig+0x348>
 8009184:	2304      	movs	r3, #4
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e070      	b.n	800926c <UART_SetConfig+0x348>
 800918a:	2308      	movs	r3, #8
 800918c:	77fb      	strb	r3, [r7, #31]
 800918e:	e06d      	b.n	800926c <UART_SetConfig+0x348>
 8009190:	2310      	movs	r3, #16
 8009192:	77fb      	strb	r3, [r7, #31]
 8009194:	e06a      	b.n	800926c <UART_SetConfig+0x348>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1b      	ldr	r2, [pc, #108]	@ (8009208 <UART_SetConfig+0x2e4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d138      	bne.n	8009212 <UART_SetConfig+0x2ee>
 80091a0:	4b13      	ldr	r3, [pc, #76]	@ (80091f0 <UART_SetConfig+0x2cc>)
 80091a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80091aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091ae:	d017      	beq.n	80091e0 <UART_SetConfig+0x2bc>
 80091b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091b4:	d82a      	bhi.n	800920c <UART_SetConfig+0x2e8>
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ba:	d00b      	beq.n	80091d4 <UART_SetConfig+0x2b0>
 80091bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c0:	d824      	bhi.n	800920c <UART_SetConfig+0x2e8>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <UART_SetConfig+0x2aa>
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ca:	d006      	beq.n	80091da <UART_SetConfig+0x2b6>
 80091cc:	e01e      	b.n	800920c <UART_SetConfig+0x2e8>
 80091ce:	2300      	movs	r3, #0
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	e04b      	b.n	800926c <UART_SetConfig+0x348>
 80091d4:	2302      	movs	r3, #2
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e048      	b.n	800926c <UART_SetConfig+0x348>
 80091da:	2304      	movs	r3, #4
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e045      	b.n	800926c <UART_SetConfig+0x348>
 80091e0:	2308      	movs	r3, #8
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e042      	b.n	800926c <UART_SetConfig+0x348>
 80091e6:	bf00      	nop
 80091e8:	efff69f3 	.word	0xefff69f3
 80091ec:	40011000 	.word	0x40011000
 80091f0:	40023800 	.word	0x40023800
 80091f4:	40004400 	.word	0x40004400
 80091f8:	40004800 	.word	0x40004800
 80091fc:	40004c00 	.word	0x40004c00
 8009200:	40005000 	.word	0x40005000
 8009204:	40011400 	.word	0x40011400
 8009208:	40007800 	.word	0x40007800
 800920c:	2310      	movs	r3, #16
 800920e:	77fb      	strb	r3, [r7, #31]
 8009210:	e02c      	b.n	800926c <UART_SetConfig+0x348>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a72      	ldr	r2, [pc, #456]	@ (80093e0 <UART_SetConfig+0x4bc>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d125      	bne.n	8009268 <UART_SetConfig+0x344>
 800921c:	4b71      	ldr	r3, [pc, #452]	@ (80093e4 <UART_SetConfig+0x4c0>)
 800921e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009222:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009226:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800922a:	d017      	beq.n	800925c <UART_SetConfig+0x338>
 800922c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009230:	d817      	bhi.n	8009262 <UART_SetConfig+0x33e>
 8009232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009236:	d00b      	beq.n	8009250 <UART_SetConfig+0x32c>
 8009238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800923c:	d811      	bhi.n	8009262 <UART_SetConfig+0x33e>
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <UART_SetConfig+0x326>
 8009242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009246:	d006      	beq.n	8009256 <UART_SetConfig+0x332>
 8009248:	e00b      	b.n	8009262 <UART_SetConfig+0x33e>
 800924a:	2300      	movs	r3, #0
 800924c:	77fb      	strb	r3, [r7, #31]
 800924e:	e00d      	b.n	800926c <UART_SetConfig+0x348>
 8009250:	2302      	movs	r3, #2
 8009252:	77fb      	strb	r3, [r7, #31]
 8009254:	e00a      	b.n	800926c <UART_SetConfig+0x348>
 8009256:	2304      	movs	r3, #4
 8009258:	77fb      	strb	r3, [r7, #31]
 800925a:	e007      	b.n	800926c <UART_SetConfig+0x348>
 800925c:	2308      	movs	r3, #8
 800925e:	77fb      	strb	r3, [r7, #31]
 8009260:	e004      	b.n	800926c <UART_SetConfig+0x348>
 8009262:	2310      	movs	r3, #16
 8009264:	77fb      	strb	r3, [r7, #31]
 8009266:	e001      	b.n	800926c <UART_SetConfig+0x348>
 8009268:	2310      	movs	r3, #16
 800926a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009274:	d15b      	bne.n	800932e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009276:	7ffb      	ldrb	r3, [r7, #31]
 8009278:	2b08      	cmp	r3, #8
 800927a:	d828      	bhi.n	80092ce <UART_SetConfig+0x3aa>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <UART_SetConfig+0x360>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092a9 	.word	0x080092a9
 8009288:	080092b1 	.word	0x080092b1
 800928c:	080092b9 	.word	0x080092b9
 8009290:	080092cf 	.word	0x080092cf
 8009294:	080092bf 	.word	0x080092bf
 8009298:	080092cf 	.word	0x080092cf
 800929c:	080092cf 	.word	0x080092cf
 80092a0:	080092cf 	.word	0x080092cf
 80092a4:	080092c7 	.word	0x080092c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a8:	f7fd f9a8 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 80092ac:	61b8      	str	r0, [r7, #24]
        break;
 80092ae:	e013      	b.n	80092d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092b0:	f7fd f9b8 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 80092b4:	61b8      	str	r0, [r7, #24]
        break;
 80092b6:	e00f      	b.n	80092d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092b8:	4b4b      	ldr	r3, [pc, #300]	@ (80093e8 <UART_SetConfig+0x4c4>)
 80092ba:	61bb      	str	r3, [r7, #24]
        break;
 80092bc:	e00c      	b.n	80092d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092be:	f7fd f8cb 	bl	8006458 <HAL_RCC_GetSysClockFreq>
 80092c2:	61b8      	str	r0, [r7, #24]
        break;
 80092c4:	e008      	b.n	80092d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ca:	61bb      	str	r3, [r7, #24]
        break;
 80092cc:	e004      	b.n	80092d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	77bb      	strb	r3, [r7, #30]
        break;
 80092d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d074      	beq.n	80093c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	005a      	lsls	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	085b      	lsrs	r3, r3, #1
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b0f      	cmp	r3, #15
 80092f8:	d916      	bls.n	8009328 <UART_SetConfig+0x404>
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009300:	d212      	bcs.n	8009328 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	b29b      	uxth	r3, r3
 8009306:	f023 030f 	bic.w	r3, r3, #15
 800930a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	085b      	lsrs	r3, r3, #1
 8009310:	b29b      	uxth	r3, r3
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	b29a      	uxth	r2, r3
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	4313      	orrs	r3, r2
 800931c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	89fa      	ldrh	r2, [r7, #14]
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	e04f      	b.n	80093c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	77bb      	strb	r3, [r7, #30]
 800932c:	e04c      	b.n	80093c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800932e:	7ffb      	ldrb	r3, [r7, #31]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d828      	bhi.n	8009386 <UART_SetConfig+0x462>
 8009334:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <UART_SetConfig+0x418>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	08009361 	.word	0x08009361
 8009340:	08009369 	.word	0x08009369
 8009344:	08009371 	.word	0x08009371
 8009348:	08009387 	.word	0x08009387
 800934c:	08009377 	.word	0x08009377
 8009350:	08009387 	.word	0x08009387
 8009354:	08009387 	.word	0x08009387
 8009358:	08009387 	.word	0x08009387
 800935c:	0800937f 	.word	0x0800937f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009360:	f7fd f94c 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8009364:	61b8      	str	r0, [r7, #24]
        break;
 8009366:	e013      	b.n	8009390 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009368:	f7fd f95c 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 800936c:	61b8      	str	r0, [r7, #24]
        break;
 800936e:	e00f      	b.n	8009390 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009370:	4b1d      	ldr	r3, [pc, #116]	@ (80093e8 <UART_SetConfig+0x4c4>)
 8009372:	61bb      	str	r3, [r7, #24]
        break;
 8009374:	e00c      	b.n	8009390 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009376:	f7fd f86f 	bl	8006458 <HAL_RCC_GetSysClockFreq>
 800937a:	61b8      	str	r0, [r7, #24]
        break;
 800937c:	e008      	b.n	8009390 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800937e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009382:	61bb      	str	r3, [r7, #24]
        break;
 8009384:	e004      	b.n	8009390 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	77bb      	strb	r3, [r7, #30]
        break;
 800938e:	bf00      	nop
    }

    if (pclk != 0U)
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d018      	beq.n	80093c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	085a      	lsrs	r2, r3, #1
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	441a      	add	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b0f      	cmp	r3, #15
 80093ae:	d909      	bls.n	80093c4 <UART_SetConfig+0x4a0>
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b6:	d205      	bcs.n	80093c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	e001      	b.n	80093c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80093d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3720      	adds	r7, #32
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	40007c00 	.word	0x40007c00
 80093e4:	40023800 	.word	0x40023800
 80093e8:	00f42400 	.word	0x00f42400

080093ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01a      	beq.n	8009502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ea:	d10a      	bne.n	8009502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	605a      	str	r2, [r3, #4]
  }
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b098      	sub	sp, #96	@ 0x60
 8009534:	af02      	add	r7, sp, #8
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009540:	f7fa f97a 	bl	8003838 <HAL_GetTick>
 8009544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0308 	and.w	r3, r3, #8
 8009550:	2b08      	cmp	r3, #8
 8009552:	d12e      	bne.n	80095b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800955c:	2200      	movs	r2, #0
 800955e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f88c 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d021      	beq.n	80095b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009582:	653b      	str	r3, [r7, #80]	@ 0x50
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958c:	647b      	str	r3, [r7, #68]	@ 0x44
 800958e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800959a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e6      	bne.n	800956e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e062      	b.n	8009678 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d149      	bne.n	8009654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c8:	2200      	movs	r2, #0
 80095ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f856 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d03c      	beq.n	8009654 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	623b      	str	r3, [r7, #32]
   return(result);
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80095fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e6      	bne.n	80095da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	60fb      	str	r3, [r7, #12]
   return(result);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0301 	bic.w	r3, r3, #1
 8009622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800962c:	61fa      	str	r2, [r7, #28]
 800962e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	617b      	str	r3, [r7, #20]
   return(result);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e5      	bne.n	800960c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e011      	b.n	8009678 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3758      	adds	r7, #88	@ 0x58
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	4613      	mov	r3, r2
 800968e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009690:	e04f      	b.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d04b      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800969a:	f7fa f8cd 	bl	8003838 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d302      	bcc.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e04e      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d037      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b80      	cmp	r3, #128	@ 0x80
 80096c6:	d034      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b40      	cmp	r3, #64	@ 0x40
 80096cc:	d031      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d110      	bne.n	80096fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2208      	movs	r2, #8
 80096e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f838 	bl	800975a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2208      	movs	r2, #8
 80096ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e029      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800970c:	d111      	bne.n	8009732 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 f81e 	bl	800975a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2220      	movs	r2, #32
 8009722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e00f      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69da      	ldr	r2, [r3, #28]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	4013      	ands	r3, r2
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	bf0c      	ite	eq
 8009742:	2301      	moveq	r3, #1
 8009744:	2300      	movne	r3, #0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	429a      	cmp	r2, r3
 800974e:	d0a0      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800975a:	b480      	push	{r7}
 800975c:	b095      	sub	sp, #84	@ 0x54
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009780:	643b      	str	r3, [r7, #64]	@ 0x40
 8009782:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	e853 3f00 	ldrex	r3, [r3]
 80097a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f023 0301 	bic.w	r3, r3, #1
 80097aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3308      	adds	r3, #8
 80097b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e5      	bne.n	8009794 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d118      	bne.n	8009802 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f023 0310 	bic.w	r3, r3, #16
 80097e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ee:	61bb      	str	r3, [r7, #24]
 80097f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6979      	ldr	r1, [r7, #20]
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	613b      	str	r3, [r7, #16]
   return(result);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e6      	bne.n	80097d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009816:	bf00      	nop
 8009818:	3754      	adds	r7, #84	@ 0x54
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009824:	b084      	sub	sp, #16
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	f107 001c 	add.w	r0, r7, #28
 8009832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800983a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800983c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800983e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009842:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009846:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800984a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800984e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	4b07      	ldr	r3, [pc, #28]	@ (8009878 <SDMMC_Init+0x54>)
 800985c:	4013      	ands	r3, r2
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	b004      	add	sp, #16
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	ffff8100 	.word	0xffff8100

0800987c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2203      	movs	r2, #3
 80098c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0303 	and.w	r3, r3, #3
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800990e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009914:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800991a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <SDMMC_SendCommand+0x50>)
 8009928:	4013      	ands	r3, r2
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	fffff000 	.word	0xfffff000

08009944 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	b2db      	uxtb	r3, r3
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3314      	adds	r3, #20
 800996c:	461a      	mov	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	4413      	add	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
}  
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80099b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80099b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0

}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80099ea:	2310      	movs	r3, #16
 80099ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ee:	2340      	movs	r3, #64	@ 0x40
 80099f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff ff74 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a0c:	2110      	movs	r1, #16
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9d6 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a2e:	2311      	movs	r3, #17
 8009a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a32:	2340      	movs	r3, #64	@ 0x40
 8009a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff ff52 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a50:	2111      	movs	r1, #17
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f9b4 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a72:	2312      	movs	r3, #18
 8009a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff ff30 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a94:	2112      	movs	r1, #18
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f992 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a9e:	69fb      	ldr	r3, [r7, #28]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ab6:	2318      	movs	r3, #24
 8009ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aba:	2340      	movs	r3, #64	@ 0x40
 8009abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff0e 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad8:	2118      	movs	r1, #24
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f970 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ae2:	69fb      	ldr	r3, [r7, #28]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3720      	adds	r7, #32
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009afa:	2319      	movs	r3, #25
 8009afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009afe:	2340      	movs	r3, #64	@ 0x40
 8009b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b0c:	f107 0308 	add.w	r3, r7, #8
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff feec 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b1c:	2119      	movs	r1, #25
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f94e 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b26:	69fb      	ldr	r3, [r7, #28]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b3c:	230c      	movs	r3, #12
 8009b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b40:	2340      	movs	r3, #64	@ 0x40
 8009b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b44:	2300      	movs	r3, #0
 8009b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff fecb 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b5a:	4a05      	ldr	r2, [pc, #20]	@ (8009b70 <SDMMC_CmdStopTransfer+0x40>)
 8009b5c:	210c      	movs	r1, #12
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f92e 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b66:	69fb      	ldr	r3, [r7, #28]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	05f5e100 	.word	0x05f5e100

08009b74 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	@ 0x28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b84:	2307      	movs	r3, #7
 8009b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b88:	2340      	movs	r3, #64	@ 0x40
 8009b8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b94:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b96:	f107 0310 	add.w	r3, r7, #16
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fea7 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ba6:	2107      	movs	r1, #7
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f909 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009bae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3728      	adds	r7, #40	@ 0x28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b088      	sub	sp, #32
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bd8:	f107 0308 	add.w	r3, r7, #8
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fe86 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fb23 	bl	800a230 <SDMMC_GetCmdError>
 8009bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bec:	69fb      	ldr	r3, [r7, #28]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b088      	sub	sp, #32
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009bfe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c04:	2308      	movs	r3, #8
 8009c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c08:	2340      	movs	r3, #64	@ 0x40
 8009c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fe67 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fab6 	bl	800a194 <SDMMC_GetCmdResp7>
 8009c28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c42:	2337      	movs	r3, #55	@ 0x37
 8009c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c46:	2340      	movs	r3, #64	@ 0x40
 8009c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff fe48 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c64:	2137      	movs	r1, #55	@ 0x37
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f8aa 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009c6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3720      	adds	r7, #32
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4b0d      	ldr	r3, [pc, #52]	@ (8009cbc <SDMMC_CmdAppOperCommand+0x44>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c8a:	2329      	movs	r3, #41	@ 0x29
 8009c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8e:	2340      	movs	r3, #64	@ 0x40
 8009c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9c:	f107 0308 	add.w	r3, r7, #8
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff fe24 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9bf 	bl	800a02c <SDMMC_GetCmdResp3>
 8009cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3720      	adds	r7, #32
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	80100000 	.word	0x80100000

08009cc0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cd0:	23c0      	movs	r3, #192	@ 0xc0
 8009cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff fe03 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f956 	bl	8009f9c <SDMMC_GetCmdResp2>
 8009cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d0a:	2309      	movs	r3, #9
 8009d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d0e:	23c0      	movs	r3, #192	@ 0xc0
 8009d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fde4 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f937 	bl	8009f9c <SDMMC_GetCmdResp2>
 8009d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d30:	69fb      	ldr	r3, [r7, #28]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d4c:	2340      	movs	r3, #64	@ 0x40
 8009d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fdc5 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	2103      	movs	r1, #3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f99c 	bl	800a0a8 <SDMMC_GetCmdResp6>
 8009d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d72:	69fb      	ldr	r3, [r7, #28]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3720      	adds	r7, #32
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d8a:	230d      	movs	r3, #13
 8009d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d8e:	2340      	movs	r3, #64	@ 0x40
 8009d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff fda4 	bl	80098f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dac:	210d      	movs	r1, #13
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f806 	bl	8009dc0 <SDMMC_GetCmdResp1>
 8009db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db6:	69fb      	ldr	r3, [r7, #28]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009dce:	4b70      	ldr	r3, [pc, #448]	@ (8009f90 <SDMMC_GetCmdResp1+0x1d0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a70      	ldr	r2, [pc, #448]	@ (8009f94 <SDMMC_GetCmdResp1+0x1d4>)
 8009dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd8:	0a5a      	lsrs	r2, r3, #9
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	61fa      	str	r2, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009df0:	e0c9      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0ef      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1ea      	bne.n	8009de2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d004      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e1e:	2304      	movs	r3, #4
 8009e20:	e0b1      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e0a6      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	22c5      	movs	r2, #197	@ 0xc5
 8009e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff fd80 	bl	8009944 <SDMMC_GetCommandResponse>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d001      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e099      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff fd82 	bl	800995e <SDMMC_GetResponse>
 8009e5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8009f98 <SDMMC_GetCmdResp1+0x1d8>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e08d      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	da02      	bge.n	8009e76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e74:	e087      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e80:	2340      	movs	r3, #64	@ 0x40
 8009e82:	e080      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e8e:	2380      	movs	r3, #128	@ 0x80
 8009e90:	e079      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ea0:	e071      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eb0:	e069      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ec0:	e061      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ecc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ed0:	e059      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ee0:	e051      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009eec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ef0:	e049      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009efc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f00:	e041      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f10:	e039      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f20:	e031      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009f30:	e029      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f40:	e021      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f50:	e019      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f60:	e011      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f70:	e009      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009f80:	e001      	b.n	8009f86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3720      	adds	r7, #32
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000008 	.word	0x20000008
 8009f94:	10624dd3 	.word	0x10624dd3
 8009f98:	fdffe008 	.word	0xfdffe008

08009f9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fa4:	4b1f      	ldr	r3, [pc, #124]	@ (800a024 <SDMMC_GetCmdResp2+0x88>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1f      	ldr	r2, [pc, #124]	@ (800a028 <SDMMC_GetCmdResp2+0x8c>)
 8009faa:	fba2 2303 	umull	r2, r3, r2, r3
 8009fae:	0a5b      	lsrs	r3, r3, #9
 8009fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	1e5a      	subs	r2, r3, #1
 8009fbe:	60fa      	str	r2, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fc8:	e026      	b.n	800a018 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0ef      	beq.n	8009fba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1ea      	bne.n	8009fba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff6:	2304      	movs	r3, #4
 8009ff8:	e00e      	b.n	800a018 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e003      	b.n	800a018 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	22c5      	movs	r2, #197	@ 0xc5
 800a014:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	20000008 	.word	0x20000008
 800a028:	10624dd3 	.word	0x10624dd3

0800a02c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a034:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a0 <SDMMC_GetCmdResp3+0x74>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a4 <SDMMC_GetCmdResp3+0x78>)
 800a03a:	fba2 2303 	umull	r2, r3, r2, r3
 800a03e:	0a5b      	lsrs	r3, r3, #9
 800a040:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a044:	fb02 f303 	mul.w	r3, r2, r3
 800a048:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	60fa      	str	r2, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a054:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a058:	e01b      	b.n	800a092 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0ef      	beq.n	800a04a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1ea      	bne.n	800a04a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2204      	movs	r2, #4
 800a084:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a086:	2304      	movs	r3, #4
 800a088:	e003      	b.n	800a092 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	22c5      	movs	r2, #197	@ 0xc5
 800a08e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20000008 	.word	0x20000008
 800a0a4:	10624dd3 	.word	0x10624dd3

0800a0a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0b6:	4b35      	ldr	r3, [pc, #212]	@ (800a18c <SDMMC_GetCmdResp6+0xe4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a35      	ldr	r2, [pc, #212]	@ (800a190 <SDMMC_GetCmdResp6+0xe8>)
 800a0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c0:	0a5b      	lsrs	r3, r3, #9
 800a0c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0c6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	1e5a      	subs	r2, r3, #1
 800a0d0:	61fa      	str	r2, [r7, #28]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0da:	e052      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ef      	beq.n	800a0cc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1ea      	bne.n	800a0cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2204      	movs	r2, #4
 800a106:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a108:	2304      	movs	r3, #4
 800a10a:	e03a      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d004      	beq.n	800a122 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2201      	movs	r2, #1
 800a11c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a11e:	2301      	movs	r3, #1
 800a120:	e02f      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fc0e 	bl	8009944 <SDMMC_GetCommandResponse>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	4293      	cmp	r3, r2
 800a130:	d001      	beq.n	800a136 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a132:	2301      	movs	r3, #1
 800a134:	e025      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	22c5      	movs	r2, #197	@ 0xc5
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff fc0d 	bl	800995e <SDMMC_GetResponse>
 800a144:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	b29a      	uxth	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e011      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a168:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a16c:	e009      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a17c:	e001      	b.n	800a182 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a17e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000008 	.word	0x20000008
 800a190:	10624dd3 	.word	0x10624dd3

0800a194 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a19c:	4b22      	ldr	r3, [pc, #136]	@ (800a228 <SDMMC_GetCmdResp7+0x94>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a22      	ldr	r2, [pc, #136]	@ (800a22c <SDMMC_GetCmdResp7+0x98>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	0a5b      	lsrs	r3, r3, #9
 800a1a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	60fa      	str	r2, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1c0:	e02c      	b.n	800a21c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0ef      	beq.n	800a1b2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1ea      	bne.n	800a1b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1ee:	2304      	movs	r3, #4
 800a1f0:	e014      	b.n	800a21c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d004      	beq.n	800a208 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a204:	2301      	movs	r3, #1
 800a206:	e009      	b.n	800a21c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2240      	movs	r2, #64	@ 0x40
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a21a:	2300      	movs	r3, #0
  
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	20000008 	.word	0x20000008
 800a22c:	10624dd3 	.word	0x10624dd3

0800a230 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a238:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <SDMMC_GetCmdError+0x50>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <SDMMC_GetCmdError+0x54>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0a5b      	lsrs	r3, r3, #9
 800a244:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a248:	fb02 f303 	mul.w	r3, r2, r3
 800a24c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	1e5a      	subs	r2, r3, #1
 800a252:	60fa      	str	r2, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a258:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a25c:	e009      	b.n	800a272 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0f1      	beq.n	800a24e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	22c5      	movs	r2, #197	@ 0xc5
 800a26e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	20000008 	.word	0x20000008
 800a284:	10624dd3 	.word	0x10624dd3

0800a288 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a28c:	4904      	ldr	r1, [pc, #16]	@ (800a2a0 <MX_FATFS_Init+0x18>)
 800a28e:	4805      	ldr	r0, [pc, #20]	@ (800a2a4 <MX_FATFS_Init+0x1c>)
 800a290:	f000 fab2 	bl	800a7f8 <FATFS_LinkDriver>
 800a294:	4603      	mov	r3, r0
 800a296:	461a      	mov	r2, r3
 800a298:	4b03      	ldr	r3, [pc, #12]	@ (800a2a8 <MX_FATFS_Init+0x20>)
 800a29a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a29c:	bf00      	nop
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200049f8 	.word	0x200049f8
 800a2a4:	0800d9cc 	.word	0x0800d9cc
 800a2a8:	200049f4 	.word	0x200049f4

0800a2ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a2b6:	f000 f888 	bl	800a3ca <BSP_SD_IsDetected>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d001      	beq.n	800a2c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e005      	b.n	800a2d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800a2c4:	4804      	ldr	r0, [pc, #16]	@ (800a2d8 <BSP_SD_Init+0x2c>)
 800a2c6:	f7fd fcb6 	bl	8007c36 <HAL_SD_Init>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20004784 	.word	0x20004784

0800a2dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	68f9      	ldr	r1, [r7, #12]
 800a2f2:	4806      	ldr	r0, [pc, #24]	@ (800a30c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a2f4:	f7fd fd58 	bl	8007da8 <HAL_SD_ReadBlocks_DMA>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20004784 	.word	0x20004784

0800a310 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	68f9      	ldr	r1, [r7, #12]
 800a326:	4806      	ldr	r0, [pc, #24]	@ (800a340 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a328:	f7fd fe20 	bl	8007f6c <HAL_SD_WriteBlocks_DMA>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20004784 	.word	0x20004784

0800a344 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a348:	4805      	ldr	r0, [pc, #20]	@ (800a360 <BSP_SD_GetCardState+0x1c>)
 800a34a:	f7fe fa45 	bl	80087d8 <HAL_SD_GetCardState>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b04      	cmp	r3, #4
 800a352:	bf14      	ite	ne
 800a354:	2301      	movne	r3, #1
 800a356:	2300      	moveq	r3, #0
 800a358:	b2db      	uxtb	r3, r3
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	20004784 	.word	0x20004784

0800a364 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	4803      	ldr	r0, [pc, #12]	@ (800a37c <BSP_SD_GetCardInfo+0x18>)
 800a370:	f7fe fa06 	bl	8008780 <HAL_SD_GetCardInfo>
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20004784 	.word	0x20004784

0800a380 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a388:	f000 f818 	bl	800a3bc <BSP_SD_AbortCallback>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a39c:	f000 f9c4 	bl	800a728 <BSP_SD_WriteCpltCallback>
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a3b0:	f000 f9c8 	bl	800a744 <BSP_SD_ReadCpltCallback>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0

}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a3d4:	f000 f80c 	bl	800a3f0 <BSP_PlatformIsDetected>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	b2db      	uxtb	r3, r3
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a3fe:	4806      	ldr	r0, [pc, #24]	@ (800a418 <BSP_PlatformIsDetected+0x28>)
 800a400:	f7fa fe16 	bl	8005030 <HAL_GPIO_ReadPin>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a40a:	2300      	movs	r3, #0
 800a40c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a40e:	79fb      	ldrb	r3, [r7, #7]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40022000 	.word	0x40022000

0800a41c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a424:	f000 fa34 	bl	800a890 <osKernelSysTick>
 800a428:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a42a:	e006      	b.n	800a43a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a42c:	f7ff ff8a 	bl	800a344 <BSP_SD_GetCardState>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a436:	2300      	movs	r3, #0
 800a438:	e009      	b.n	800a44e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a43a:	f000 fa29 	bl	800a890 <osKernelSysTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d8f0      	bhi.n	800a42c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a462:	4b0b      	ldr	r3, [pc, #44]	@ (800a490 <SD_CheckStatus+0x38>)
 800a464:	2201      	movs	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a468:	f7ff ff6c 	bl	800a344 <BSP_SD_GetCardState>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d107      	bne.n	800a482 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a472:	4b07      	ldr	r3, [pc, #28]	@ (800a490 <SD_CheckStatus+0x38>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f023 0301 	bic.w	r3, r3, #1
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <SD_CheckStatus+0x38>)
 800a480:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a482:	4b03      	ldr	r3, [pc, #12]	@ (800a490 <SD_CheckStatus+0x38>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b2db      	uxtb	r3, r3
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20000041 	.word	0x20000041

0800a494 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a49e:	4b20      	ldr	r3, [pc, #128]	@ (800a520 <SD_initialize+0x8c>)
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a4a4:	f000 f9e8 	bl	800a878 <osKernelRunning>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d030      	beq.n	800a510 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a4ae:	f7ff fefd 	bl	800a2ac <BSP_SD_Init>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d107      	bne.n	800a4c8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff ffcc 	bl	800a458 <SD_CheckStatus>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	4b16      	ldr	r3, [pc, #88]	@ (800a520 <SD_initialize+0x8c>)
 800a4c6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a4c8:	4b15      	ldr	r3, [pc, #84]	@ (800a520 <SD_initialize+0x8c>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d01e      	beq.n	800a510 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a4d2:	4b14      	ldr	r3, [pc, #80]	@ (800a524 <SD_initialize+0x90>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10e      	bne.n	800a4f8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a4da:	4b13      	ldr	r3, [pc, #76]	@ (800a528 <SD_initialize+0x94>)
 800a4dc:	f107 0408 	add.w	r4, r7, #8
 800a4e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a4e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fa3f 	bl	800a970 <osMessageCreate>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a524 <SD_initialize+0x90>)
 800a4f6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a524 <SD_initialize+0x90>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d107      	bne.n	800a510 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a500:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <SD_initialize+0x8c>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f043 0301 	orr.w	r3, r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	4b04      	ldr	r3, [pc, #16]	@ (800a520 <SD_initialize+0x8c>)
 800a50e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a510:	4b03      	ldr	r3, [pc, #12]	@ (800a520 <SD_initialize+0x8c>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b2db      	uxtb	r3, r3
}
 800a516:	4618      	mov	r0, r3
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd90      	pop	{r4, r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000041 	.word	0x20000041
 800a524:	200049fc 	.word	0x200049fc
 800a528:	0800d994 	.word	0x0800d994

0800a52c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff ff8d 	bl	800a458 <SD_CheckStatus>
 800a53e:	4603      	mov	r3, r0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	@ 0x28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a55e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a562:	f7ff ff5b 	bl	800a41c <SD_CheckStatusWithTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	da02      	bge.n	800a572 <SD_read+0x2a>
  {
    return res;
 800a56c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a570:	e032      	b.n	800a5d8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	6879      	ldr	r1, [r7, #4]
 800a576:	68b8      	ldr	r0, [r7, #8]
 800a578:	f7ff feb0 	bl	800a2dc <BSP_SD_ReadBlocks_DMA>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800a582:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a586:	2b00      	cmp	r3, #0
 800a588:	d124      	bne.n	800a5d4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a58a:	4b15      	ldr	r3, [pc, #84]	@ (800a5e0 <SD_read+0x98>)
 800a58c:	6819      	ldr	r1, [r3, #0]
 800a58e:	f107 0314 	add.w	r3, r7, #20
 800a592:	f247 5230 	movw	r2, #30000	@ 0x7530
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fa52 	bl	800aa40 <osMessageGet>

    if (event.status == osEventMessage)
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d118      	bne.n	800a5d4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d115      	bne.n	800a5d4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800a5a8:	f000 f972 	bl	800a890 <osKernelSysTick>
 800a5ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a5ae:	e008      	b.n	800a5c2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5b0:	f7ff fec8 	bl	800a344 <BSP_SD_GetCardState>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d103      	bne.n	800a5c2 <SD_read+0x7a>
              {
                res = RES_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a5c0:	e008      	b.n	800a5d4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a5c2:	f000 f965 	bl	800a890 <osKernelSysTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d9ed      	bls.n	800a5b0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3728      	adds	r7, #40	@ 0x28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	200049fc 	.word	0x200049fc

0800a5e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	@ 0x28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a5fa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a5fe:	f7ff ff0d 	bl	800a41c <SD_CheckStatusWithTimeout>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	da02      	bge.n	800a60e <SD_write+0x2a>
  {
    return res;
 800a608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a60c:	e02e      	b.n	800a66c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	68b8      	ldr	r0, [r7, #8]
 800a614:	f7ff fe7c 	bl	800a310 <BSP_SD_WriteBlocks_DMA>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d124      	bne.n	800a668 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a61e:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <SD_write+0x90>)
 800a620:	6819      	ldr	r1, [r3, #0]
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	f247 5230 	movw	r2, #30000	@ 0x7530
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fa08 	bl	800aa40 <osMessageGet>

    if (event.status == osEventMessage)
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2b10      	cmp	r3, #16
 800a634:	d118      	bne.n	800a668 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d115      	bne.n	800a668 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800a63c:	f000 f928 	bl	800a890 <osKernelSysTick>
 800a640:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a642:	e008      	b.n	800a656 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a644:	f7ff fe7e 	bl	800a344 <BSP_SD_GetCardState>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <SD_write+0x72>
          {
            res = RES_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a654:	e008      	b.n	800a668 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a656:	f000 f91b 	bl	800a890 <osKernelSysTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a664:	4293      	cmp	r3, r2
 800a666:	d9ed      	bls.n	800a644 <SD_write+0x60>
    }

  }
#endif

  return res;
 800a668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3728      	adds	r7, #40	@ 0x28
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	200049fc 	.word	0x200049fc

0800a678 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08c      	sub	sp, #48	@ 0x30
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	603a      	str	r2, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
 800a684:	460b      	mov	r3, r1
 800a686:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a68e:	4b25      	ldr	r3, [pc, #148]	@ (800a724 <SD_ioctl+0xac>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <SD_ioctl+0x28>
 800a69c:	2303      	movs	r3, #3
 800a69e:	e03c      	b.n	800a71a <SD_ioctl+0xa2>

  switch (cmd)
 800a6a0:	79bb      	ldrb	r3, [r7, #6]
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d834      	bhi.n	800a710 <SD_ioctl+0x98>
 800a6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <SD_ioctl+0x34>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a6bd 	.word	0x0800a6bd
 800a6b0:	0800a6c5 	.word	0x0800a6c5
 800a6b4:	0800a6dd 	.word	0x0800a6dd
 800a6b8:	0800a6f7 	.word	0x0800a6f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a6c2:	e028      	b.n	800a716 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6c4:	f107 030c 	add.w	r3, r7, #12
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff fe4b 	bl	800a364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a6da:	e01c      	b.n	800a716 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fe3f 	bl	800a364 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a6f4:	e00f      	b.n	800a716 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6f6:	f107 030c 	add.w	r3, r7, #12
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fe32 	bl	800a364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	0a5a      	lsrs	r2, r3, #9
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a70e:	e002      	b.n	800a716 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a710:	2304      	movs	r3, #4
 800a712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3730      	adds	r7, #48	@ 0x30
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000041 	.word	0x20000041

0800a728 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <BSP_SD_WriteCpltCallback+0x18>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2200      	movs	r2, #0
 800a732:	2102      	movs	r1, #2
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f943 	bl	800a9c0 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800a73a:	bf00      	nop
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200049fc 	.word	0x200049fc

0800a744 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800a748:	4b04      	ldr	r3, [pc, #16]	@ (800a75c <BSP_SD_ReadCpltCallback+0x18>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2200      	movs	r2, #0
 800a74e:	2101      	movs	r1, #1
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f935 	bl	800a9c0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800a756:	bf00      	nop
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	200049fc 	.word	0x200049fc

0800a760 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4613      	mov	r3, r2
 800a76c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a76e:	2301      	movs	r3, #1
 800a770:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a776:	4b1f      	ldr	r3, [pc, #124]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a778:	7a5b      	ldrb	r3, [r3, #9]
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d131      	bne.n	800a7e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a780:	4b1c      	ldr	r3, [pc, #112]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a782:	7a5b      	ldrb	r3, [r3, #9]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	461a      	mov	r2, r3
 800a788:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a78a:	2100      	movs	r1, #0
 800a78c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a78e:	4b19      	ldr	r3, [pc, #100]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a790:	7a5b      	ldrb	r3, [r3, #9]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4a17      	ldr	r2, [pc, #92]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a79e:	4b15      	ldr	r3, [pc, #84]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a7a0:	7a5b      	ldrb	r3, [r3, #9]
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b13      	ldr	r3, [pc, #76]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a7a8:	4413      	add	r3, r2
 800a7aa:	79fa      	ldrb	r2, [r7, #7]
 800a7ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a7ae:	4b11      	ldr	r3, [pc, #68]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a7b0:	7a5b      	ldrb	r3, [r3, #9]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	b2d1      	uxtb	r1, r2
 800a7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a7f4 <FATFS_LinkDriverEx+0x94>)
 800a7ba:	7251      	strb	r1, [r2, #9]
 800a7bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a7be:	7dbb      	ldrb	r3, [r7, #22]
 800a7c0:	3330      	adds	r3, #48	@ 0x30
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	223a      	movs	r2, #58	@ 0x3a
 800a7ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	222f      	movs	r2, #47	@ 0x2f
 800a7d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	3303      	adds	r3, #3
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20004a00 	.word	0x20004a00

0800a7f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a802:	2200      	movs	r2, #0
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff ffaa 	bl	800a760 <FATFS_LinkDriverEx>
 800a80c:	4603      	mov	r3, r0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	4603      	mov	r3, r0
 800a81e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a828:	2b84      	cmp	r3, #132	@ 0x84
 800a82a:	d005      	beq.n	800a838 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a82c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4413      	add	r3, r2
 800a834:	3303      	adds	r3, #3
 800a836:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a838:	68fb      	ldr	r3, [r7, #12]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a84c:	f3ef 8305 	mrs	r3, IPSR
 800a850:	607b      	str	r3, [r7, #4]
  return(result);
 800a852:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a854:	2b00      	cmp	r3, #0
 800a856:	bf14      	ite	ne
 800a858:	2301      	movne	r3, #1
 800a85a:	2300      	moveq	r3, #0
 800a85c:	b2db      	uxtb	r3, r3
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a86e:	f001 f983 	bl	800bb78 <vTaskStartScheduler>
  
  return osOK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	bd80      	pop	{r7, pc}

0800a878 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a87c:	f001 fdd2 	bl	800c424 <xTaskGetSchedulerState>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <osKernelRunning+0x12>
    return 0;
 800a886:	2300      	movs	r3, #0
 800a888:	e000      	b.n	800a88c <osKernelRunning+0x14>
  else
    return 1;
 800a88a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a894:	f7ff ffd7 	bl	800a846 <inHandlerMode>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a89e:	f001 fa97 	bl	800bdd0 <xTaskGetTickCountFromISR>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	e002      	b.n	800a8ac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a8a6:	f001 fa83 	bl	800bdb0 <xTaskGetTickCount>
 800a8aa:	4603      	mov	r3, r0
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b2:	b089      	sub	sp, #36	@ 0x24
 800a8b4:	af04      	add	r7, sp, #16
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d020      	beq.n	800a904 <osThreadCreate+0x54>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d01c      	beq.n	800a904 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685c      	ldr	r4, [r3, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	691e      	ldr	r6, [r3, #16]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff ff9a 	bl	800a816 <makeFreeRtosPriority>
 800a8e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8ec:	9202      	str	r2, [sp, #8]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	9100      	str	r1, [sp, #0]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 ff4d 	bl	800b798 <xTaskCreateStatic>
 800a8fe:	4603      	mov	r3, r0
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e01c      	b.n	800a93e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685c      	ldr	r4, [r3, #4]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a910:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff ff7c 	bl	800a816 <makeFreeRtosPriority>
 800a91e:	4602      	mov	r2, r0
 800a920:	f107 030c 	add.w	r3, r7, #12
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	9200      	str	r2, [sp, #0]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	4632      	mov	r2, r6
 800a92c:	4629      	mov	r1, r5
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 ff98 	bl	800b864 <xTaskCreate>
 800a934:	4603      	mov	r3, r0
 800a936:	2b01      	cmp	r3, #1
 800a938:	d001      	beq.n	800a93e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e000      	b.n	800a940 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a93e:	68fb      	ldr	r3, [r7, #12]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a948 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <osDelay+0x16>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	e000      	b.n	800a960 <osDelay+0x18>
 800a95e:	2301      	movs	r3, #1
 800a960:	4618      	mov	r0, r3
 800a962:	f001 f8d1 	bl	800bb08 <vTaskDelay>
  
  return osOK;
 800a966:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	b085      	sub	sp, #20
 800a974:	af02      	add	r7, sp, #8
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d011      	beq.n	800a9a6 <osMessageCreate+0x36>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00d      	beq.n	800a9a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6818      	ldr	r0, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6859      	ldr	r1, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689a      	ldr	r2, [r3, #8]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	2400      	movs	r4, #0
 800a99c:	9400      	str	r4, [sp, #0]
 800a99e:	f000 f9e3 	bl	800ad68 <xQueueGenericCreateStatic>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	e008      	b.n	800a9b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f000 fa60 	bl	800ae76 <xQueueGenericCreate>
 800a9b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd90      	pop	{r4, r7, pc}

0800a9c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <osMessagePut+0x1e>
    ticks = 1;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a9de:	f7ff ff32 	bl	800a846 <inHandlerMode>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d018      	beq.n	800aa1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a9e8:	f107 0210 	add.w	r2, r7, #16
 800a9ec:	f107 0108 	add.w	r1, r7, #8
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fbac 	bl	800b150 <xQueueGenericSendFromISR>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d001      	beq.n	800aa02 <osMessagePut+0x42>
      return osErrorOS;
 800a9fe:	23ff      	movs	r3, #255	@ 0xff
 800aa00:	e018      	b.n	800aa34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d014      	beq.n	800aa32 <osMessagePut+0x72>
 800aa08:	4b0c      	ldr	r3, [pc, #48]	@ (800aa3c <osMessagePut+0x7c>)
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	e00b      	b.n	800aa32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aa1a:	f107 0108 	add.w	r1, r7, #8
 800aa1e:	2300      	movs	r3, #0
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 fa8a 	bl	800af3c <xQueueGenericSend>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d001      	beq.n	800aa32 <osMessagePut+0x72>
      return osErrorOS;
 800aa2e:	23ff      	movs	r3, #255	@ 0xff
 800aa30:	e000      	b.n	800aa34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	e000ed04 	.word	0xe000ed04

0800aa40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b08b      	sub	sp, #44	@ 0x2c
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10a      	bne.n	800aa70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aa5a:	2380      	movs	r3, #128	@ 0x80
 800aa5c:	617b      	str	r3, [r7, #20]
    return event;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	461c      	mov	r4, r3
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa6e:	e054      	b.n	800ab1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d103      	bne.n	800aa88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aa80:	f04f 33ff 	mov.w	r3, #4294967295
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa86:	e009      	b.n	800aa9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d006      	beq.n	800aa9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <osMessageGet+0x5c>
      ticks = 1;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aa9c:	f7ff fed3 	bl	800a846 <inHandlerMode>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01c      	beq.n	800aae0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aaa6:	f107 0220 	add.w	r2, r7, #32
 800aaaa:	f107 0314 	add.w	r3, r7, #20
 800aaae:	3304      	adds	r3, #4
 800aab0:	4619      	mov	r1, r3
 800aab2:	68b8      	ldr	r0, [r7, #8]
 800aab4:	f000 fcd8 	bl	800b468 <xQueueReceiveFromISR>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d102      	bne.n	800aac4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aabe:	2310      	movs	r3, #16
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	e001      	b.n	800aac8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01d      	beq.n	800ab0a <osMessageGet+0xca>
 800aace:	4b15      	ldr	r3, [pc, #84]	@ (800ab24 <osMessageGet+0xe4>)
 800aad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	e014      	b.n	800ab0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aae0:	f107 0314 	add.w	r3, r7, #20
 800aae4:	3304      	adds	r3, #4
 800aae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae8:	4619      	mov	r1, r3
 800aaea:	68b8      	ldr	r0, [r7, #8]
 800aaec:	f000 fbd4 	bl	800b298 <xQueueReceive>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d102      	bne.n	800aafc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aaf6:	2310      	movs	r3, #16
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	e006      	b.n	800ab0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <osMessageGet+0xc6>
 800ab02:	2300      	movs	r3, #0
 800ab04:	e000      	b.n	800ab08 <osMessageGet+0xc8>
 800ab06:	2340      	movs	r3, #64	@ 0x40
 800ab08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	461c      	mov	r4, r3
 800ab0e:	f107 0314 	add.w	r3, r7, #20
 800ab12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	372c      	adds	r7, #44	@ 0x2c
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd90      	pop	{r4, r7, pc}
 800ab22:	bf00      	nop
 800ab24:	e000ed04 	.word	0xe000ed04

0800ab28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f103 0208 	add.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f103 0208 	add.w	r2, r3, #8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f103 0208 	add.w	r2, r3, #8
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	601a      	str	r2, [r3, #0]
}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d103      	bne.n	800abea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e00c      	b.n	800ac04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3308      	adds	r3, #8
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e002      	b.n	800abf8 <vListInsert+0x2e>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d2f6      	bcs.n	800abf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	6892      	ldr	r2, [r2, #8]
 800ac52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6852      	ldr	r2, [r2, #4]
 800ac5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d103      	bne.n	800ac70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689a      	ldr	r2, [r3, #8]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	1e5a      	subs	r2, r3, #1
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10d      	bne.n	800acc0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca8:	b672      	cpsid	i
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	b662      	cpsie	i
 800acb8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800acc0:	f001 fdcc 	bl	800c85c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800accc:	68f9      	ldr	r1, [r7, #12]
 800acce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf0:	3b01      	subs	r3, #1
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acf6:	fb01 f303 	mul.w	r3, r1, r3
 800acfa:	441a      	add	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	22ff      	movs	r2, #255	@ 0xff
 800ad04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	22ff      	movs	r2, #255	@ 0xff
 800ad0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d114      	bne.n	800ad40 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d01a      	beq.n	800ad54 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3310      	adds	r3, #16
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 f9b0 	bl	800c088 <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d012      	beq.n	800ad54 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad64 <xQueueGenericReset+0xd4>)
 800ad30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	e009      	b.n	800ad54 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3310      	adds	r3, #16
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff feef 	bl	800ab28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3324      	adds	r3, #36	@ 0x24
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff feea 	bl	800ab28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad54:	f001 fdb8 	bl	800c8c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad58:	2301      	movs	r3, #1
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	@ 0x38
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10d      	bne.n	800ad98 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad80:	b672      	cpsid	i
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	b662      	cpsie	i
 800ad90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10d      	bne.n	800adba <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	b672      	cpsid	i
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	b662      	cpsie	i
 800adb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	e7fd      	b.n	800adb6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <xQueueGenericCreateStatic+0x5e>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <xQueueGenericCreateStatic+0x62>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <xQueueGenericCreateStatic+0x64>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10d      	bne.n	800adec <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	b672      	cpsid	i
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	b662      	cpsie	i
 800ade4:	623b      	str	r3, [r7, #32]
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	e7fd      	b.n	800ade8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <xQueueGenericCreateStatic+0x90>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <xQueueGenericCreateStatic+0x94>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e000      	b.n	800adfe <xQueueGenericCreateStatic+0x96>
 800adfc:	2300      	movs	r3, #0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10d      	bne.n	800ae1e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae06:	b672      	cpsid	i
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	b662      	cpsie	i
 800ae16:	61fb      	str	r3, [r7, #28]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae1e:	2348      	movs	r3, #72	@ 0x48
 800ae20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b48      	cmp	r3, #72	@ 0x48
 800ae26:	d00d      	beq.n	800ae44 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	b672      	cpsid	i
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	b662      	cpsie	i
 800ae3c:	61bb      	str	r3, [r7, #24]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 f848 	bl	800aefc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3730      	adds	r7, #48	@ 0x30
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b08a      	sub	sp, #40	@ 0x28
 800ae7a:	af02      	add	r7, sp, #8
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	4613      	mov	r3, r2
 800ae82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10d      	bne.n	800aea6 <xQueueGenericCreate+0x30>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8e:	b672      	cpsid	i
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	b662      	cpsie	i
 800ae9e:	613b      	str	r3, [r7, #16]
}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	e7fd      	b.n	800aea2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	61fb      	str	r3, [r7, #28]
 800aeb0:	e004      	b.n	800aebc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	fb02 f303 	mul.w	r3, r2, r3
 800aeba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3348      	adds	r3, #72	@ 0x48
 800aec0:	4618      	mov	r0, r3
 800aec2:	f001 fdf9 	bl	800cab8 <pvPortMalloc>
 800aec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d011      	beq.n	800aef2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	3348      	adds	r3, #72	@ 0x48
 800aed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	4613      	mov	r3, r2
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f805 	bl	800aefc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aef2:	69bb      	ldr	r3, [r7, #24]
	}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	e002      	b.n	800af1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af2a:	2101      	movs	r1, #1
 800af2c:	69b8      	ldr	r0, [r7, #24]
 800af2e:	f7ff feaf 	bl	800ac90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08e      	sub	sp, #56	@ 0x38
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10d      	bne.n	800af74 <xQueueGenericSend+0x38>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5c:	b672      	cpsid	i
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	b662      	cpsie	i
 800af6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <xQueueGenericSend+0x46>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <xQueueGenericSend+0x4a>
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <xQueueGenericSend+0x4c>
 800af86:	2300      	movs	r3, #0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10d      	bne.n	800afa8 <xQueueGenericSend+0x6c>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	b672      	cpsid	i
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	b662      	cpsie	i
 800afa0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d103      	bne.n	800afb6 <xQueueGenericSend+0x7a>
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d101      	bne.n	800afba <xQueueGenericSend+0x7e>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <xQueueGenericSend+0x80>
 800afba:	2300      	movs	r3, #0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10d      	bne.n	800afdc <xQueueGenericSend+0xa0>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc4:	b672      	cpsid	i
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	b662      	cpsie	i
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afdc:	f001 fa22 	bl	800c424 <xTaskGetSchedulerState>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <xQueueGenericSend+0xb0>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <xQueueGenericSend+0xb4>
 800afec:	2301      	movs	r3, #1
 800afee:	e000      	b.n	800aff2 <xQueueGenericSend+0xb6>
 800aff0:	2300      	movs	r3, #0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10d      	bne.n	800b012 <xQueueGenericSend+0xd6>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affa:	b672      	cpsid	i
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	b662      	cpsie	i
 800b00a:	61fb      	str	r3, [r7, #28]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b012:	f001 fc23 	bl	800c85c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01e:	429a      	cmp	r2, r3
 800b020:	d302      	bcc.n	800b028 <xQueueGenericSend+0xec>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d129      	bne.n	800b07c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b02e:	f000 faa3 	bl	800b578 <prvCopyDataToQueue>
 800b032:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d010      	beq.n	800b05e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	3324      	adds	r3, #36	@ 0x24
 800b040:	4618      	mov	r0, r3
 800b042:	f001 f821 	bl	800c088 <xTaskRemoveFromEventList>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d013      	beq.n	800b074 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b04c:	4b3f      	ldr	r3, [pc, #252]	@ (800b14c <xQueueGenericSend+0x210>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	e00a      	b.n	800b074 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b064:	4b39      	ldr	r3, [pc, #228]	@ (800b14c <xQueueGenericSend+0x210>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b074:	f001 fc28 	bl	800c8c8 <vPortExitCritical>
				return pdPASS;
 800b078:	2301      	movs	r3, #1
 800b07a:	e063      	b.n	800b144 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d103      	bne.n	800b08a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b082:	f001 fc21 	bl	800c8c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b086:	2300      	movs	r3, #0
 800b088:	e05c      	b.n	800b144 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b090:	f107 0314 	add.w	r3, r7, #20
 800b094:	4618      	mov	r0, r3
 800b096:	f001 f85d 	bl	800c154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b09a:	2301      	movs	r3, #1
 800b09c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b09e:	f001 fc13 	bl	800c8c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0a2:	f000 fdd7 	bl	800bc54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0a6:	f001 fbd9 	bl	800c85c <vPortEnterCritical>
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0b0:	b25b      	sxtb	r3, r3
 800b0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b6:	d103      	bne.n	800b0c0 <xQueueGenericSend+0x184>
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0c6:	b25b      	sxtb	r3, r3
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0cc:	d103      	bne.n	800b0d6 <xQueueGenericSend+0x19a>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0d6:	f001 fbf7 	bl	800c8c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0da:	1d3a      	adds	r2, r7, #4
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 f84c 	bl	800c180 <xTaskCheckForTimeOut>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d124      	bne.n	800b138 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0f0:	f000 fb3a 	bl	800b768 <prvIsQueueFull>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d018      	beq.n	800b12c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f000 ff98 	bl	800c038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b10a:	f000 fac5 	bl	800b698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b10e:	f000 fdaf 	bl	800bc70 <xTaskResumeAll>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f af7c 	bne.w	800b012 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b11a:	4b0c      	ldr	r3, [pc, #48]	@ (800b14c <xQueueGenericSend+0x210>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	e772      	b.n	800b012 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b12c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b12e:	f000 fab3 	bl	800b698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b132:	f000 fd9d 	bl	800bc70 <xTaskResumeAll>
 800b136:	e76c      	b.n	800b012 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b13a:	f000 faad 	bl	800b698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b13e:	f000 fd97 	bl	800bc70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b142:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b144:	4618      	mov	r0, r3
 800b146:	3738      	adds	r7, #56	@ 0x38
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08e      	sub	sp, #56	@ 0x38
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10d      	bne.n	800b184 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16c:	b672      	cpsid	i
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	b662      	cpsie	i
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <xQueueGenericSendFromISR+0x42>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <xQueueGenericSendFromISR+0x46>
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <xQueueGenericSendFromISR+0x48>
 800b196:	2300      	movs	r3, #0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10d      	bne.n	800b1b8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a0:	b672      	cpsid	i
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	b662      	cpsie	i
 800b1b0:	623b      	str	r3, [r7, #32]
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	e7fd      	b.n	800b1b4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSendFromISR+0x76>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericSendFromISR+0x7a>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericSendFromISR+0x7c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10d      	bne.n	800b1ec <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	b672      	cpsid	i
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	b662      	cpsie	i
 800b1e4:	61fb      	str	r3, [r7, #28]
}
 800b1e6:	bf00      	nop
 800b1e8:	bf00      	nop
 800b1ea:	e7fd      	b.n	800b1e8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1ec:	f001 fc1e 	bl	800ca2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1f0:	f3ef 8211 	mrs	r2, BASEPRI
 800b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f8:	b672      	cpsid	i
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	b662      	cpsie	i
 800b208:	61ba      	str	r2, [r7, #24]
 800b20a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b20c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b218:	429a      	cmp	r2, r3
 800b21a:	d302      	bcc.n	800b222 <xQueueGenericSendFromISR+0xd2>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d12c      	bne.n	800b27c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	68b9      	ldr	r1, [r7, #8]
 800b230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b232:	f000 f9a1 	bl	800b578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b236:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d112      	bne.n	800b266 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d016      	beq.n	800b276 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	3324      	adds	r3, #36	@ 0x24
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 ff1b 	bl	800c088 <xTaskRemoveFromEventList>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00e      	beq.n	800b276 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	e007      	b.n	800b276 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b26a:	3301      	adds	r3, #1
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	b25a      	sxtb	r2, r3
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b276:	2301      	movs	r3, #1
 800b278:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b27a:	e001      	b.n	800b280 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b282:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b28a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3738      	adds	r7, #56	@ 0x38
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	@ 0x30
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10d      	bne.n	800b2ce <xQueueReceive+0x36>
	__asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b6:	b672      	cpsid	i
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	b662      	cpsie	i
 800b2c6:	623b      	str	r3, [r7, #32]
}
 800b2c8:	bf00      	nop
 800b2ca:	bf00      	nop
 800b2cc:	e7fd      	b.n	800b2ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d103      	bne.n	800b2dc <xQueueReceive+0x44>
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <xQueueReceive+0x48>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e000      	b.n	800b2e2 <xQueueReceive+0x4a>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10d      	bne.n	800b302 <xQueueReceive+0x6a>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	b672      	cpsid	i
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	b662      	cpsie	i
 800b2fa:	61fb      	str	r3, [r7, #28]
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	e7fd      	b.n	800b2fe <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b302:	f001 f88f 	bl	800c424 <xTaskGetSchedulerState>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <xQueueReceive+0x7a>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <xQueueReceive+0x7e>
 800b312:	2301      	movs	r3, #1
 800b314:	e000      	b.n	800b318 <xQueueReceive+0x80>
 800b316:	2300      	movs	r3, #0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10d      	bne.n	800b338 <xQueueReceive+0xa0>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b320:	b672      	cpsid	i
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	b662      	cpsie	i
 800b330:	61bb      	str	r3, [r7, #24]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b338:	f001 fa90 	bl	800c85c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b340:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01f      	beq.n	800b388 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b34c:	f000 f97e 	bl	800b64c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	1e5a      	subs	r2, r3, #1
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00f      	beq.n	800b380 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	3310      	adds	r3, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fe8f 	bl	800c088 <xTaskRemoveFromEventList>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b370:	4b3c      	ldr	r3, [pc, #240]	@ (800b464 <xQueueReceive+0x1cc>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b380:	f001 faa2 	bl	800c8c8 <vPortExitCritical>
				return pdPASS;
 800b384:	2301      	movs	r3, #1
 800b386:	e069      	b.n	800b45c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b38e:	f001 fa9b 	bl	800c8c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b392:	2300      	movs	r3, #0
 800b394:	e062      	b.n	800b45c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d106      	bne.n	800b3aa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b39c:	f107 0310 	add.w	r3, r7, #16
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fed7 	bl	800c154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3aa:	f001 fa8d 	bl	800c8c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ae:	f000 fc51 	bl	800bc54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3b2:	f001 fa53 	bl	800c85c <vPortEnterCritical>
 800b3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d103      	bne.n	800b3cc <xQueueReceive+0x134>
 800b3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3d2:	b25b      	sxtb	r3, r3
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d8:	d103      	bne.n	800b3e2 <xQueueReceive+0x14a>
 800b3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3e2:	f001 fa71 	bl	800c8c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3e6:	1d3a      	adds	r2, r7, #4
 800b3e8:	f107 0310 	add.w	r3, r7, #16
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fec6 	bl	800c180 <xTaskCheckForTimeOut>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d123      	bne.n	800b442 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3fc:	f000 f99e 	bl	800b73c <prvIsQueueEmpty>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d017      	beq.n	800b436 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	3324      	adds	r3, #36	@ 0x24
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fe12 	bl	800c038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b416:	f000 f93f 	bl	800b698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b41a:	f000 fc29 	bl	800bc70 <xTaskResumeAll>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d189      	bne.n	800b338 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b424:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <xQueueReceive+0x1cc>)
 800b426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	e780      	b.n	800b338 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b438:	f000 f92e 	bl	800b698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b43c:	f000 fc18 	bl	800bc70 <xTaskResumeAll>
 800b440:	e77a      	b.n	800b338 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b444:	f000 f928 	bl	800b698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b448:	f000 fc12 	bl	800bc70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b44c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b44e:	f000 f975 	bl	800b73c <prvIsQueueEmpty>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	f43f af6f 	beq.w	800b338 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b45a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3730      	adds	r7, #48	@ 0x30
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	@ 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10d      	bne.n	800b49a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	b672      	cpsid	i
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	b662      	cpsie	i
 800b492:	623b      	str	r3, [r7, #32]
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop
 800b498:	e7fd      	b.n	800b496 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d103      	bne.n	800b4a8 <xQueueReceiveFromISR+0x40>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <xQueueReceiveFromISR+0x44>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e000      	b.n	800b4ae <xQueueReceiveFromISR+0x46>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10d      	bne.n	800b4ce <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	b672      	cpsid	i
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	b662      	cpsie	i
 800b4c6:	61fb      	str	r3, [r7, #28]
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	e7fd      	b.n	800b4ca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4ce:	f001 faad 	bl	800ca2c <vPortValidateInterruptPriority>
	__asm volatile
 800b4d2:	f3ef 8211 	mrs	r2, BASEPRI
 800b4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4da:	b672      	cpsid	i
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	b662      	cpsie	i
 800b4ea:	61ba      	str	r2, [r7, #24]
 800b4ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d02f      	beq.n	800b55e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b508:	68b9      	ldr	r1, [r7, #8]
 800b50a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b50c:	f000 f89e 	bl	800b64c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	1e5a      	subs	r2, r3, #1
 800b514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b516:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b518:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b520:	d112      	bne.n	800b548 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d016      	beq.n	800b558 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	3310      	adds	r3, #16
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fdaa 	bl	800c088 <xTaskRemoveFromEventList>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00e      	beq.n	800b558 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	e007      	b.n	800b558 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b54c:	3301      	adds	r3, #1
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	b25a      	sxtb	r2, r3
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b558:	2301      	movs	r3, #1
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b55c:	e001      	b.n	800b562 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800b55e:	2300      	movs	r3, #0
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34
 800b562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b564:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f383 8811 	msr	BASEPRI, r3
}
 800b56c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b570:	4618      	mov	r0, r3
 800b572:	3738      	adds	r7, #56	@ 0x38
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b584:	2300      	movs	r3, #0
 800b586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b58c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10d      	bne.n	800b5b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d14d      	bne.n	800b63a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 ff5c 	bl	800c460 <xTaskPriorityDisinherit>
 800b5a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	609a      	str	r2, [r3, #8]
 800b5b0:	e043      	b.n	800b63a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d119      	bne.n	800b5ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6858      	ldr	r0, [r3, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	f001 ff33 	bl	800d42e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d0:	441a      	add	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d32b      	bcc.n	800b63a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	605a      	str	r2, [r3, #4]
 800b5ea:	e026      	b.n	800b63a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	68d8      	ldr	r0, [r3, #12]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	f001 ff19 	bl	800d42e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b604:	425b      	negs	r3, r3
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d207      	bcs.n	800b628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b620:	425b      	negs	r3, r3
 800b622:	441a      	add	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d105      	bne.n	800b63a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	3b01      	subs	r3, #1
 800b638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b642:	697b      	ldr	r3, [r7, #20]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d018      	beq.n	800b690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b666:	441a      	add	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	429a      	cmp	r2, r3
 800b676:	d303      	bcc.n	800b680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68d9      	ldr	r1, [r3, #12]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b688:	461a      	mov	r2, r3
 800b68a:	6838      	ldr	r0, [r7, #0]
 800b68c:	f001 fecf 	bl	800d42e <memcpy>
	}
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6a0:	f001 f8dc 	bl	800c85c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6ac:	e011      	b.n	800b6d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d012      	beq.n	800b6dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3324      	adds	r3, #36	@ 0x24
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 fce4 	bl	800c088 <xTaskRemoveFromEventList>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6c6:	f000 fdc3 	bl	800c250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dce9      	bgt.n	800b6ae <prvUnlockQueue+0x16>
 800b6da:	e000      	b.n	800b6de <prvUnlockQueue+0x46>
					break;
 800b6dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	22ff      	movs	r2, #255	@ 0xff
 800b6e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b6e6:	f001 f8ef 	bl	800c8c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6ea:	f001 f8b7 	bl	800c85c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6f6:	e011      	b.n	800b71c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d012      	beq.n	800b726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3310      	adds	r3, #16
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fcbf 	bl	800c088 <xTaskRemoveFromEventList>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b710:	f000 fd9e 	bl	800c250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	3b01      	subs	r3, #1
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b71c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dce9      	bgt.n	800b6f8 <prvUnlockQueue+0x60>
 800b724:	e000      	b.n	800b728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	22ff      	movs	r2, #255	@ 0xff
 800b72c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b730:	f001 f8ca 	bl	800c8c8 <vPortExitCritical>
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b744:	f001 f88a 	bl	800c85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	e001      	b.n	800b75a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b75a:	f001 f8b5 	bl	800c8c8 <vPortExitCritical>

	return xReturn;
 800b75e:	68fb      	ldr	r3, [r7, #12]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b770:	f001 f874 	bl	800c85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d102      	bne.n	800b786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e001      	b.n	800b78a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b78a:	f001 f89d 	bl	800c8c8 <vPortExitCritical>

	return xReturn;
 800b78e:	68fb      	ldr	r3, [r7, #12]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08e      	sub	sp, #56	@ 0x38
 800b79c:	af04      	add	r7, sp, #16
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10d      	bne.n	800b7c8 <xTaskCreateStatic+0x30>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b0:	b672      	cpsid	i
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	b662      	cpsie	i
 800b7c0:	623b      	str	r3, [r7, #32]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10d      	bne.n	800b7ea <xTaskCreateStatic+0x52>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d2:	b672      	cpsid	i
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	b662      	cpsie	i
 800b7e2:	61fb      	str	r3, [r7, #28]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7ea:	23a0      	movs	r3, #160	@ 0xa0
 800b7ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800b7f2:	d00d      	beq.n	800b810 <xTaskCreateStatic+0x78>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f8:	b672      	cpsid	i
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	b662      	cpsie	i
 800b808:	61bb      	str	r3, [r7, #24]
}
 800b80a:	bf00      	nop
 800b80c:	bf00      	nop
 800b80e:	e7fd      	b.n	800b80c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b810:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01e      	beq.n	800b856 <xTaskCreateStatic+0xbe>
 800b818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d01b      	beq.n	800b856 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b820:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b826:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82a:	2202      	movs	r2, #2
 800b82c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b830:	2300      	movs	r3, #0
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	9302      	str	r3, [sp, #8]
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 f851 	bl	800b8f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b84e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b850:	f000 f8f0 	bl	800ba34 <prvAddNewTaskToReadyList>
 800b854:	e001      	b.n	800b85a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b85a:	697b      	ldr	r3, [r7, #20]
	}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3728      	adds	r7, #40	@ 0x28
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08c      	sub	sp, #48	@ 0x30
 800b868:	af04      	add	r7, sp, #16
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4618      	mov	r0, r3
 800b87a:	f001 f91d 	bl	800cab8 <pvPortMalloc>
 800b87e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b886:	20a0      	movs	r0, #160	@ 0xa0
 800b888:	f001 f916 	bl	800cab8 <pvPortMalloc>
 800b88c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	631a      	str	r2, [r3, #48]	@ 0x30
 800b89a:	e005      	b.n	800b8a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b89c:	6978      	ldr	r0, [r7, #20]
 800b89e:	f001 f9d9 	bl	800cc54 <vPortFree>
 800b8a2:	e001      	b.n	800b8a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d017      	beq.n	800b8de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8b6:	88fa      	ldrh	r2, [r7, #6]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9303      	str	r3, [sp, #12]
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	9302      	str	r3, [sp, #8]
 800b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f000 f80f 	bl	800b8f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8d2:	69f8      	ldr	r0, [r7, #28]
 800b8d4:	f000 f8ae 	bl	800ba34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	61bb      	str	r3, [r7, #24]
 800b8dc:	e002      	b.n	800b8e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8de:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
	}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b902:	6879      	ldr	r1, [r7, #4]
 800b904:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b908:	440b      	add	r3, r1
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	f023 0307 	bic.w	r3, r3, #7
 800b916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00d      	beq.n	800b93e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b926:	b672      	cpsid	i
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	b662      	cpsie	i
 800b936:	617b      	str	r3, [r7, #20]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01f      	beq.n	800b984 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e012      	b.n	800b970 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	7819      	ldrb	r1, [r3, #0]
 800b952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	4413      	add	r3, r2
 800b958:	3334      	adds	r3, #52	@ 0x34
 800b95a:	460a      	mov	r2, r1
 800b95c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	4413      	add	r3, r2
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d006      	beq.n	800b978 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	3301      	adds	r3, #1
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	2b0f      	cmp	r3, #15
 800b974:	d9e9      	bls.n	800b94a <prvInitialiseNewTask+0x5a>
 800b976:	e000      	b.n	800b97a <prvInitialiseNewTask+0x8a>
			{
				break;
 800b978:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b982:	e003      	b.n	800b98c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98e:	2b06      	cmp	r3, #6
 800b990:	d901      	bls.n	800b996 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b992:	2306      	movs	r3, #6
 800b994:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b99a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff f8db 	bl	800ab68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff f8d6 	bl	800ab68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c4:	f1c3 0207 	rsb	r2, r3, #7
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	334c      	adds	r3, #76	@ 0x4c
 800b9e6:	224c      	movs	r2, #76	@ 0x4c
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 fc46 	bl	800d27c <memset>
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f2:	4a0d      	ldr	r2, [pc, #52]	@ (800ba28 <prvInitialiseNewTask+0x138>)
 800b9f4:	651a      	str	r2, [r3, #80]	@ 0x50
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	4a0c      	ldr	r2, [pc, #48]	@ (800ba2c <prvInitialiseNewTask+0x13c>)
 800b9fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800ba30 <prvInitialiseNewTask+0x140>)
 800ba00:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	68f9      	ldr	r1, [r7, #12]
 800ba06:	69b8      	ldr	r0, [r7, #24]
 800ba08:	f000 fe1c 	bl	800c644 <pxPortInitialiseStack>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba1e:	bf00      	nop
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20010b58 	.word	0x20010b58
 800ba2c:	20010bc0 	.word	0x20010bc0
 800ba30:	20010c28 	.word	0x20010c28

0800ba34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba3c:	f000 ff0e 	bl	800c85c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba40:	4b2a      	ldr	r3, [pc, #168]	@ (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3301      	adds	r3, #1
 800ba46:	4a29      	ldr	r2, [pc, #164]	@ (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba4a:	4b29      	ldr	r3, [pc, #164]	@ (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba52:	4a27      	ldr	r2, [pc, #156]	@ (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba58:	4b24      	ldr	r3, [pc, #144]	@ (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d110      	bne.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba60:	f000 fc1a 	bl	800c298 <prvInitialiseTaskLists>
 800ba64:	e00d      	b.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba66:	4b23      	ldr	r3, [pc, #140]	@ (800baf4 <prvAddNewTaskToReadyList+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d109      	bne.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba6e:	4b20      	ldr	r3, [pc, #128]	@ (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d802      	bhi.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba7c:	4a1c      	ldr	r2, [pc, #112]	@ (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba82:	4b1d      	ldr	r3, [pc, #116]	@ (800baf8 <prvAddNewTaskToReadyList+0xc4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	4a1b      	ldr	r2, [pc, #108]	@ (800baf8 <prvAddNewTaskToReadyList+0xc4>)
 800ba8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba90:	2201      	movs	r2, #1
 800ba92:	409a      	lsls	r2, r3
 800ba94:	4b19      	ldr	r3, [pc, #100]	@ (800bafc <prvAddNewTaskToReadyList+0xc8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	4a18      	ldr	r2, [pc, #96]	@ (800bafc <prvAddNewTaskToReadyList+0xc8>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4a15      	ldr	r2, [pc, #84]	@ (800bb00 <prvAddNewTaskToReadyList+0xcc>)
 800baac:	441a      	add	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7ff f864 	bl	800ab82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baba:	f000 ff05 	bl	800c8c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800babe:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <prvAddNewTaskToReadyList+0xc0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00e      	beq.n	800bae4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bac6:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d207      	bcs.n	800bae4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bad4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb04 <prvAddNewTaskToReadyList+0xd0>)
 800bad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20004b0c 	.word	0x20004b0c
 800baf0:	20004a0c 	.word	0x20004a0c
 800baf4:	20004b18 	.word	0x20004b18
 800baf8:	20004b28 	.word	0x20004b28
 800bafc:	20004b14 	.word	0x20004b14
 800bb00:	20004a10 	.word	0x20004a10
 800bb04:	e000ed04 	.word	0xe000ed04

0800bb08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01a      	beq.n	800bb50 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb1a:	4b15      	ldr	r3, [pc, #84]	@ (800bb70 <vTaskDelay+0x68>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00d      	beq.n	800bb3e <vTaskDelay+0x36>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	b672      	cpsid	i
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	b662      	cpsie	i
 800bb36:	60bb      	str	r3, [r7, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bb3e:	f000 f889 	bl	800bc54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb42:	2100      	movs	r1, #0
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fd17 	bl	800c578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb4a:	f000 f891 	bl	800bc70 <xTaskResumeAll>
 800bb4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d107      	bne.n	800bb66 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800bb56:	4b07      	ldr	r3, [pc, #28]	@ (800bb74 <vTaskDelay+0x6c>)
 800bb58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb66:	bf00      	nop
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20004b34 	.word	0x20004b34
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08a      	sub	sp, #40	@ 0x28
 800bb7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb86:	463a      	mov	r2, r7
 800bb88:	1d39      	adds	r1, r7, #4
 800bb8a:	f107 0308 	add.w	r3, r7, #8
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f5 f87c 	bl	8000c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	9202      	str	r2, [sp, #8]
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	2300      	movs	r3, #0
 800bba4:	460a      	mov	r2, r1
 800bba6:	4923      	ldr	r1, [pc, #140]	@ (800bc34 <vTaskStartScheduler+0xbc>)
 800bba8:	4823      	ldr	r0, [pc, #140]	@ (800bc38 <vTaskStartScheduler+0xc0>)
 800bbaa:	f7ff fdf5 	bl	800b798 <xTaskCreateStatic>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4a22      	ldr	r2, [pc, #136]	@ (800bc3c <vTaskStartScheduler+0xc4>)
 800bbb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbb4:	4b21      	ldr	r3, [pc, #132]	@ (800bc3c <vTaskStartScheduler+0xc4>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	e001      	b.n	800bbc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d11d      	bne.n	800bc08 <vTaskStartScheduler+0x90>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd0:	b672      	cpsid	i
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	b662      	cpsie	i
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbe4:	4b16      	ldr	r3, [pc, #88]	@ (800bc40 <vTaskStartScheduler+0xc8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	334c      	adds	r3, #76	@ 0x4c
 800bbea:	4a16      	ldr	r2, [pc, #88]	@ (800bc44 <vTaskStartScheduler+0xcc>)
 800bbec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbee:	4b16      	ldr	r3, [pc, #88]	@ (800bc48 <vTaskStartScheduler+0xd0>)
 800bbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbf6:	4b15      	ldr	r3, [pc, #84]	@ (800bc4c <vTaskStartScheduler+0xd4>)
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbfc:	4b14      	ldr	r3, [pc, #80]	@ (800bc50 <vTaskStartScheduler+0xd8>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc02:	f000 fdad 	bl	800c760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc06:	e011      	b.n	800bc2c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	d10d      	bne.n	800bc2c <vTaskStartScheduler+0xb4>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	b672      	cpsid	i
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	b662      	cpsie	i
 800bc24:	60fb      	str	r3, [r7, #12]
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	e7fd      	b.n	800bc28 <vTaskStartScheduler+0xb0>
}
 800bc2c:	bf00      	nop
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0800d9a4 	.word	0x0800d9a4
 800bc38:	0800c269 	.word	0x0800c269
 800bc3c:	20004b30 	.word	0x20004b30
 800bc40:	20004a0c 	.word	0x20004a0c
 800bc44:	20000054 	.word	0x20000054
 800bc48:	20004b2c 	.word	0x20004b2c
 800bc4c:	20004b18 	.word	0x20004b18
 800bc50:	20004b10 	.word	0x20004b10

0800bc54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bc58:	4b04      	ldr	r3, [pc, #16]	@ (800bc6c <vTaskSuspendAll+0x18>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	4a03      	ldr	r2, [pc, #12]	@ (800bc6c <vTaskSuspendAll+0x18>)
 800bc60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bc62:	bf00      	nop
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	20004b34 	.word	0x20004b34

0800bc70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc7e:	4b43      	ldr	r3, [pc, #268]	@ (800bd8c <xTaskResumeAll+0x11c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10d      	bne.n	800bca2 <xTaskResumeAll+0x32>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8a:	b672      	cpsid	i
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	b662      	cpsie	i
 800bc9a:	603b      	str	r3, [r7, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	bf00      	nop
 800bca0:	e7fd      	b.n	800bc9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bca2:	f000 fddb 	bl	800c85c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bca6:	4b39      	ldr	r3, [pc, #228]	@ (800bd8c <xTaskResumeAll+0x11c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	4a37      	ldr	r2, [pc, #220]	@ (800bd8c <xTaskResumeAll+0x11c>)
 800bcae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb0:	4b36      	ldr	r3, [pc, #216]	@ (800bd8c <xTaskResumeAll+0x11c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d161      	bne.n	800bd7c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcb8:	4b35      	ldr	r3, [pc, #212]	@ (800bd90 <xTaskResumeAll+0x120>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d05d      	beq.n	800bd7c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcc0:	e02e      	b.n	800bd20 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc2:	4b34      	ldr	r3, [pc, #208]	@ (800bd94 <xTaskResumeAll+0x124>)
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3318      	adds	r3, #24
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe ffb4 	bl	800ac3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe ffaf 	bl	800ac3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce2:	2201      	movs	r2, #1
 800bce4:	409a      	lsls	r2, r3
 800bce6:	4b2c      	ldr	r3, [pc, #176]	@ (800bd98 <xTaskResumeAll+0x128>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	4a2a      	ldr	r2, [pc, #168]	@ (800bd98 <xTaskResumeAll+0x128>)
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4a27      	ldr	r2, [pc, #156]	@ (800bd9c <xTaskResumeAll+0x12c>)
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f7fe ff3b 	bl	800ab82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd10:	4b23      	ldr	r3, [pc, #140]	@ (800bda0 <xTaskResumeAll+0x130>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d302      	bcc.n	800bd20 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bd1a:	4b22      	ldr	r3, [pc, #136]	@ (800bda4 <xTaskResumeAll+0x134>)
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd20:	4b1c      	ldr	r3, [pc, #112]	@ (800bd94 <xTaskResumeAll+0x124>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1cc      	bne.n	800bcc2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd2e:	f000 fb59 	bl	800c3e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd32:	4b1d      	ldr	r3, [pc, #116]	@ (800bda8 <xTaskResumeAll+0x138>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d010      	beq.n	800bd60 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd3e:	f000 f859 	bl	800bdf4 <xTaskIncrementTick>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800bd48:	4b16      	ldr	r3, [pc, #88]	@ (800bda4 <xTaskResumeAll+0x134>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1f1      	bne.n	800bd3e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800bd5a:	4b13      	ldr	r3, [pc, #76]	@ (800bda8 <xTaskResumeAll+0x138>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd60:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <xTaskResumeAll+0x134>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d009      	beq.n	800bd7c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <xTaskResumeAll+0x13c>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd7c:	f000 fda4 	bl	800c8c8 <vPortExitCritical>

	return xAlreadyYielded;
 800bd80:	68bb      	ldr	r3, [r7, #8]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20004b34 	.word	0x20004b34
 800bd90:	20004b0c 	.word	0x20004b0c
 800bd94:	20004acc 	.word	0x20004acc
 800bd98:	20004b14 	.word	0x20004b14
 800bd9c:	20004a10 	.word	0x20004a10
 800bda0:	20004a0c 	.word	0x20004a0c
 800bda4:	20004b20 	.word	0x20004b20
 800bda8:	20004b1c 	.word	0x20004b1c
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdb6:	4b05      	ldr	r3, [pc, #20]	@ (800bdcc <xTaskGetTickCount+0x1c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bdbc:	687b      	ldr	r3, [r7, #4]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20004b10 	.word	0x20004b10

0800bdd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdd6:	f000 fe29 	bl	800ca2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bdda:	2300      	movs	r3, #0
 800bddc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bdde:	4b04      	ldr	r3, [pc, #16]	@ (800bdf0 <xTaskGetTickCountFromISR+0x20>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bde4:	683b      	ldr	r3, [r7, #0]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20004b10 	.word	0x20004b10

0800bdf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfe:	4b50      	ldr	r3, [pc, #320]	@ (800bf40 <xTaskIncrementTick+0x14c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 808b 	bne.w	800bf1e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be08:	4b4e      	ldr	r3, [pc, #312]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be10:	4a4c      	ldr	r2, [pc, #304]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d123      	bne.n	800be64 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800be1c:	4b4a      	ldr	r3, [pc, #296]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00d      	beq.n	800be42 <xTaskIncrementTick+0x4e>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	b672      	cpsid	i
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	b662      	cpsie	i
 800be3a:	603b      	str	r3, [r7, #0]
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	e7fd      	b.n	800be3e <xTaskIncrementTick+0x4a>
 800be42:	4b41      	ldr	r3, [pc, #260]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	4b40      	ldr	r3, [pc, #256]	@ (800bf4c <xTaskIncrementTick+0x158>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	4a3e      	ldr	r2, [pc, #248]	@ (800bf4c <xTaskIncrementTick+0x158>)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	4b3e      	ldr	r3, [pc, #248]	@ (800bf50 <xTaskIncrementTick+0x15c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3301      	adds	r3, #1
 800be5c:	4a3c      	ldr	r2, [pc, #240]	@ (800bf50 <xTaskIncrementTick+0x15c>)
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	f000 fac0 	bl	800c3e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be64:	4b3b      	ldr	r3, [pc, #236]	@ (800bf54 <xTaskIncrementTick+0x160>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d348      	bcc.n	800bf00 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be6e:	4b36      	ldr	r3, [pc, #216]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be78:	4b36      	ldr	r3, [pc, #216]	@ (800bf54 <xTaskIncrementTick+0x160>)
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	601a      	str	r2, [r3, #0]
					break;
 800be80:	e03e      	b.n	800bf00 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be82:	4b31      	ldr	r3, [pc, #196]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d203      	bcs.n	800bea2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be9a:	4a2e      	ldr	r2, [pc, #184]	@ (800bf54 <xTaskIncrementTick+0x160>)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bea0:	e02e      	b.n	800bf00 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fec8 	bl	800ac3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	3318      	adds	r3, #24
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fe febf 	bl	800ac3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec2:	2201      	movs	r2, #1
 800bec4:	409a      	lsls	r2, r3
 800bec6:	4b24      	ldr	r3, [pc, #144]	@ (800bf58 <xTaskIncrementTick+0x164>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4313      	orrs	r3, r2
 800becc:	4a22      	ldr	r2, [pc, #136]	@ (800bf58 <xTaskIncrementTick+0x164>)
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4a1f      	ldr	r2, [pc, #124]	@ (800bf5c <xTaskIncrementTick+0x168>)
 800bede:	441a      	add	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fe4b 	bl	800ab82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf60 <xTaskIncrementTick+0x16c>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d3b9      	bcc.n	800be6e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800befa:	2301      	movs	r3, #1
 800befc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befe:	e7b6      	b.n	800be6e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf00:	4b17      	ldr	r3, [pc, #92]	@ (800bf60 <xTaskIncrementTick+0x16c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf06:	4915      	ldr	r1, [pc, #84]	@ (800bf5c <xTaskIncrementTick+0x168>)
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d907      	bls.n	800bf28 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	e004      	b.n	800bf28 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf1e:	4b11      	ldr	r3, [pc, #68]	@ (800bf64 <xTaskIncrementTick+0x170>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	4a0f      	ldr	r2, [pc, #60]	@ (800bf64 <xTaskIncrementTick+0x170>)
 800bf26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf28:	4b0f      	ldr	r3, [pc, #60]	@ (800bf68 <xTaskIncrementTick+0x174>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bf30:	2301      	movs	r3, #1
 800bf32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf34:	697b      	ldr	r3, [r7, #20]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3718      	adds	r7, #24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20004b34 	.word	0x20004b34
 800bf44:	20004b10 	.word	0x20004b10
 800bf48:	20004ac4 	.word	0x20004ac4
 800bf4c:	20004ac8 	.word	0x20004ac8
 800bf50:	20004b24 	.word	0x20004b24
 800bf54:	20004b2c 	.word	0x20004b2c
 800bf58:	20004b14 	.word	0x20004b14
 800bf5c:	20004a10 	.word	0x20004a10
 800bf60:	20004a0c 	.word	0x20004a0c
 800bf64:	20004b1c 	.word	0x20004b1c
 800bf68:	20004b20 	.word	0x20004b20

0800bf6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf72:	4b2b      	ldr	r3, [pc, #172]	@ (800c020 <vTaskSwitchContext+0xb4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf7a:	4b2a      	ldr	r3, [pc, #168]	@ (800c024 <vTaskSwitchContext+0xb8>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf80:	e047      	b.n	800c012 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bf82:	4b28      	ldr	r3, [pc, #160]	@ (800c024 <vTaskSwitchContext+0xb8>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf88:	4b27      	ldr	r3, [pc, #156]	@ (800c028 <vTaskSwitchContext+0xbc>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	fab3 f383 	clz	r3, r3
 800bf94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf96:	7afb      	ldrb	r3, [r7, #11]
 800bf98:	f1c3 031f 	rsb	r3, r3, #31
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	4923      	ldr	r1, [pc, #140]	@ (800c02c <vTaskSwitchContext+0xc0>)
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10d      	bne.n	800bfce <vTaskSwitchContext+0x62>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	b672      	cpsid	i
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	b662      	cpsie	i
 800bfc6:	607b      	str	r3, [r7, #4]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <vTaskSwitchContext+0x5e>
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4a14      	ldr	r2, [pc, #80]	@ (800c02c <vTaskSwitchContext+0xc0>)
 800bfda:	4413      	add	r3, r2
 800bfdc:	613b      	str	r3, [r7, #16]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	605a      	str	r2, [r3, #4]
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	3308      	adds	r3, #8
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d104      	bne.n	800bffe <vTaskSwitchContext+0x92>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	4a0a      	ldr	r2, [pc, #40]	@ (800c030 <vTaskSwitchContext+0xc4>)
 800c006:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c008:	4b09      	ldr	r3, [pc, #36]	@ (800c030 <vTaskSwitchContext+0xc4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	334c      	adds	r3, #76	@ 0x4c
 800c00e:	4a09      	ldr	r2, [pc, #36]	@ (800c034 <vTaskSwitchContext+0xc8>)
 800c010:	6013      	str	r3, [r2, #0]
}
 800c012:	bf00      	nop
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20004b34 	.word	0x20004b34
 800c024:	20004b20 	.word	0x20004b20
 800c028:	20004b14 	.word	0x20004b14
 800c02c:	20004a10 	.word	0x20004a10
 800c030:	20004a0c 	.word	0x20004a0c
 800c034:	20000054 	.word	0x20000054

0800c038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04c:	b672      	cpsid	i
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	b662      	cpsie	i
 800c05c:	60fb      	str	r3, [r7, #12]
}
 800c05e:	bf00      	nop
 800c060:	bf00      	nop
 800c062:	e7fd      	b.n	800c060 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c064:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <vTaskPlaceOnEventList+0x4c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3318      	adds	r3, #24
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7fe fdac 	bl	800abca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c072:	2101      	movs	r1, #1
 800c074:	6838      	ldr	r0, [r7, #0]
 800c076:	f000 fa7f 	bl	800c578 <prvAddCurrentTaskToDelayedList>
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20004a0c 	.word	0x20004a0c

0800c088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10d      	bne.n	800c0ba <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a2:	b672      	cpsid	i
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	b662      	cpsie	i
 800c0b2:	60fb      	str	r3, [r7, #12]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	3318      	adds	r3, #24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fdbc 	bl	800ac3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c13c <xTaskRemoveFromEventList+0xb4>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11c      	bne.n	800c106 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fdb3 	bl	800ac3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0da:	2201      	movs	r2, #1
 800c0dc:	409a      	lsls	r2, r3
 800c0de:	4b18      	ldr	r3, [pc, #96]	@ (800c140 <xTaskRemoveFromEventList+0xb8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4a16      	ldr	r2, [pc, #88]	@ (800c140 <xTaskRemoveFromEventList+0xb8>)
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4a13      	ldr	r2, [pc, #76]	@ (800c144 <xTaskRemoveFromEventList+0xbc>)
 800c0f6:	441a      	add	r2, r3
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fe fd3f 	bl	800ab82 <vListInsertEnd>
 800c104:	e005      	b.n	800c112 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	3318      	adds	r3, #24
 800c10a:	4619      	mov	r1, r3
 800c10c:	480e      	ldr	r0, [pc, #56]	@ (800c148 <xTaskRemoveFromEventList+0xc0>)
 800c10e:	f7fe fd38 	bl	800ab82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c116:	4b0d      	ldr	r3, [pc, #52]	@ (800c14c <xTaskRemoveFromEventList+0xc4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d905      	bls.n	800c12c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c124:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <xTaskRemoveFromEventList+0xc8>)
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	e001      	b.n	800c130 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c130:	697b      	ldr	r3, [r7, #20]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20004b34 	.word	0x20004b34
 800c140:	20004b14 	.word	0x20004b14
 800c144:	20004a10 	.word	0x20004a10
 800c148:	20004acc 	.word	0x20004acc
 800c14c:	20004a0c 	.word	0x20004a0c
 800c150:	20004b20 	.word	0x20004b20

0800c154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c15c:	4b06      	ldr	r3, [pc, #24]	@ (800c178 <vTaskInternalSetTimeOutState+0x24>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c164:	4b05      	ldr	r3, [pc, #20]	@ (800c17c <vTaskInternalSetTimeOutState+0x28>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	605a      	str	r2, [r3, #4]
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	20004b24 	.word	0x20004b24
 800c17c:	20004b10 	.word	0x20004b10

0800c180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10d      	bne.n	800c1ac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c194:	b672      	cpsid	i
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	b662      	cpsie	i
 800c1a4:	613b      	str	r3, [r7, #16]
}
 800c1a6:	bf00      	nop
 800c1a8:	bf00      	nop
 800c1aa:	e7fd      	b.n	800c1a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10d      	bne.n	800c1ce <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	b672      	cpsid	i
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	b662      	cpsie	i
 800c1c6:	60fb      	str	r3, [r7, #12]
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	e7fd      	b.n	800c1ca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c1ce:	f000 fb45 	bl	800c85c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <xTaskCheckForTimeOut+0xc8>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d102      	bne.n	800c1f2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61fb      	str	r3, [r7, #28]
 800c1f0:	e023      	b.n	800c23a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	4b15      	ldr	r3, [pc, #84]	@ (800c24c <xTaskCheckForTimeOut+0xcc>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d007      	beq.n	800c20e <xTaskCheckForTimeOut+0x8e>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	69ba      	ldr	r2, [r7, #24]
 800c204:	429a      	cmp	r2, r3
 800c206:	d302      	bcc.n	800c20e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	61fb      	str	r3, [r7, #28]
 800c20c:	e015      	b.n	800c23a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	429a      	cmp	r2, r3
 800c216:	d20b      	bcs.n	800c230 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff ff95 	bl	800c154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	61fb      	str	r3, [r7, #28]
 800c22e:	e004      	b.n	800c23a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c236:	2301      	movs	r3, #1
 800c238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c23a:	f000 fb45 	bl	800c8c8 <vPortExitCritical>

	return xReturn;
 800c23e:	69fb      	ldr	r3, [r7, #28]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20004b10 	.word	0x20004b10
 800c24c:	20004b24 	.word	0x20004b24

0800c250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c250:	b480      	push	{r7}
 800c252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c254:	4b03      	ldr	r3, [pc, #12]	@ (800c264 <vTaskMissedYield+0x14>)
 800c256:	2201      	movs	r2, #1
 800c258:	601a      	str	r2, [r3, #0]
}
 800c25a:	bf00      	nop
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	20004b20 	.word	0x20004b20

0800c268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c270:	f000 f852 	bl	800c318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c274:	4b06      	ldr	r3, [pc, #24]	@ (800c290 <prvIdleTask+0x28>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d9f9      	bls.n	800c270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c27c:	4b05      	ldr	r3, [pc, #20]	@ (800c294 <prvIdleTask+0x2c>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c28c:	e7f0      	b.n	800c270 <prvIdleTask+0x8>
 800c28e:	bf00      	nop
 800c290:	20004a10 	.word	0x20004a10
 800c294:	e000ed04 	.word	0xe000ed04

0800c298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c29e:	2300      	movs	r3, #0
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	e00c      	b.n	800c2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	4a12      	ldr	r2, [pc, #72]	@ (800c2f8 <prvInitialiseTaskLists+0x60>)
 800c2b0:	4413      	add	r3, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe fc38 	bl	800ab28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	607b      	str	r3, [r7, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b06      	cmp	r3, #6
 800c2c2:	d9ef      	bls.n	800c2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2c4:	480d      	ldr	r0, [pc, #52]	@ (800c2fc <prvInitialiseTaskLists+0x64>)
 800c2c6:	f7fe fc2f 	bl	800ab28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2ca:	480d      	ldr	r0, [pc, #52]	@ (800c300 <prvInitialiseTaskLists+0x68>)
 800c2cc:	f7fe fc2c 	bl	800ab28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2d0:	480c      	ldr	r0, [pc, #48]	@ (800c304 <prvInitialiseTaskLists+0x6c>)
 800c2d2:	f7fe fc29 	bl	800ab28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2d6:	480c      	ldr	r0, [pc, #48]	@ (800c308 <prvInitialiseTaskLists+0x70>)
 800c2d8:	f7fe fc26 	bl	800ab28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2dc:	480b      	ldr	r0, [pc, #44]	@ (800c30c <prvInitialiseTaskLists+0x74>)
 800c2de:	f7fe fc23 	bl	800ab28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c310 <prvInitialiseTaskLists+0x78>)
 800c2e4:	4a05      	ldr	r2, [pc, #20]	@ (800c2fc <prvInitialiseTaskLists+0x64>)
 800c2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c314 <prvInitialiseTaskLists+0x7c>)
 800c2ea:	4a05      	ldr	r2, [pc, #20]	@ (800c300 <prvInitialiseTaskLists+0x68>)
 800c2ec:	601a      	str	r2, [r3, #0]
}
 800c2ee:	bf00      	nop
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20004a10 	.word	0x20004a10
 800c2fc:	20004a9c 	.word	0x20004a9c
 800c300:	20004ab0 	.word	0x20004ab0
 800c304:	20004acc 	.word	0x20004acc
 800c308:	20004ae0 	.word	0x20004ae0
 800c30c:	20004af8 	.word	0x20004af8
 800c310:	20004ac4 	.word	0x20004ac4
 800c314:	20004ac8 	.word	0x20004ac8

0800c318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c31e:	e019      	b.n	800c354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c320:	f000 fa9c 	bl	800c85c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c324:	4b10      	ldr	r3, [pc, #64]	@ (800c368 <prvCheckTasksWaitingTermination+0x50>)
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	3304      	adds	r3, #4
 800c330:	4618      	mov	r0, r3
 800c332:	f7fe fc83 	bl	800ac3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c336:	4b0d      	ldr	r3, [pc, #52]	@ (800c36c <prvCheckTasksWaitingTermination+0x54>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	4a0b      	ldr	r2, [pc, #44]	@ (800c36c <prvCheckTasksWaitingTermination+0x54>)
 800c33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c340:	4b0b      	ldr	r3, [pc, #44]	@ (800c370 <prvCheckTasksWaitingTermination+0x58>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3b01      	subs	r3, #1
 800c346:	4a0a      	ldr	r2, [pc, #40]	@ (800c370 <prvCheckTasksWaitingTermination+0x58>)
 800c348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c34a:	f000 fabd 	bl	800c8c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f810 	bl	800c374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c354:	4b06      	ldr	r3, [pc, #24]	@ (800c370 <prvCheckTasksWaitingTermination+0x58>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e1      	bne.n	800c320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20004ae0 	.word	0x20004ae0
 800c36c:	20004b0c 	.word	0x20004b0c
 800c370:	20004af4 	.word	0x20004af4

0800c374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	334c      	adds	r3, #76	@ 0x4c
 800c380:	4618      	mov	r0, r3
 800c382:	f000 ff93 	bl	800d2ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d108      	bne.n	800c3a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fc5d 	bl	800cc54 <vPortFree>
				vPortFree( pxTCB );
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fc5a 	bl	800cc54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3a0:	e01b      	b.n	800c3da <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d103      	bne.n	800c3b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fc51 	bl	800cc54 <vPortFree>
	}
 800c3b2:	e012      	b.n	800c3da <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d00d      	beq.n	800c3da <prvDeleteTCB+0x66>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	b672      	cpsid	i
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	b662      	cpsie	i
 800c3d2:	60fb      	str	r3, [r7, #12]
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	e7fd      	b.n	800c3d6 <prvDeleteTCB+0x62>
	}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c41c <prvResetNextTaskUnblockTime+0x38>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c420 <prvResetNextTaskUnblockTime+0x3c>)
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3fc:	e008      	b.n	800c410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fe:	4b07      	ldr	r3, [pc, #28]	@ (800c41c <prvResetNextTaskUnblockTime+0x38>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	4a04      	ldr	r2, [pc, #16]	@ (800c420 <prvResetNextTaskUnblockTime+0x3c>)
 800c40e:	6013      	str	r3, [r2, #0]
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	20004ac4 	.word	0x20004ac4
 800c420:	20004b2c 	.word	0x20004b2c

0800c424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c42a:	4b0b      	ldr	r3, [pc, #44]	@ (800c458 <xTaskGetSchedulerState+0x34>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d102      	bne.n	800c438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c432:	2301      	movs	r3, #1
 800c434:	607b      	str	r3, [r7, #4]
 800c436:	e008      	b.n	800c44a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c438:	4b08      	ldr	r3, [pc, #32]	@ (800c45c <xTaskGetSchedulerState+0x38>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c440:	2302      	movs	r3, #2
 800c442:	607b      	str	r3, [r7, #4]
 800c444:	e001      	b.n	800c44a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c446:	2300      	movs	r3, #0
 800c448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c44a:	687b      	ldr	r3, [r7, #4]
	}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	20004b18 	.word	0x20004b18
 800c45c:	20004b34 	.word	0x20004b34

0800c460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d074      	beq.n	800c560 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c476:	4b3d      	ldr	r3, [pc, #244]	@ (800c56c <xTaskPriorityDisinherit+0x10c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d00d      	beq.n	800c49c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	b672      	cpsid	i
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	b662      	cpsie	i
 800c494:	60fb      	str	r3, [r7, #12]
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10d      	bne.n	800c4c0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	b672      	cpsid	i
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	b662      	cpsie	i
 800c4b8:	60bb      	str	r3, [r7, #8]
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4c4:	1e5a      	subs	r2, r3, #1
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d044      	beq.n	800c560 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d140      	bne.n	800c560 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fbaa 	bl	800ac3c <uxListRemove>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d115      	bne.n	800c51a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f2:	491f      	ldr	r1, [pc, #124]	@ (800c570 <xTaskPriorityDisinherit+0x110>)
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	440b      	add	r3, r1
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <xTaskPriorityDisinherit+0xba>
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c508:	2201      	movs	r2, #1
 800c50a:	fa02 f303 	lsl.w	r3, r2, r3
 800c50e:	43da      	mvns	r2, r3
 800c510:	4b18      	ldr	r3, [pc, #96]	@ (800c574 <xTaskPriorityDisinherit+0x114>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4013      	ands	r3, r2
 800c516:	4a17      	ldr	r2, [pc, #92]	@ (800c574 <xTaskPriorityDisinherit+0x114>)
 800c518:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c526:	f1c3 0207 	rsb	r2, r3, #7
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c532:	2201      	movs	r2, #1
 800c534:	409a      	lsls	r2, r3
 800c536:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <xTaskPriorityDisinherit+0x114>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	4a0d      	ldr	r2, [pc, #52]	@ (800c574 <xTaskPriorityDisinherit+0x114>)
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c544:	4613      	mov	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4a08      	ldr	r2, [pc, #32]	@ (800c570 <xTaskPriorityDisinherit+0x110>)
 800c54e:	441a      	add	r2, r3
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	3304      	adds	r3, #4
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7fe fb13 	bl	800ab82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c55c:	2301      	movs	r3, #1
 800c55e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c560:	697b      	ldr	r3, [r7, #20]
	}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20004a0c 	.word	0x20004a0c
 800c570:	20004a10 	.word	0x20004a10
 800c574:	20004b14 	.word	0x20004b14

0800c578 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c582:	4b29      	ldr	r3, [pc, #164]	@ (800c628 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c588:	4b28      	ldr	r3, [pc, #160]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe fb54 	bl	800ac3c <uxListRemove>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c59a:	4b24      	ldr	r3, [pc, #144]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a6:	43da      	mvns	r2, r3
 800c5a8:	4b21      	ldr	r3, [pc, #132]	@ (800c630 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	4a20      	ldr	r2, [pc, #128]	@ (800c630 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b8:	d10a      	bne.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x58>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	481a      	ldr	r0, [pc, #104]	@ (800c634 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c5ca:	f7fe fada 	bl	800ab82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5ce:	e026      	b.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5d8:	4b14      	ldr	r3, [pc, #80]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d209      	bcs.n	800c5fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5e8:	4b13      	ldr	r3, [pc, #76]	@ (800c638 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	f7fe fae8 	bl	800abca <vListInsert>
}
 800c5fa:	e010      	b.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c63c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	4b0a      	ldr	r3, [pc, #40]	@ (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3304      	adds	r3, #4
 800c606:	4619      	mov	r1, r3
 800c608:	4610      	mov	r0, r2
 800c60a:	f7fe fade 	bl	800abca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c60e:	4b0c      	ldr	r3, [pc, #48]	@ (800c640 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	429a      	cmp	r2, r3
 800c616:	d202      	bcs.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c618:	4a09      	ldr	r2, [pc, #36]	@ (800c640 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	6013      	str	r3, [r2, #0]
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20004b10 	.word	0x20004b10
 800c62c:	20004a0c 	.word	0x20004a0c
 800c630:	20004b14 	.word	0x20004b14
 800c634:	20004af8 	.word	0x20004af8
 800c638:	20004ac8 	.word	0x20004ac8
 800c63c:	20004ac4 	.word	0x20004ac4
 800c640:	20004b2c 	.word	0x20004b2c

0800c644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3b04      	subs	r3, #4
 800c654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c65c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3b04      	subs	r3, #4
 800c662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f023 0201 	bic.w	r2, r3, #1
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3b04      	subs	r3, #4
 800c672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c674:	4a0c      	ldr	r2, [pc, #48]	@ (800c6a8 <pxPortInitialiseStack+0x64>)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3b14      	subs	r3, #20
 800c67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3b04      	subs	r3, #4
 800c68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f06f 0202 	mvn.w	r2, #2
 800c692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3b20      	subs	r3, #32
 800c698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c69a:	68fb      	ldr	r3, [r7, #12]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	0800c6ad 	.word	0x0800c6ad

0800c6ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6b6:	4b15      	ldr	r3, [pc, #84]	@ (800c70c <prvTaskExitError+0x60>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6be:	d00d      	beq.n	800c6dc <prvTaskExitError+0x30>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c4:	b672      	cpsid	i
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	b662      	cpsie	i
 800c6d4:	60fb      	str	r3, [r7, #12]
}
 800c6d6:	bf00      	nop
 800c6d8:	bf00      	nop
 800c6da:	e7fd      	b.n	800c6d8 <prvTaskExitError+0x2c>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e0:	b672      	cpsid	i
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	b662      	cpsie	i
 800c6f0:	60bb      	str	r3, [r7, #8]
}
 800c6f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6f4:	bf00      	nop
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0fc      	beq.n	800c6f6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20000044 	.word	0x20000044

0800c710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c710:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <pxCurrentTCBConst2>)
 800c712:	6819      	ldr	r1, [r3, #0]
 800c714:	6808      	ldr	r0, [r1, #0]
 800c716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71a:	f380 8809 	msr	PSP, r0
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f04f 0000 	mov.w	r0, #0
 800c726:	f380 8811 	msr	BASEPRI, r0
 800c72a:	4770      	bx	lr
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst2>:
 800c730:	20004a0c 	.word	0x20004a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c738:	4808      	ldr	r0, [pc, #32]	@ (800c75c <prvPortStartFirstTask+0x24>)
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	6800      	ldr	r0, [r0, #0]
 800c73e:	f380 8808 	msr	MSP, r0
 800c742:	f04f 0000 	mov.w	r0, #0
 800c746:	f380 8814 	msr	CONTROL, r0
 800c74a:	b662      	cpsie	i
 800c74c:	b661      	cpsie	f
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	df00      	svc	0
 800c758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c75a:	bf00      	nop
 800c75c:	e000ed08 	.word	0xe000ed08

0800c760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c766:	4b37      	ldr	r3, [pc, #220]	@ (800c844 <xPortStartScheduler+0xe4>)
 800c768:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	22ff      	movs	r2, #255	@ 0xff
 800c776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	4b2f      	ldr	r3, [pc, #188]	@ (800c848 <xPortStartScheduler+0xe8>)
 800c78c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c78e:	4b2f      	ldr	r3, [pc, #188]	@ (800c84c <xPortStartScheduler+0xec>)
 800c790:	2207      	movs	r2, #7
 800c792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c794:	e009      	b.n	800c7aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c796:	4b2d      	ldr	r3, [pc, #180]	@ (800c84c <xPortStartScheduler+0xec>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	4a2b      	ldr	r2, [pc, #172]	@ (800c84c <xPortStartScheduler+0xec>)
 800c79e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7aa:	78fb      	ldrb	r3, [r7, #3]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b2:	2b80      	cmp	r3, #128	@ 0x80
 800c7b4:	d0ef      	beq.n	800c796 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7b6:	4b25      	ldr	r3, [pc, #148]	@ (800c84c <xPortStartScheduler+0xec>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f1c3 0307 	rsb	r3, r3, #7
 800c7be:	2b04      	cmp	r3, #4
 800c7c0:	d00d      	beq.n	800c7de <xPortStartScheduler+0x7e>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	b672      	cpsid	i
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	b662      	cpsie	i
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7de:	4b1b      	ldr	r3, [pc, #108]	@ (800c84c <xPortStartScheduler+0xec>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	4a19      	ldr	r2, [pc, #100]	@ (800c84c <xPortStartScheduler+0xec>)
 800c7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7e8:	4b18      	ldr	r3, [pc, #96]	@ (800c84c <xPortStartScheduler+0xec>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7f0:	4a16      	ldr	r2, [pc, #88]	@ (800c84c <xPortStartScheduler+0xec>)
 800c7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7fc:	4b14      	ldr	r3, [pc, #80]	@ (800c850 <xPortStartScheduler+0xf0>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a13      	ldr	r2, [pc, #76]	@ (800c850 <xPortStartScheduler+0xf0>)
 800c802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c808:	4b11      	ldr	r3, [pc, #68]	@ (800c850 <xPortStartScheduler+0xf0>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a10      	ldr	r2, [pc, #64]	@ (800c850 <xPortStartScheduler+0xf0>)
 800c80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c814:	f000 f8dc 	bl	800c9d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c818:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <xPortStartScheduler+0xf4>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c81e:	f000 f8fb 	bl	800ca18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c822:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <xPortStartScheduler+0xf8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a0c      	ldr	r2, [pc, #48]	@ (800c858 <xPortStartScheduler+0xf8>)
 800c828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c82e:	f7ff ff83 	bl	800c738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c832:	f7ff fb9b 	bl	800bf6c <vTaskSwitchContext>
	prvTaskExitError();
 800c836:	f7ff ff39 	bl	800c6ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000e400 	.word	0xe000e400
 800c848:	20004b38 	.word	0x20004b38
 800c84c:	20004b3c 	.word	0x20004b3c
 800c850:	e000ed20 	.word	0xe000ed20
 800c854:	20000044 	.word	0x20000044
 800c858:	e000ef34 	.word	0xe000ef34

0800c85c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	607b      	str	r3, [r7, #4]
}
 800c878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c87a:	4b11      	ldr	r3, [pc, #68]	@ (800c8c0 <vPortEnterCritical+0x64>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3301      	adds	r3, #1
 800c880:	4a0f      	ldr	r2, [pc, #60]	@ (800c8c0 <vPortEnterCritical+0x64>)
 800c882:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c884:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c0 <vPortEnterCritical+0x64>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d112      	bne.n	800c8b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c88c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c4 <vPortEnterCritical+0x68>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00d      	beq.n	800c8b2 <vPortEnterCritical+0x56>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89a:	b672      	cpsid	i
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	b662      	cpsie	i
 800c8aa:	603b      	str	r3, [r7, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	bf00      	nop
 800c8b0:	e7fd      	b.n	800c8ae <vPortEnterCritical+0x52>
	}
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	20000044 	.word	0x20000044
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8ce:	4b13      	ldr	r3, [pc, #76]	@ (800c91c <vPortExitCritical+0x54>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10d      	bne.n	800c8f2 <vPortExitCritical+0x2a>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8da:	b672      	cpsid	i
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	b662      	cpsie	i
 800c8ea:	607b      	str	r3, [r7, #4]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c91c <vPortExitCritical+0x54>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	4a08      	ldr	r2, [pc, #32]	@ (800c91c <vPortExitCritical+0x54>)
 800c8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <vPortExitCritical+0x54>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <vPortExitCritical+0x48>
 800c904:	2300      	movs	r3, #0
 800c906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f383 8811 	msr	BASEPRI, r3
}
 800c90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	20000044 	.word	0x20000044

0800c920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c920:	f3ef 8009 	mrs	r0, PSP
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <pxCurrentTCBConst>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f01e 0f10 	tst.w	lr, #16
 800c930:	bf08      	it	eq
 800c932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c944:	b672      	cpsid	i
 800c946:	f380 8811 	msr	BASEPRI, r0
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	b662      	cpsie	i
 800c954:	f7ff fb0a 	bl	800bf6c <vTaskSwitchContext>
 800c958:	f04f 0000 	mov.w	r0, #0
 800c95c:	f380 8811 	msr	BASEPRI, r0
 800c960:	bc09      	pop	{r0, r3}
 800c962:	6819      	ldr	r1, [r3, #0]
 800c964:	6808      	ldr	r0, [r1, #0]
 800c966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96a:	f01e 0f10 	tst.w	lr, #16
 800c96e:	bf08      	it	eq
 800c970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c974:	f380 8809 	msr	PSP, r0
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop

0800c980 <pxCurrentTCBConst>:
 800c980:	20004a0c 	.word	0x20004a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	b672      	cpsid	i
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	b662      	cpsie	i
 800c9a2:	607b      	str	r3, [r7, #4]
}
 800c9a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9a6:	f7ff fa25 	bl	800bdf4 <xTaskIncrementTick>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9b0:	4b06      	ldr	r3, [pc, #24]	@ (800c9cc <xPortSysTickHandler+0x44>)
 800c9b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	f383 8811 	msr	BASEPRI, r3
}
 800c9c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	e000ed04 	.word	0xe000ed04

0800c9d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <vPortSetupTimerInterrupt+0x34>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9da:	4b0b      	ldr	r3, [pc, #44]	@ (800ca08 <vPortSetupTimerInterrupt+0x38>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9e0:	4b0a      	ldr	r3, [pc, #40]	@ (800ca0c <vPortSetupTimerInterrupt+0x3c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a0a      	ldr	r2, [pc, #40]	@ (800ca10 <vPortSetupTimerInterrupt+0x40>)
 800c9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ea:	099b      	lsrs	r3, r3, #6
 800c9ec:	4a09      	ldr	r2, [pc, #36]	@ (800ca14 <vPortSetupTimerInterrupt+0x44>)
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9f2:	4b04      	ldr	r3, [pc, #16]	@ (800ca04 <vPortSetupTimerInterrupt+0x34>)
 800c9f4:	2207      	movs	r2, #7
 800c9f6:	601a      	str	r2, [r3, #0]
}
 800c9f8:	bf00      	nop
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	e000e010 	.word	0xe000e010
 800ca08:	e000e018 	.word	0xe000e018
 800ca0c:	20000008 	.word	0x20000008
 800ca10:	10624dd3 	.word	0x10624dd3
 800ca14:	e000e014 	.word	0xe000e014

0800ca18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca28 <vPortEnableVFP+0x10>
 800ca1c:	6801      	ldr	r1, [r0, #0]
 800ca1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca22:	6001      	str	r1, [r0, #0]
 800ca24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca26:	bf00      	nop
 800ca28:	e000ed88 	.word	0xe000ed88

0800ca2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca32:	f3ef 8305 	mrs	r3, IPSR
 800ca36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b0f      	cmp	r3, #15
 800ca3c:	d917      	bls.n	800ca6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca3e:	4a1a      	ldr	r2, [pc, #104]	@ (800caa8 <vPortValidateInterruptPriority+0x7c>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4413      	add	r3, r2
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca48:	4b18      	ldr	r3, [pc, #96]	@ (800caac <vPortValidateInterruptPriority+0x80>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	7afa      	ldrb	r2, [r7, #11]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d20d      	bcs.n	800ca6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca56:	b672      	cpsid	i
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	b662      	cpsie	i
 800ca66:	607b      	str	r3, [r7, #4]
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	e7fd      	b.n	800ca6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca6e:	4b10      	ldr	r3, [pc, #64]	@ (800cab0 <vPortValidateInterruptPriority+0x84>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca76:	4b0f      	ldr	r3, [pc, #60]	@ (800cab4 <vPortValidateInterruptPriority+0x88>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d90d      	bls.n	800ca9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca82:	b672      	cpsid	i
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	b662      	cpsie	i
 800ca92:	603b      	str	r3, [r7, #0]
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop
 800ca98:	e7fd      	b.n	800ca96 <vPortValidateInterruptPriority+0x6a>
	}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	e000e3f0 	.word	0xe000e3f0
 800caac:	20004b38 	.word	0x20004b38
 800cab0:	e000ed0c 	.word	0xe000ed0c
 800cab4:	20004b3c 	.word	0x20004b3c

0800cab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	@ 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cac4:	f7ff f8c6 	bl	800bc54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cac8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc40 <pvPortMalloc+0x188>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cad0:	f000 f920 	bl	800cd14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cad4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc44 <pvPortMalloc+0x18c>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8094 	bne.w	800cc0a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d020      	beq.n	800cb2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800cae8:	2208      	movs	r2, #8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d017      	beq.n	800cb2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f023 0307 	bic.w	r3, r3, #7
 800cb00:	3308      	adds	r3, #8
 800cb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00d      	beq.n	800cb2a <pvPortMalloc+0x72>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	b672      	cpsid	i
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	b662      	cpsie	i
 800cb22:	617b      	str	r3, [r7, #20]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d06c      	beq.n	800cc0a <pvPortMalloc+0x152>
 800cb30:	4b45      	ldr	r3, [pc, #276]	@ (800cc48 <pvPortMalloc+0x190>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d867      	bhi.n	800cc0a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb3a:	4b44      	ldr	r3, [pc, #272]	@ (800cc4c <pvPortMalloc+0x194>)
 800cb3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb3e:	4b43      	ldr	r3, [pc, #268]	@ (800cc4c <pvPortMalloc+0x194>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb44:	e004      	b.n	800cb50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d903      	bls.n	800cb62 <pvPortMalloc+0xaa>
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1f1      	bne.n	800cb46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb62:	4b37      	ldr	r3, [pc, #220]	@ (800cc40 <pvPortMalloc+0x188>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d04e      	beq.n	800cc0a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2208      	movs	r2, #8
 800cb72:	4413      	add	r3, r2
 800cb74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	1ad2      	subs	r2, r2, r3
 800cb86:	2308      	movs	r3, #8
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d922      	bls.n	800cbd4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	f003 0307 	and.w	r3, r3, #7
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00d      	beq.n	800cbbc <pvPortMalloc+0x104>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba4:	b672      	cpsid	i
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	b662      	cpsie	i
 800cbb4:	613b      	str	r3, [r7, #16]
}
 800cbb6:	bf00      	nop
 800cbb8:	bf00      	nop
 800cbba:	e7fd      	b.n	800cbb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	1ad2      	subs	r2, r2, r3
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbce:	69b8      	ldr	r0, [r7, #24]
 800cbd0:	f000 f902 	bl	800cdd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbd4:	4b1c      	ldr	r3, [pc, #112]	@ (800cc48 <pvPortMalloc+0x190>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	4a1a      	ldr	r2, [pc, #104]	@ (800cc48 <pvPortMalloc+0x190>)
 800cbe0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbe2:	4b19      	ldr	r3, [pc, #100]	@ (800cc48 <pvPortMalloc+0x190>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	4b1a      	ldr	r3, [pc, #104]	@ (800cc50 <pvPortMalloc+0x198>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d203      	bcs.n	800cbf6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbee:	4b16      	ldr	r3, [pc, #88]	@ (800cc48 <pvPortMalloc+0x190>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a17      	ldr	r2, [pc, #92]	@ (800cc50 <pvPortMalloc+0x198>)
 800cbf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	4b12      	ldr	r3, [pc, #72]	@ (800cc44 <pvPortMalloc+0x18c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	2200      	movs	r2, #0
 800cc08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc0a:	f7ff f831 	bl	800bc70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00d      	beq.n	800cc34 <pvPortMalloc+0x17c>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1c:	b672      	cpsid	i
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	b662      	cpsie	i
 800cc2c:	60fb      	str	r3, [r7, #12]
}
 800cc2e:	bf00      	nop
 800cc30:	bf00      	nop
 800cc32:	e7fd      	b.n	800cc30 <pvPortMalloc+0x178>
	return pvReturn;
 800cc34:	69fb      	ldr	r3, [r7, #28]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3728      	adds	r7, #40	@ 0x28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20010b48 	.word	0x20010b48
 800cc44:	20010b54 	.word	0x20010b54
 800cc48:	20010b4c 	.word	0x20010b4c
 800cc4c:	20010b40 	.word	0x20010b40
 800cc50:	20010b50 	.word	0x20010b50

0800cc54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d04e      	beq.n	800cd04 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc66:	2308      	movs	r3, #8
 800cc68:	425b      	negs	r3, r3
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	4b24      	ldr	r3, [pc, #144]	@ (800cd0c <vPortFree+0xb8>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10d      	bne.n	800cc9e <vPortFree+0x4a>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	b672      	cpsid	i
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	b662      	cpsie	i
 800cc96:	60fb      	str	r3, [r7, #12]
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	e7fd      	b.n	800cc9a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00d      	beq.n	800ccc2 <vPortFree+0x6e>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccaa:	b672      	cpsid	i
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	b662      	cpsie	i
 800ccba:	60bb      	str	r3, [r7, #8]
}
 800ccbc:	bf00      	nop
 800ccbe:	bf00      	nop
 800ccc0:	e7fd      	b.n	800ccbe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	4b11      	ldr	r3, [pc, #68]	@ (800cd0c <vPortFree+0xb8>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4013      	ands	r3, r2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d019      	beq.n	800cd04 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d115      	bne.n	800cd04 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <vPortFree+0xb8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	43db      	mvns	r3, r3
 800cce2:	401a      	ands	r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cce8:	f7fe ffb4 	bl	800bc54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	4b07      	ldr	r3, [pc, #28]	@ (800cd10 <vPortFree+0xbc>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	4a06      	ldr	r2, [pc, #24]	@ (800cd10 <vPortFree+0xbc>)
 800ccf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccfa:	6938      	ldr	r0, [r7, #16]
 800ccfc:	f000 f86c 	bl	800cdd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd00:	f7fe ffb6 	bl	800bc70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd04:	bf00      	nop
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20010b54 	.word	0x20010b54
 800cd10:	20010b4c 	.word	0x20010b4c

0800cd14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd1a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800cd1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd20:	4b27      	ldr	r3, [pc, #156]	@ (800cdc0 <prvHeapInit+0xac>)
 800cd22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3307      	adds	r3, #7
 800cd32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0307 	bic.w	r3, r3, #7
 800cd3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	4a1f      	ldr	r2, [pc, #124]	@ (800cdc0 <prvHeapInit+0xac>)
 800cd44:	4413      	add	r3, r2
 800cd46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd4c:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc4 <prvHeapInit+0xb0>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc4 <prvHeapInit+0xb0>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd60:	2208      	movs	r2, #8
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a15      	ldr	r2, [pc, #84]	@ (800cdc8 <prvHeapInit+0xb4>)
 800cd74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd76:	4b14      	ldr	r3, [pc, #80]	@ (800cdc8 <prvHeapInit+0xb4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7e:	4b12      	ldr	r3, [pc, #72]	@ (800cdc8 <prvHeapInit+0xb4>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd94:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc8 <prvHeapInit+0xb4>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4a0a      	ldr	r2, [pc, #40]	@ (800cdcc <prvHeapInit+0xb8>)
 800cda2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4a09      	ldr	r2, [pc, #36]	@ (800cdd0 <prvHeapInit+0xbc>)
 800cdaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdac:	4b09      	ldr	r3, [pc, #36]	@ (800cdd4 <prvHeapInit+0xc0>)
 800cdae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	20004b40 	.word	0x20004b40
 800cdc4:	20010b40 	.word	0x20010b40
 800cdc8:	20010b48 	.word	0x20010b48
 800cdcc:	20010b50 	.word	0x20010b50
 800cdd0:	20010b4c 	.word	0x20010b4c
 800cdd4:	20010b54 	.word	0x20010b54

0800cdd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cde0:	4b28      	ldr	r3, [pc, #160]	@ (800ce84 <prvInsertBlockIntoFreeList+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e002      	b.n	800cdec <prvInsertBlockIntoFreeList+0x14>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d8f7      	bhi.n	800cde6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d108      	bne.n	800ce1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	441a      	add	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d118      	bne.n	800ce60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b15      	ldr	r3, [pc, #84]	@ (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00d      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	441a      	add	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	e008      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce56:	4b0c      	ldr	r3, [pc, #48]	@ (800ce88 <prvInsertBlockIntoFreeList+0xb0>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e003      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d002      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce76:	bf00      	nop
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20010b40 	.word	0x20010b40
 800ce88:	20010b48 	.word	0x20010b48

0800ce8c <std>:
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	4604      	mov	r4, r0
 800ce92:	e9c0 3300 	strd	r3, r3, [r0]
 800ce96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce9a:	6083      	str	r3, [r0, #8]
 800ce9c:	8181      	strh	r1, [r0, #12]
 800ce9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cea0:	81c2      	strh	r2, [r0, #14]
 800cea2:	6183      	str	r3, [r0, #24]
 800cea4:	4619      	mov	r1, r3
 800cea6:	2208      	movs	r2, #8
 800cea8:	305c      	adds	r0, #92	@ 0x5c
 800ceaa:	f000 f9e7 	bl	800d27c <memset>
 800ceae:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <std+0x58>)
 800ceb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <std+0x5c>)
 800ceb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ceec <std+0x60>)
 800ceb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <std+0x64>)
 800cebc:	6323      	str	r3, [r4, #48]	@ 0x30
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <std+0x68>)
 800cec0:	6224      	str	r4, [r4, #32]
 800cec2:	429c      	cmp	r4, r3
 800cec4:	d006      	beq.n	800ced4 <std+0x48>
 800cec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ceca:	4294      	cmp	r4, r2
 800cecc:	d002      	beq.n	800ced4 <std+0x48>
 800cece:	33d0      	adds	r3, #208	@ 0xd0
 800ced0:	429c      	cmp	r4, r3
 800ced2:	d105      	bne.n	800cee0 <std+0x54>
 800ced4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f000 baa4 	b.w	800d428 <__retarget_lock_init_recursive>
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	bf00      	nop
 800cee4:	0800d0cd 	.word	0x0800d0cd
 800cee8:	0800d0ef 	.word	0x0800d0ef
 800ceec:	0800d127 	.word	0x0800d127
 800cef0:	0800d14b 	.word	0x0800d14b
 800cef4:	20010b58 	.word	0x20010b58

0800cef8 <stdio_exit_handler>:
 800cef8:	4a02      	ldr	r2, [pc, #8]	@ (800cf04 <stdio_exit_handler+0xc>)
 800cefa:	4903      	ldr	r1, [pc, #12]	@ (800cf08 <stdio_exit_handler+0x10>)
 800cefc:	4803      	ldr	r0, [pc, #12]	@ (800cf0c <stdio_exit_handler+0x14>)
 800cefe:	f000 b869 	b.w	800cfd4 <_fwalk_sglue>
 800cf02:	bf00      	nop
 800cf04:	20000048 	.word	0x20000048
 800cf08:	0800d745 	.word	0x0800d745
 800cf0c:	20000058 	.word	0x20000058

0800cf10 <cleanup_stdio>:
 800cf10:	6841      	ldr	r1, [r0, #4]
 800cf12:	4b0c      	ldr	r3, [pc, #48]	@ (800cf44 <cleanup_stdio+0x34>)
 800cf14:	4299      	cmp	r1, r3
 800cf16:	b510      	push	{r4, lr}
 800cf18:	4604      	mov	r4, r0
 800cf1a:	d001      	beq.n	800cf20 <cleanup_stdio+0x10>
 800cf1c:	f000 fc12 	bl	800d744 <_fflush_r>
 800cf20:	68a1      	ldr	r1, [r4, #8]
 800cf22:	4b09      	ldr	r3, [pc, #36]	@ (800cf48 <cleanup_stdio+0x38>)
 800cf24:	4299      	cmp	r1, r3
 800cf26:	d002      	beq.n	800cf2e <cleanup_stdio+0x1e>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fc0b 	bl	800d744 <_fflush_r>
 800cf2e:	68e1      	ldr	r1, [r4, #12]
 800cf30:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <cleanup_stdio+0x3c>)
 800cf32:	4299      	cmp	r1, r3
 800cf34:	d004      	beq.n	800cf40 <cleanup_stdio+0x30>
 800cf36:	4620      	mov	r0, r4
 800cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3c:	f000 bc02 	b.w	800d744 <_fflush_r>
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	bf00      	nop
 800cf44:	20010b58 	.word	0x20010b58
 800cf48:	20010bc0 	.word	0x20010bc0
 800cf4c:	20010c28 	.word	0x20010c28

0800cf50 <global_stdio_init.part.0>:
 800cf50:	b510      	push	{r4, lr}
 800cf52:	4b0b      	ldr	r3, [pc, #44]	@ (800cf80 <global_stdio_init.part.0+0x30>)
 800cf54:	4c0b      	ldr	r4, [pc, #44]	@ (800cf84 <global_stdio_init.part.0+0x34>)
 800cf56:	4a0c      	ldr	r2, [pc, #48]	@ (800cf88 <global_stdio_init.part.0+0x38>)
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	2104      	movs	r1, #4
 800cf60:	f7ff ff94 	bl	800ce8c <std>
 800cf64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf68:	2201      	movs	r2, #1
 800cf6a:	2109      	movs	r1, #9
 800cf6c:	f7ff ff8e 	bl	800ce8c <std>
 800cf70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf74:	2202      	movs	r2, #2
 800cf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf7a:	2112      	movs	r1, #18
 800cf7c:	f7ff bf86 	b.w	800ce8c <std>
 800cf80:	20010c90 	.word	0x20010c90
 800cf84:	20010b58 	.word	0x20010b58
 800cf88:	0800cef9 	.word	0x0800cef9

0800cf8c <__sfp_lock_acquire>:
 800cf8c:	4801      	ldr	r0, [pc, #4]	@ (800cf94 <__sfp_lock_acquire+0x8>)
 800cf8e:	f000 ba4c 	b.w	800d42a <__retarget_lock_acquire_recursive>
 800cf92:	bf00      	nop
 800cf94:	20010c99 	.word	0x20010c99

0800cf98 <__sfp_lock_release>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__sfp_lock_release+0x8>)
 800cf9a:	f000 ba47 	b.w	800d42c <__retarget_lock_release_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	20010c99 	.word	0x20010c99

0800cfa4 <__sinit>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	f7ff fff0 	bl	800cf8c <__sfp_lock_acquire>
 800cfac:	6a23      	ldr	r3, [r4, #32]
 800cfae:	b11b      	cbz	r3, 800cfb8 <__sinit+0x14>
 800cfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb4:	f7ff bff0 	b.w	800cf98 <__sfp_lock_release>
 800cfb8:	4b04      	ldr	r3, [pc, #16]	@ (800cfcc <__sinit+0x28>)
 800cfba:	6223      	str	r3, [r4, #32]
 800cfbc:	4b04      	ldr	r3, [pc, #16]	@ (800cfd0 <__sinit+0x2c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1f5      	bne.n	800cfb0 <__sinit+0xc>
 800cfc4:	f7ff ffc4 	bl	800cf50 <global_stdio_init.part.0>
 800cfc8:	e7f2      	b.n	800cfb0 <__sinit+0xc>
 800cfca:	bf00      	nop
 800cfcc:	0800cf11 	.word	0x0800cf11
 800cfd0:	20010c90 	.word	0x20010c90

0800cfd4 <_fwalk_sglue>:
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	4607      	mov	r7, r0
 800cfda:	4688      	mov	r8, r1
 800cfdc:	4614      	mov	r4, r2
 800cfde:	2600      	movs	r6, #0
 800cfe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfe4:	f1b9 0901 	subs.w	r9, r9, #1
 800cfe8:	d505      	bpl.n	800cff6 <_fwalk_sglue+0x22>
 800cfea:	6824      	ldr	r4, [r4, #0]
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d1f7      	bne.n	800cfe0 <_fwalk_sglue+0xc>
 800cff0:	4630      	mov	r0, r6
 800cff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d907      	bls.n	800d00c <_fwalk_sglue+0x38>
 800cffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d000:	3301      	adds	r3, #1
 800d002:	d003      	beq.n	800d00c <_fwalk_sglue+0x38>
 800d004:	4629      	mov	r1, r5
 800d006:	4638      	mov	r0, r7
 800d008:	47c0      	blx	r8
 800d00a:	4306      	orrs	r6, r0
 800d00c:	3568      	adds	r5, #104	@ 0x68
 800d00e:	e7e9      	b.n	800cfe4 <_fwalk_sglue+0x10>

0800d010 <_puts_r>:
 800d010:	6a03      	ldr	r3, [r0, #32]
 800d012:	b570      	push	{r4, r5, r6, lr}
 800d014:	6884      	ldr	r4, [r0, #8]
 800d016:	4605      	mov	r5, r0
 800d018:	460e      	mov	r6, r1
 800d01a:	b90b      	cbnz	r3, 800d020 <_puts_r+0x10>
 800d01c:	f7ff ffc2 	bl	800cfa4 <__sinit>
 800d020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d022:	07db      	lsls	r3, r3, #31
 800d024:	d405      	bmi.n	800d032 <_puts_r+0x22>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	0598      	lsls	r0, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_puts_r+0x22>
 800d02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d02e:	f000 f9fc 	bl	800d42a <__retarget_lock_acquire_recursive>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	0719      	lsls	r1, r3, #28
 800d036:	d502      	bpl.n	800d03e <_puts_r+0x2e>
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d135      	bne.n	800d0aa <_puts_r+0x9a>
 800d03e:	4621      	mov	r1, r4
 800d040:	4628      	mov	r0, r5
 800d042:	f000 f8c5 	bl	800d1d0 <__swsetup_r>
 800d046:	b380      	cbz	r0, 800d0aa <_puts_r+0x9a>
 800d048:	f04f 35ff 	mov.w	r5, #4294967295
 800d04c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d04e:	07da      	lsls	r2, r3, #31
 800d050:	d405      	bmi.n	800d05e <_puts_r+0x4e>
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	059b      	lsls	r3, r3, #22
 800d056:	d402      	bmi.n	800d05e <_puts_r+0x4e>
 800d058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d05a:	f000 f9e7 	bl	800d42c <__retarget_lock_release_recursive>
 800d05e:	4628      	mov	r0, r5
 800d060:	bd70      	pop	{r4, r5, r6, pc}
 800d062:	2b00      	cmp	r3, #0
 800d064:	da04      	bge.n	800d070 <_puts_r+0x60>
 800d066:	69a2      	ldr	r2, [r4, #24]
 800d068:	429a      	cmp	r2, r3
 800d06a:	dc17      	bgt.n	800d09c <_puts_r+0x8c>
 800d06c:	290a      	cmp	r1, #10
 800d06e:	d015      	beq.n	800d09c <_puts_r+0x8c>
 800d070:	6823      	ldr	r3, [r4, #0]
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	6022      	str	r2, [r4, #0]
 800d076:	7019      	strb	r1, [r3, #0]
 800d078:	68a3      	ldr	r3, [r4, #8]
 800d07a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d07e:	3b01      	subs	r3, #1
 800d080:	60a3      	str	r3, [r4, #8]
 800d082:	2900      	cmp	r1, #0
 800d084:	d1ed      	bne.n	800d062 <_puts_r+0x52>
 800d086:	2b00      	cmp	r3, #0
 800d088:	da11      	bge.n	800d0ae <_puts_r+0x9e>
 800d08a:	4622      	mov	r2, r4
 800d08c:	210a      	movs	r1, #10
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f85f 	bl	800d152 <__swbuf_r>
 800d094:	3001      	adds	r0, #1
 800d096:	d0d7      	beq.n	800d048 <_puts_r+0x38>
 800d098:	250a      	movs	r5, #10
 800d09a:	e7d7      	b.n	800d04c <_puts_r+0x3c>
 800d09c:	4622      	mov	r2, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f857 	bl	800d152 <__swbuf_r>
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d1e7      	bne.n	800d078 <_puts_r+0x68>
 800d0a8:	e7ce      	b.n	800d048 <_puts_r+0x38>
 800d0aa:	3e01      	subs	r6, #1
 800d0ac:	e7e4      	b.n	800d078 <_puts_r+0x68>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	6022      	str	r2, [r4, #0]
 800d0b4:	220a      	movs	r2, #10
 800d0b6:	701a      	strb	r2, [r3, #0]
 800d0b8:	e7ee      	b.n	800d098 <_puts_r+0x88>
	...

0800d0bc <puts>:
 800d0bc:	4b02      	ldr	r3, [pc, #8]	@ (800d0c8 <puts+0xc>)
 800d0be:	4601      	mov	r1, r0
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f7ff bfa5 	b.w	800d010 <_puts_r>
 800d0c6:	bf00      	nop
 800d0c8:	20000054 	.word	0x20000054

0800d0cc <__sread>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d4:	f000 f95a 	bl	800d38c <_read_r>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	bfab      	itete	ge
 800d0dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0de:	89a3      	ldrhlt	r3, [r4, #12]
 800d0e0:	181b      	addge	r3, r3, r0
 800d0e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0e6:	bfac      	ite	ge
 800d0e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0ea:	81a3      	strhlt	r3, [r4, #12]
 800d0ec:	bd10      	pop	{r4, pc}

0800d0ee <__swrite>:
 800d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	461f      	mov	r7, r3
 800d0f4:	898b      	ldrh	r3, [r1, #12]
 800d0f6:	05db      	lsls	r3, r3, #23
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	d505      	bpl.n	800d10c <__swrite+0x1e>
 800d100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d104:	2302      	movs	r3, #2
 800d106:	2200      	movs	r2, #0
 800d108:	f000 f92e 	bl	800d368 <_lseek_r>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	4632      	mov	r2, r6
 800d11a:	463b      	mov	r3, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	f000 b945 	b.w	800d3b0 <_write_r>

0800d126 <__sseek>:
 800d126:	b510      	push	{r4, lr}
 800d128:	460c      	mov	r4, r1
 800d12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12e:	f000 f91b 	bl	800d368 <_lseek_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	bf15      	itete	ne
 800d138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d13a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d13e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d142:	81a3      	strheq	r3, [r4, #12]
 800d144:	bf18      	it	ne
 800d146:	81a3      	strhne	r3, [r4, #12]
 800d148:	bd10      	pop	{r4, pc}

0800d14a <__sclose>:
 800d14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14e:	f000 b89d 	b.w	800d28c <_close_r>

0800d152 <__swbuf_r>:
 800d152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d154:	460e      	mov	r6, r1
 800d156:	4614      	mov	r4, r2
 800d158:	4605      	mov	r5, r0
 800d15a:	b118      	cbz	r0, 800d164 <__swbuf_r+0x12>
 800d15c:	6a03      	ldr	r3, [r0, #32]
 800d15e:	b90b      	cbnz	r3, 800d164 <__swbuf_r+0x12>
 800d160:	f7ff ff20 	bl	800cfa4 <__sinit>
 800d164:	69a3      	ldr	r3, [r4, #24]
 800d166:	60a3      	str	r3, [r4, #8]
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	071a      	lsls	r2, r3, #28
 800d16c:	d501      	bpl.n	800d172 <__swbuf_r+0x20>
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	b943      	cbnz	r3, 800d184 <__swbuf_r+0x32>
 800d172:	4621      	mov	r1, r4
 800d174:	4628      	mov	r0, r5
 800d176:	f000 f82b 	bl	800d1d0 <__swsetup_r>
 800d17a:	b118      	cbz	r0, 800d184 <__swbuf_r+0x32>
 800d17c:	f04f 37ff 	mov.w	r7, #4294967295
 800d180:	4638      	mov	r0, r7
 800d182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	6922      	ldr	r2, [r4, #16]
 800d188:	1a98      	subs	r0, r3, r2
 800d18a:	6963      	ldr	r3, [r4, #20]
 800d18c:	b2f6      	uxtb	r6, r6
 800d18e:	4283      	cmp	r3, r0
 800d190:	4637      	mov	r7, r6
 800d192:	dc05      	bgt.n	800d1a0 <__swbuf_r+0x4e>
 800d194:	4621      	mov	r1, r4
 800d196:	4628      	mov	r0, r5
 800d198:	f000 fad4 	bl	800d744 <_fflush_r>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d1ed      	bne.n	800d17c <__swbuf_r+0x2a>
 800d1a0:	68a3      	ldr	r3, [r4, #8]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	60a3      	str	r3, [r4, #8]
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	6022      	str	r2, [r4, #0]
 800d1ac:	701e      	strb	r6, [r3, #0]
 800d1ae:	6962      	ldr	r2, [r4, #20]
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d004      	beq.n	800d1c0 <__swbuf_r+0x6e>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	07db      	lsls	r3, r3, #31
 800d1ba:	d5e1      	bpl.n	800d180 <__swbuf_r+0x2e>
 800d1bc:	2e0a      	cmp	r6, #10
 800d1be:	d1df      	bne.n	800d180 <__swbuf_r+0x2e>
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f000 fabe 	bl	800d744 <_fflush_r>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d0d9      	beq.n	800d180 <__swbuf_r+0x2e>
 800d1cc:	e7d6      	b.n	800d17c <__swbuf_r+0x2a>
	...

0800d1d0 <__swsetup_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4b29      	ldr	r3, [pc, #164]	@ (800d278 <__swsetup_r+0xa8>)
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	460c      	mov	r4, r1
 800d1da:	b118      	cbz	r0, 800d1e4 <__swsetup_r+0x14>
 800d1dc:	6a03      	ldr	r3, [r0, #32]
 800d1de:	b90b      	cbnz	r3, 800d1e4 <__swsetup_r+0x14>
 800d1e0:	f7ff fee0 	bl	800cfa4 <__sinit>
 800d1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e8:	0719      	lsls	r1, r3, #28
 800d1ea:	d422      	bmi.n	800d232 <__swsetup_r+0x62>
 800d1ec:	06da      	lsls	r2, r3, #27
 800d1ee:	d407      	bmi.n	800d200 <__swsetup_r+0x30>
 800d1f0:	2209      	movs	r2, #9
 800d1f2:	602a      	str	r2, [r5, #0]
 800d1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fe:	e033      	b.n	800d268 <__swsetup_r+0x98>
 800d200:	0758      	lsls	r0, r3, #29
 800d202:	d512      	bpl.n	800d22a <__swsetup_r+0x5a>
 800d204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d206:	b141      	cbz	r1, 800d21a <__swsetup_r+0x4a>
 800d208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d20c:	4299      	cmp	r1, r3
 800d20e:	d002      	beq.n	800d216 <__swsetup_r+0x46>
 800d210:	4628      	mov	r0, r5
 800d212:	f000 f91b 	bl	800d44c <_free_r>
 800d216:	2300      	movs	r3, #0
 800d218:	6363      	str	r3, [r4, #52]	@ 0x34
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	2300      	movs	r3, #0
 800d224:	6063      	str	r3, [r4, #4]
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f043 0308 	orr.w	r3, r3, #8
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	b94b      	cbnz	r3, 800d24a <__swsetup_r+0x7a>
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d23c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d240:	d003      	beq.n	800d24a <__swsetup_r+0x7a>
 800d242:	4621      	mov	r1, r4
 800d244:	4628      	mov	r0, r5
 800d246:	f000 facb 	bl	800d7e0 <__smakebuf_r>
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	f013 0201 	ands.w	r2, r3, #1
 800d252:	d00a      	beq.n	800d26a <__swsetup_r+0x9a>
 800d254:	2200      	movs	r2, #0
 800d256:	60a2      	str	r2, [r4, #8]
 800d258:	6962      	ldr	r2, [r4, #20]
 800d25a:	4252      	negs	r2, r2
 800d25c:	61a2      	str	r2, [r4, #24]
 800d25e:	6922      	ldr	r2, [r4, #16]
 800d260:	b942      	cbnz	r2, 800d274 <__swsetup_r+0xa4>
 800d262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d266:	d1c5      	bne.n	800d1f4 <__swsetup_r+0x24>
 800d268:	bd38      	pop	{r3, r4, r5, pc}
 800d26a:	0799      	lsls	r1, r3, #30
 800d26c:	bf58      	it	pl
 800d26e:	6962      	ldrpl	r2, [r4, #20]
 800d270:	60a2      	str	r2, [r4, #8]
 800d272:	e7f4      	b.n	800d25e <__swsetup_r+0x8e>
 800d274:	2000      	movs	r0, #0
 800d276:	e7f7      	b.n	800d268 <__swsetup_r+0x98>
 800d278:	20000054 	.word	0x20000054

0800d27c <memset>:
 800d27c:	4402      	add	r2, r0
 800d27e:	4603      	mov	r3, r0
 800d280:	4293      	cmp	r3, r2
 800d282:	d100      	bne.n	800d286 <memset+0xa>
 800d284:	4770      	bx	lr
 800d286:	f803 1b01 	strb.w	r1, [r3], #1
 800d28a:	e7f9      	b.n	800d280 <memset+0x4>

0800d28c <_close_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	@ (800d2a8 <_close_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f4 fd3f 	bl	8001d1a <_close>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_close_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_close_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20010c94 	.word	0x20010c94

0800d2ac <_reclaim_reent>:
 800d2ac:	4b2d      	ldr	r3, [pc, #180]	@ (800d364 <_reclaim_reent+0xb8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4283      	cmp	r3, r0
 800d2b2:	b570      	push	{r4, r5, r6, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	d053      	beq.n	800d360 <_reclaim_reent+0xb4>
 800d2b8:	69c3      	ldr	r3, [r0, #28]
 800d2ba:	b31b      	cbz	r3, 800d304 <_reclaim_reent+0x58>
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	b163      	cbz	r3, 800d2da <_reclaim_reent+0x2e>
 800d2c0:	2500      	movs	r5, #0
 800d2c2:	69e3      	ldr	r3, [r4, #28]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	5959      	ldr	r1, [r3, r5]
 800d2c8:	b9b1      	cbnz	r1, 800d2f8 <_reclaim_reent+0x4c>
 800d2ca:	3504      	adds	r5, #4
 800d2cc:	2d80      	cmp	r5, #128	@ 0x80
 800d2ce:	d1f8      	bne.n	800d2c2 <_reclaim_reent+0x16>
 800d2d0:	69e3      	ldr	r3, [r4, #28]
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	68d9      	ldr	r1, [r3, #12]
 800d2d6:	f000 f8b9 	bl	800d44c <_free_r>
 800d2da:	69e3      	ldr	r3, [r4, #28]
 800d2dc:	6819      	ldr	r1, [r3, #0]
 800d2de:	b111      	cbz	r1, 800d2e6 <_reclaim_reent+0x3a>
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 f8b3 	bl	800d44c <_free_r>
 800d2e6:	69e3      	ldr	r3, [r4, #28]
 800d2e8:	689d      	ldr	r5, [r3, #8]
 800d2ea:	b15d      	cbz	r5, 800d304 <_reclaim_reent+0x58>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	682d      	ldr	r5, [r5, #0]
 800d2f2:	f000 f8ab 	bl	800d44c <_free_r>
 800d2f6:	e7f8      	b.n	800d2ea <_reclaim_reent+0x3e>
 800d2f8:	680e      	ldr	r6, [r1, #0]
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 f8a6 	bl	800d44c <_free_r>
 800d300:	4631      	mov	r1, r6
 800d302:	e7e1      	b.n	800d2c8 <_reclaim_reent+0x1c>
 800d304:	6961      	ldr	r1, [r4, #20]
 800d306:	b111      	cbz	r1, 800d30e <_reclaim_reent+0x62>
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 f89f 	bl	800d44c <_free_r>
 800d30e:	69e1      	ldr	r1, [r4, #28]
 800d310:	b111      	cbz	r1, 800d318 <_reclaim_reent+0x6c>
 800d312:	4620      	mov	r0, r4
 800d314:	f000 f89a 	bl	800d44c <_free_r>
 800d318:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d31a:	b111      	cbz	r1, 800d322 <_reclaim_reent+0x76>
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 f895 	bl	800d44c <_free_r>
 800d322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d324:	b111      	cbz	r1, 800d32c <_reclaim_reent+0x80>
 800d326:	4620      	mov	r0, r4
 800d328:	f000 f890 	bl	800d44c <_free_r>
 800d32c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d32e:	b111      	cbz	r1, 800d336 <_reclaim_reent+0x8a>
 800d330:	4620      	mov	r0, r4
 800d332:	f000 f88b 	bl	800d44c <_free_r>
 800d336:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d338:	b111      	cbz	r1, 800d340 <_reclaim_reent+0x94>
 800d33a:	4620      	mov	r0, r4
 800d33c:	f000 f886 	bl	800d44c <_free_r>
 800d340:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d342:	b111      	cbz	r1, 800d34a <_reclaim_reent+0x9e>
 800d344:	4620      	mov	r0, r4
 800d346:	f000 f881 	bl	800d44c <_free_r>
 800d34a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d34c:	b111      	cbz	r1, 800d354 <_reclaim_reent+0xa8>
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 f87c 	bl	800d44c <_free_r>
 800d354:	6a23      	ldr	r3, [r4, #32]
 800d356:	b11b      	cbz	r3, 800d360 <_reclaim_reent+0xb4>
 800d358:	4620      	mov	r0, r4
 800d35a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d35e:	4718      	bx	r3
 800d360:	bd70      	pop	{r4, r5, r6, pc}
 800d362:	bf00      	nop
 800d364:	20000054 	.word	0x20000054

0800d368 <_lseek_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	@ (800d388 <_lseek_r+0x20>)
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f7f4 fcf6 	bl	8001d68 <_lseek>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_lseek_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_lseek_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	20010c94 	.word	0x20010c94

0800d38c <_read_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4d07      	ldr	r5, [pc, #28]	@ (800d3ac <_read_r+0x20>)
 800d390:	4604      	mov	r4, r0
 800d392:	4608      	mov	r0, r1
 800d394:	4611      	mov	r1, r2
 800d396:	2200      	movs	r2, #0
 800d398:	602a      	str	r2, [r5, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	f7f4 fc84 	bl	8001ca8 <_read>
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d102      	bne.n	800d3aa <_read_r+0x1e>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	b103      	cbz	r3, 800d3aa <_read_r+0x1e>
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}
 800d3ac:	20010c94 	.word	0x20010c94

0800d3b0 <_write_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d07      	ldr	r5, [pc, #28]	@ (800d3d0 <_write_r+0x20>)
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f7f4 fc8f 	bl	8001ce2 <_write>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_write_r+0x1e>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_write_r+0x1e>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	20010c94 	.word	0x20010c94

0800d3d4 <__errno>:
 800d3d4:	4b01      	ldr	r3, [pc, #4]	@ (800d3dc <__errno+0x8>)
 800d3d6:	6818      	ldr	r0, [r3, #0]
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	20000054 	.word	0x20000054

0800d3e0 <__libc_init_array>:
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	4d0d      	ldr	r5, [pc, #52]	@ (800d418 <__libc_init_array+0x38>)
 800d3e4:	4c0d      	ldr	r4, [pc, #52]	@ (800d41c <__libc_init_array+0x3c>)
 800d3e6:	1b64      	subs	r4, r4, r5
 800d3e8:	10a4      	asrs	r4, r4, #2
 800d3ea:	2600      	movs	r6, #0
 800d3ec:	42a6      	cmp	r6, r4
 800d3ee:	d109      	bne.n	800d404 <__libc_init_array+0x24>
 800d3f0:	4d0b      	ldr	r5, [pc, #44]	@ (800d420 <__libc_init_array+0x40>)
 800d3f2:	4c0c      	ldr	r4, [pc, #48]	@ (800d424 <__libc_init_array+0x44>)
 800d3f4:	f000 fa62 	bl	800d8bc <_init>
 800d3f8:	1b64      	subs	r4, r4, r5
 800d3fa:	10a4      	asrs	r4, r4, #2
 800d3fc:	2600      	movs	r6, #0
 800d3fe:	42a6      	cmp	r6, r4
 800d400:	d105      	bne.n	800d40e <__libc_init_array+0x2e>
 800d402:	bd70      	pop	{r4, r5, r6, pc}
 800d404:	f855 3b04 	ldr.w	r3, [r5], #4
 800d408:	4798      	blx	r3
 800d40a:	3601      	adds	r6, #1
 800d40c:	e7ee      	b.n	800d3ec <__libc_init_array+0xc>
 800d40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d412:	4798      	blx	r3
 800d414:	3601      	adds	r6, #1
 800d416:	e7f2      	b.n	800d3fe <__libc_init_array+0x1e>
 800d418:	0800d9e8 	.word	0x0800d9e8
 800d41c:	0800d9e8 	.word	0x0800d9e8
 800d420:	0800d9e8 	.word	0x0800d9e8
 800d424:	0800d9ec 	.word	0x0800d9ec

0800d428 <__retarget_lock_init_recursive>:
 800d428:	4770      	bx	lr

0800d42a <__retarget_lock_acquire_recursive>:
 800d42a:	4770      	bx	lr

0800d42c <__retarget_lock_release_recursive>:
 800d42c:	4770      	bx	lr

0800d42e <memcpy>:
 800d42e:	440a      	add	r2, r1
 800d430:	4291      	cmp	r1, r2
 800d432:	f100 33ff 	add.w	r3, r0, #4294967295
 800d436:	d100      	bne.n	800d43a <memcpy+0xc>
 800d438:	4770      	bx	lr
 800d43a:	b510      	push	{r4, lr}
 800d43c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d440:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d444:	4291      	cmp	r1, r2
 800d446:	d1f9      	bne.n	800d43c <memcpy+0xe>
 800d448:	bd10      	pop	{r4, pc}
	...

0800d44c <_free_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4605      	mov	r5, r0
 800d450:	2900      	cmp	r1, #0
 800d452:	d041      	beq.n	800d4d8 <_free_r+0x8c>
 800d454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d458:	1f0c      	subs	r4, r1, #4
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bfb8      	it	lt
 800d45e:	18e4      	addlt	r4, r4, r3
 800d460:	f000 f8e0 	bl	800d624 <__malloc_lock>
 800d464:	4a1d      	ldr	r2, [pc, #116]	@ (800d4dc <_free_r+0x90>)
 800d466:	6813      	ldr	r3, [r2, #0]
 800d468:	b933      	cbnz	r3, 800d478 <_free_r+0x2c>
 800d46a:	6063      	str	r3, [r4, #4]
 800d46c:	6014      	str	r4, [r2, #0]
 800d46e:	4628      	mov	r0, r5
 800d470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d474:	f000 b8dc 	b.w	800d630 <__malloc_unlock>
 800d478:	42a3      	cmp	r3, r4
 800d47a:	d908      	bls.n	800d48e <_free_r+0x42>
 800d47c:	6820      	ldr	r0, [r4, #0]
 800d47e:	1821      	adds	r1, r4, r0
 800d480:	428b      	cmp	r3, r1
 800d482:	bf01      	itttt	eq
 800d484:	6819      	ldreq	r1, [r3, #0]
 800d486:	685b      	ldreq	r3, [r3, #4]
 800d488:	1809      	addeq	r1, r1, r0
 800d48a:	6021      	streq	r1, [r4, #0]
 800d48c:	e7ed      	b.n	800d46a <_free_r+0x1e>
 800d48e:	461a      	mov	r2, r3
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	b10b      	cbz	r3, 800d498 <_free_r+0x4c>
 800d494:	42a3      	cmp	r3, r4
 800d496:	d9fa      	bls.n	800d48e <_free_r+0x42>
 800d498:	6811      	ldr	r1, [r2, #0]
 800d49a:	1850      	adds	r0, r2, r1
 800d49c:	42a0      	cmp	r0, r4
 800d49e:	d10b      	bne.n	800d4b8 <_free_r+0x6c>
 800d4a0:	6820      	ldr	r0, [r4, #0]
 800d4a2:	4401      	add	r1, r0
 800d4a4:	1850      	adds	r0, r2, r1
 800d4a6:	4283      	cmp	r3, r0
 800d4a8:	6011      	str	r1, [r2, #0]
 800d4aa:	d1e0      	bne.n	800d46e <_free_r+0x22>
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	6053      	str	r3, [r2, #4]
 800d4b2:	4408      	add	r0, r1
 800d4b4:	6010      	str	r0, [r2, #0]
 800d4b6:	e7da      	b.n	800d46e <_free_r+0x22>
 800d4b8:	d902      	bls.n	800d4c0 <_free_r+0x74>
 800d4ba:	230c      	movs	r3, #12
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	e7d6      	b.n	800d46e <_free_r+0x22>
 800d4c0:	6820      	ldr	r0, [r4, #0]
 800d4c2:	1821      	adds	r1, r4, r0
 800d4c4:	428b      	cmp	r3, r1
 800d4c6:	bf04      	itt	eq
 800d4c8:	6819      	ldreq	r1, [r3, #0]
 800d4ca:	685b      	ldreq	r3, [r3, #4]
 800d4cc:	6063      	str	r3, [r4, #4]
 800d4ce:	bf04      	itt	eq
 800d4d0:	1809      	addeq	r1, r1, r0
 800d4d2:	6021      	streq	r1, [r4, #0]
 800d4d4:	6054      	str	r4, [r2, #4]
 800d4d6:	e7ca      	b.n	800d46e <_free_r+0x22>
 800d4d8:	bd38      	pop	{r3, r4, r5, pc}
 800d4da:	bf00      	nop
 800d4dc:	20010ca0 	.word	0x20010ca0

0800d4e0 <sbrk_aligned>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	4e0f      	ldr	r6, [pc, #60]	@ (800d520 <sbrk_aligned+0x40>)
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	6831      	ldr	r1, [r6, #0]
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	b911      	cbnz	r1, 800d4f2 <sbrk_aligned+0x12>
 800d4ec:	f000 f9d6 	bl	800d89c <_sbrk_r>
 800d4f0:	6030      	str	r0, [r6, #0]
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f000 f9d1 	bl	800d89c <_sbrk_r>
 800d4fa:	1c43      	adds	r3, r0, #1
 800d4fc:	d103      	bne.n	800d506 <sbrk_aligned+0x26>
 800d4fe:	f04f 34ff 	mov.w	r4, #4294967295
 800d502:	4620      	mov	r0, r4
 800d504:	bd70      	pop	{r4, r5, r6, pc}
 800d506:	1cc4      	adds	r4, r0, #3
 800d508:	f024 0403 	bic.w	r4, r4, #3
 800d50c:	42a0      	cmp	r0, r4
 800d50e:	d0f8      	beq.n	800d502 <sbrk_aligned+0x22>
 800d510:	1a21      	subs	r1, r4, r0
 800d512:	4628      	mov	r0, r5
 800d514:	f000 f9c2 	bl	800d89c <_sbrk_r>
 800d518:	3001      	adds	r0, #1
 800d51a:	d1f2      	bne.n	800d502 <sbrk_aligned+0x22>
 800d51c:	e7ef      	b.n	800d4fe <sbrk_aligned+0x1e>
 800d51e:	bf00      	nop
 800d520:	20010c9c 	.word	0x20010c9c

0800d524 <_malloc_r>:
 800d524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d528:	1ccd      	adds	r5, r1, #3
 800d52a:	f025 0503 	bic.w	r5, r5, #3
 800d52e:	3508      	adds	r5, #8
 800d530:	2d0c      	cmp	r5, #12
 800d532:	bf38      	it	cc
 800d534:	250c      	movcc	r5, #12
 800d536:	2d00      	cmp	r5, #0
 800d538:	4606      	mov	r6, r0
 800d53a:	db01      	blt.n	800d540 <_malloc_r+0x1c>
 800d53c:	42a9      	cmp	r1, r5
 800d53e:	d904      	bls.n	800d54a <_malloc_r+0x26>
 800d540:	230c      	movs	r3, #12
 800d542:	6033      	str	r3, [r6, #0]
 800d544:	2000      	movs	r0, #0
 800d546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d54a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d620 <_malloc_r+0xfc>
 800d54e:	f000 f869 	bl	800d624 <__malloc_lock>
 800d552:	f8d8 3000 	ldr.w	r3, [r8]
 800d556:	461c      	mov	r4, r3
 800d558:	bb44      	cbnz	r4, 800d5ac <_malloc_r+0x88>
 800d55a:	4629      	mov	r1, r5
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff ffbf 	bl	800d4e0 <sbrk_aligned>
 800d562:	1c43      	adds	r3, r0, #1
 800d564:	4604      	mov	r4, r0
 800d566:	d158      	bne.n	800d61a <_malloc_r+0xf6>
 800d568:	f8d8 4000 	ldr.w	r4, [r8]
 800d56c:	4627      	mov	r7, r4
 800d56e:	2f00      	cmp	r7, #0
 800d570:	d143      	bne.n	800d5fa <_malloc_r+0xd6>
 800d572:	2c00      	cmp	r4, #0
 800d574:	d04b      	beq.n	800d60e <_malloc_r+0xea>
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	4639      	mov	r1, r7
 800d57a:	4630      	mov	r0, r6
 800d57c:	eb04 0903 	add.w	r9, r4, r3
 800d580:	f000 f98c 	bl	800d89c <_sbrk_r>
 800d584:	4581      	cmp	r9, r0
 800d586:	d142      	bne.n	800d60e <_malloc_r+0xea>
 800d588:	6821      	ldr	r1, [r4, #0]
 800d58a:	1a6d      	subs	r5, r5, r1
 800d58c:	4629      	mov	r1, r5
 800d58e:	4630      	mov	r0, r6
 800d590:	f7ff ffa6 	bl	800d4e0 <sbrk_aligned>
 800d594:	3001      	adds	r0, #1
 800d596:	d03a      	beq.n	800d60e <_malloc_r+0xea>
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	442b      	add	r3, r5
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	bb62      	cbnz	r2, 800d600 <_malloc_r+0xdc>
 800d5a6:	f8c8 7000 	str.w	r7, [r8]
 800d5aa:	e00f      	b.n	800d5cc <_malloc_r+0xa8>
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	1b52      	subs	r2, r2, r5
 800d5b0:	d420      	bmi.n	800d5f4 <_malloc_r+0xd0>
 800d5b2:	2a0b      	cmp	r2, #11
 800d5b4:	d917      	bls.n	800d5e6 <_malloc_r+0xc2>
 800d5b6:	1961      	adds	r1, r4, r5
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	6025      	str	r5, [r4, #0]
 800d5bc:	bf18      	it	ne
 800d5be:	6059      	strne	r1, [r3, #4]
 800d5c0:	6863      	ldr	r3, [r4, #4]
 800d5c2:	bf08      	it	eq
 800d5c4:	f8c8 1000 	streq.w	r1, [r8]
 800d5c8:	5162      	str	r2, [r4, r5]
 800d5ca:	604b      	str	r3, [r1, #4]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f000 f82f 	bl	800d630 <__malloc_unlock>
 800d5d2:	f104 000b 	add.w	r0, r4, #11
 800d5d6:	1d23      	adds	r3, r4, #4
 800d5d8:	f020 0007 	bic.w	r0, r0, #7
 800d5dc:	1ac2      	subs	r2, r0, r3
 800d5de:	bf1c      	itt	ne
 800d5e0:	1a1b      	subne	r3, r3, r0
 800d5e2:	50a3      	strne	r3, [r4, r2]
 800d5e4:	e7af      	b.n	800d546 <_malloc_r+0x22>
 800d5e6:	6862      	ldr	r2, [r4, #4]
 800d5e8:	42a3      	cmp	r3, r4
 800d5ea:	bf0c      	ite	eq
 800d5ec:	f8c8 2000 	streq.w	r2, [r8]
 800d5f0:	605a      	strne	r2, [r3, #4]
 800d5f2:	e7eb      	b.n	800d5cc <_malloc_r+0xa8>
 800d5f4:	4623      	mov	r3, r4
 800d5f6:	6864      	ldr	r4, [r4, #4]
 800d5f8:	e7ae      	b.n	800d558 <_malloc_r+0x34>
 800d5fa:	463c      	mov	r4, r7
 800d5fc:	687f      	ldr	r7, [r7, #4]
 800d5fe:	e7b6      	b.n	800d56e <_malloc_r+0x4a>
 800d600:	461a      	mov	r2, r3
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	42a3      	cmp	r3, r4
 800d606:	d1fb      	bne.n	800d600 <_malloc_r+0xdc>
 800d608:	2300      	movs	r3, #0
 800d60a:	6053      	str	r3, [r2, #4]
 800d60c:	e7de      	b.n	800d5cc <_malloc_r+0xa8>
 800d60e:	230c      	movs	r3, #12
 800d610:	6033      	str	r3, [r6, #0]
 800d612:	4630      	mov	r0, r6
 800d614:	f000 f80c 	bl	800d630 <__malloc_unlock>
 800d618:	e794      	b.n	800d544 <_malloc_r+0x20>
 800d61a:	6005      	str	r5, [r0, #0]
 800d61c:	e7d6      	b.n	800d5cc <_malloc_r+0xa8>
 800d61e:	bf00      	nop
 800d620:	20010ca0 	.word	0x20010ca0

0800d624 <__malloc_lock>:
 800d624:	4801      	ldr	r0, [pc, #4]	@ (800d62c <__malloc_lock+0x8>)
 800d626:	f7ff bf00 	b.w	800d42a <__retarget_lock_acquire_recursive>
 800d62a:	bf00      	nop
 800d62c:	20010c98 	.word	0x20010c98

0800d630 <__malloc_unlock>:
 800d630:	4801      	ldr	r0, [pc, #4]	@ (800d638 <__malloc_unlock+0x8>)
 800d632:	f7ff befb 	b.w	800d42c <__retarget_lock_release_recursive>
 800d636:	bf00      	nop
 800d638:	20010c98 	.word	0x20010c98

0800d63c <__sflush_r>:
 800d63c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d644:	0716      	lsls	r6, r2, #28
 800d646:	4605      	mov	r5, r0
 800d648:	460c      	mov	r4, r1
 800d64a:	d454      	bmi.n	800d6f6 <__sflush_r+0xba>
 800d64c:	684b      	ldr	r3, [r1, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	dc02      	bgt.n	800d658 <__sflush_r+0x1c>
 800d652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d654:	2b00      	cmp	r3, #0
 800d656:	dd48      	ble.n	800d6ea <__sflush_r+0xae>
 800d658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	d045      	beq.n	800d6ea <__sflush_r+0xae>
 800d65e:	2300      	movs	r3, #0
 800d660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d664:	682f      	ldr	r7, [r5, #0]
 800d666:	6a21      	ldr	r1, [r4, #32]
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	d030      	beq.n	800d6ce <__sflush_r+0x92>
 800d66c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	0759      	lsls	r1, r3, #29
 800d672:	d505      	bpl.n	800d680 <__sflush_r+0x44>
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	1ad2      	subs	r2, r2, r3
 800d678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d67a:	b10b      	cbz	r3, 800d680 <__sflush_r+0x44>
 800d67c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d67e:	1ad2      	subs	r2, r2, r3
 800d680:	2300      	movs	r3, #0
 800d682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d684:	6a21      	ldr	r1, [r4, #32]
 800d686:	4628      	mov	r0, r5
 800d688:	47b0      	blx	r6
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	89a3      	ldrh	r3, [r4, #12]
 800d68e:	d106      	bne.n	800d69e <__sflush_r+0x62>
 800d690:	6829      	ldr	r1, [r5, #0]
 800d692:	291d      	cmp	r1, #29
 800d694:	d82b      	bhi.n	800d6ee <__sflush_r+0xb2>
 800d696:	4a2a      	ldr	r2, [pc, #168]	@ (800d740 <__sflush_r+0x104>)
 800d698:	40ca      	lsrs	r2, r1
 800d69a:	07d6      	lsls	r6, r2, #31
 800d69c:	d527      	bpl.n	800d6ee <__sflush_r+0xb2>
 800d69e:	2200      	movs	r2, #0
 800d6a0:	6062      	str	r2, [r4, #4]
 800d6a2:	04d9      	lsls	r1, r3, #19
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	6022      	str	r2, [r4, #0]
 800d6a8:	d504      	bpl.n	800d6b4 <__sflush_r+0x78>
 800d6aa:	1c42      	adds	r2, r0, #1
 800d6ac:	d101      	bne.n	800d6b2 <__sflush_r+0x76>
 800d6ae:	682b      	ldr	r3, [r5, #0]
 800d6b0:	b903      	cbnz	r3, 800d6b4 <__sflush_r+0x78>
 800d6b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6b6:	602f      	str	r7, [r5, #0]
 800d6b8:	b1b9      	cbz	r1, 800d6ea <__sflush_r+0xae>
 800d6ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	d002      	beq.n	800d6c8 <__sflush_r+0x8c>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f7ff fec2 	bl	800d44c <_free_r>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6cc:	e00d      	b.n	800d6ea <__sflush_r+0xae>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	47b0      	blx	r6
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	1c50      	adds	r0, r2, #1
 800d6d8:	d1c9      	bne.n	800d66e <__sflush_r+0x32>
 800d6da:	682b      	ldr	r3, [r5, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d0c6      	beq.n	800d66e <__sflush_r+0x32>
 800d6e0:	2b1d      	cmp	r3, #29
 800d6e2:	d001      	beq.n	800d6e8 <__sflush_r+0xac>
 800d6e4:	2b16      	cmp	r3, #22
 800d6e6:	d11e      	bne.n	800d726 <__sflush_r+0xea>
 800d6e8:	602f      	str	r7, [r5, #0]
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	e022      	b.n	800d734 <__sflush_r+0xf8>
 800d6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6f2:	b21b      	sxth	r3, r3
 800d6f4:	e01b      	b.n	800d72e <__sflush_r+0xf2>
 800d6f6:	690f      	ldr	r7, [r1, #16]
 800d6f8:	2f00      	cmp	r7, #0
 800d6fa:	d0f6      	beq.n	800d6ea <__sflush_r+0xae>
 800d6fc:	0793      	lsls	r3, r2, #30
 800d6fe:	680e      	ldr	r6, [r1, #0]
 800d700:	bf08      	it	eq
 800d702:	694b      	ldreq	r3, [r1, #20]
 800d704:	600f      	str	r7, [r1, #0]
 800d706:	bf18      	it	ne
 800d708:	2300      	movne	r3, #0
 800d70a:	eba6 0807 	sub.w	r8, r6, r7
 800d70e:	608b      	str	r3, [r1, #8]
 800d710:	f1b8 0f00 	cmp.w	r8, #0
 800d714:	dde9      	ble.n	800d6ea <__sflush_r+0xae>
 800d716:	6a21      	ldr	r1, [r4, #32]
 800d718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d71a:	4643      	mov	r3, r8
 800d71c:	463a      	mov	r2, r7
 800d71e:	4628      	mov	r0, r5
 800d720:	47b0      	blx	r6
 800d722:	2800      	cmp	r0, #0
 800d724:	dc08      	bgt.n	800d738 <__sflush_r+0xfc>
 800d726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d738:	4407      	add	r7, r0
 800d73a:	eba8 0800 	sub.w	r8, r8, r0
 800d73e:	e7e7      	b.n	800d710 <__sflush_r+0xd4>
 800d740:	20400001 	.word	0x20400001

0800d744 <_fflush_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	690b      	ldr	r3, [r1, #16]
 800d748:	4605      	mov	r5, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b913      	cbnz	r3, 800d754 <_fflush_r+0x10>
 800d74e:	2500      	movs	r5, #0
 800d750:	4628      	mov	r0, r5
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	b118      	cbz	r0, 800d75e <_fflush_r+0x1a>
 800d756:	6a03      	ldr	r3, [r0, #32]
 800d758:	b90b      	cbnz	r3, 800d75e <_fflush_r+0x1a>
 800d75a:	f7ff fc23 	bl	800cfa4 <__sinit>
 800d75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0f3      	beq.n	800d74e <_fflush_r+0xa>
 800d766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d768:	07d0      	lsls	r0, r2, #31
 800d76a:	d404      	bmi.n	800d776 <_fflush_r+0x32>
 800d76c:	0599      	lsls	r1, r3, #22
 800d76e:	d402      	bmi.n	800d776 <_fflush_r+0x32>
 800d770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d772:	f7ff fe5a 	bl	800d42a <__retarget_lock_acquire_recursive>
 800d776:	4628      	mov	r0, r5
 800d778:	4621      	mov	r1, r4
 800d77a:	f7ff ff5f 	bl	800d63c <__sflush_r>
 800d77e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d780:	07da      	lsls	r2, r3, #31
 800d782:	4605      	mov	r5, r0
 800d784:	d4e4      	bmi.n	800d750 <_fflush_r+0xc>
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	059b      	lsls	r3, r3, #22
 800d78a:	d4e1      	bmi.n	800d750 <_fflush_r+0xc>
 800d78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78e:	f7ff fe4d 	bl	800d42c <__retarget_lock_release_recursive>
 800d792:	e7dd      	b.n	800d750 <_fflush_r+0xc>

0800d794 <__swhatbuf_r>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	460c      	mov	r4, r1
 800d798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d79c:	2900      	cmp	r1, #0
 800d79e:	b096      	sub	sp, #88	@ 0x58
 800d7a0:	4615      	mov	r5, r2
 800d7a2:	461e      	mov	r6, r3
 800d7a4:	da0d      	bge.n	800d7c2 <__swhatbuf_r+0x2e>
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7ac:	f04f 0100 	mov.w	r1, #0
 800d7b0:	bf14      	ite	ne
 800d7b2:	2340      	movne	r3, #64	@ 0x40
 800d7b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	6031      	str	r1, [r6, #0]
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	b016      	add	sp, #88	@ 0x58
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	466a      	mov	r2, sp
 800d7c4:	f000 f848 	bl	800d858 <_fstat_r>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	dbec      	blt.n	800d7a6 <__swhatbuf_r+0x12>
 800d7cc:	9901      	ldr	r1, [sp, #4]
 800d7ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7d6:	4259      	negs	r1, r3
 800d7d8:	4159      	adcs	r1, r3
 800d7da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7de:	e7eb      	b.n	800d7b8 <__swhatbuf_r+0x24>

0800d7e0 <__smakebuf_r>:
 800d7e0:	898b      	ldrh	r3, [r1, #12]
 800d7e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7e4:	079d      	lsls	r5, r3, #30
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	d507      	bpl.n	800d7fc <__smakebuf_r+0x1c>
 800d7ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	6123      	str	r3, [r4, #16]
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	6163      	str	r3, [r4, #20]
 800d7f8:	b003      	add	sp, #12
 800d7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7fc:	ab01      	add	r3, sp, #4
 800d7fe:	466a      	mov	r2, sp
 800d800:	f7ff ffc8 	bl	800d794 <__swhatbuf_r>
 800d804:	9f00      	ldr	r7, [sp, #0]
 800d806:	4605      	mov	r5, r0
 800d808:	4639      	mov	r1, r7
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff fe8a 	bl	800d524 <_malloc_r>
 800d810:	b948      	cbnz	r0, 800d826 <__smakebuf_r+0x46>
 800d812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d816:	059a      	lsls	r2, r3, #22
 800d818:	d4ee      	bmi.n	800d7f8 <__smakebuf_r+0x18>
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	f043 0302 	orr.w	r3, r3, #2
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	e7e2      	b.n	800d7ec <__smakebuf_r+0xc>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	6020      	str	r0, [r4, #0]
 800d82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d82e:	81a3      	strh	r3, [r4, #12]
 800d830:	9b01      	ldr	r3, [sp, #4]
 800d832:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d836:	b15b      	cbz	r3, 800d850 <__smakebuf_r+0x70>
 800d838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d83c:	4630      	mov	r0, r6
 800d83e:	f000 f81d 	bl	800d87c <_isatty_r>
 800d842:	b128      	cbz	r0, 800d850 <__smakebuf_r+0x70>
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f023 0303 	bic.w	r3, r3, #3
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	431d      	orrs	r5, r3
 800d854:	81a5      	strh	r5, [r4, #12]
 800d856:	e7cf      	b.n	800d7f8 <__smakebuf_r+0x18>

0800d858 <_fstat_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4d07      	ldr	r5, [pc, #28]	@ (800d878 <_fstat_r+0x20>)
 800d85c:	2300      	movs	r3, #0
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	4611      	mov	r1, r2
 800d864:	602b      	str	r3, [r5, #0]
 800d866:	f7f4 fa64 	bl	8001d32 <_fstat>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	d102      	bne.n	800d874 <_fstat_r+0x1c>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	b103      	cbz	r3, 800d874 <_fstat_r+0x1c>
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	20010c94 	.word	0x20010c94

0800d87c <_isatty_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d06      	ldr	r5, [pc, #24]	@ (800d898 <_isatty_r+0x1c>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	602b      	str	r3, [r5, #0]
 800d888:	f7f4 fa63 	bl	8001d52 <_isatty>
 800d88c:	1c43      	adds	r3, r0, #1
 800d88e:	d102      	bne.n	800d896 <_isatty_r+0x1a>
 800d890:	682b      	ldr	r3, [r5, #0]
 800d892:	b103      	cbz	r3, 800d896 <_isatty_r+0x1a>
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	20010c94 	.word	0x20010c94

0800d89c <_sbrk_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	4d06      	ldr	r5, [pc, #24]	@ (800d8b8 <_sbrk_r+0x1c>)
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	4608      	mov	r0, r1
 800d8a6:	602b      	str	r3, [r5, #0]
 800d8a8:	f7f4 fa6c 	bl	8001d84 <_sbrk>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d102      	bne.n	800d8b6 <_sbrk_r+0x1a>
 800d8b0:	682b      	ldr	r3, [r5, #0]
 800d8b2:	b103      	cbz	r3, 800d8b6 <_sbrk_r+0x1a>
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	20010c94 	.word	0x20010c94

0800d8bc <_init>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	bf00      	nop
 800d8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c2:	bc08      	pop	{r3}
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	4770      	bx	lr

0800d8c8 <_fini>:
 800d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ca:	bf00      	nop
 800d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ce:	bc08      	pop	{r3}
 800d8d0:	469e      	mov	lr, r3
 800d8d2:	4770      	bx	lr
