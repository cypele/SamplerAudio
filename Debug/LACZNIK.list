
LACZNIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011210  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08011410  08011410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801160c  0801160c  00013098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801160c  0801160c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011614  08011614  00013098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011614  08011614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011618  08011618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0801161c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012104  20000098  080116b4  00013098  2**2
                  ALLOC
 10 .sdram        00000000  c0000000  c0000000  00013098  2**0
                  CONTENTS
 11 ._user_heap_stack 00000c04  2001219c  2001219c  0001319c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025642  00000000  00000000  000130c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005515  00000000  00000000  00038708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  0003dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001766  00000000  00000000  0003fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003408a  00000000  00000000  000411de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028a5c  00000000  00000000  00075268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012790f  00000000  00000000  0009dcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c55d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008300  00000000  00000000  001c5618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001cd918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000098 	.word	0x20000098
 800021c:	00000000 	.word	0x00000000
 8000220:	080113f8 	.word	0x080113f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000009c 	.word	0x2000009c
 800023c:	080113f8 	.word	0x080113f8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SAIx_Out_Init>:
        pbuffer1[i] = pbuffer2[i];
    }
}

static void SAIx_Out_Init(uint32_t AudioFreq)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8000614:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000616:	4a33      	ldr	r2, [pc, #204]	@ (80006e4 <SAIx_Out_Init+0xd8>)
 8000618:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000628:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8000630:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000650:	2200      	movs	r2, #0
 8000652:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000656:	2200      	movs	r2, #0
 8000658:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000662:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000666:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800066a:	2201      	movs	r2, #1
 800066c:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_out_sai.FrameInit.FrameLength       = 64;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000688:	2240      	movs	r2, #64	@ 0x40
 800068a:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800068e:	2220      	movs	r2, #32
 8000690:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 8000694:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000698:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 800069c:	2200      	movs	r2, #0
 800069e:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_out_sai.SlotInit.SlotNumber     = 4;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006bc:	220f      	movs	r2, #15
 80006be:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_out_sai);
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006c2:	f007 f8f3 	bl	80078ac <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <SAIx_Out_Init+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200050b4 	.word	0x200050b4
 80006e4:	40015804 	.word	0x40015804

080006e8 <SAIx_In_Init>:


static void SAIx_In_Init(uint32_t AudioFreq)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80006f0:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <SAIx_In_Init+0xd0>)
 80006f2:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SAIx_In_Init+0xd4>)
 80006f4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 80006f6:	4b30      	ldr	r3, [pc, #192]	@ (80007b8 <SAIx_In_Init+0xd0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <SAIx_In_Init+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000704:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800070c:	4a2a      	ldr	r2, [pc, #168]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000714:	2203      	movs	r2, #3
 8000716:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800072a:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800072c:	2200      	movs	r2, #0
 800072e:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000732:	2200      	movs	r2, #0
 8000734:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000738:	2201      	movs	r2, #1
 800073a:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000744:	2201      	movs	r2, #1
 8000746:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000756:	2210      	movs	r2, #16
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000762:	2240      	movs	r2, #64	@ 0x40
 8000764:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000768:	2220      	movs	r2, #32
 800076a:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800076e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000772:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8000774:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000776:	2200      	movs	r2, #0
 8000778:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800077c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000780:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000784:	2200      	movs	r2, #0
 8000786:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8000788:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800078a:	2200      	movs	r2, #0
 800078c:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000790:	2204      	movs	r2, #4
 8000792:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <SAIx_In_Init+0xd0>)
 8000796:	220f      	movs	r2, #15
 8000798:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_in_sai);
 800079a:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <SAIx_In_Init+0xd0>)
 800079c:	f007 f886 	bl	80078ac <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <SAIx_In_Init+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <SAIx_In_Init+0xd0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20005138 	.word	0x20005138
 80007bc:	40015824 	.word	0x40015824

080007c0 <SAIx_In_DeInit>:


static void SAIx_In_DeInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <SAIx_In_DeInit+0x24>)
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <SAIx_In_DeInit+0x28>)
 80007c8:	601a      	str	r2, [r3, #0]
    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <SAIx_In_DeInit+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <SAIx_In_DeInit+0x24>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80007d8:	601a      	str	r2, [r3, #0]

    HAL_SAI_DeInit(&haudio_in_sai);
 80007da:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <SAIx_In_DeInit+0x24>)
 80007dc:	f007 f9e4 	bl	8007ba8 <HAL_SAI_DeInit>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20005138 	.word	0x20005138
 80007e8:	40015824 	.word	0x40015824

080007ec <SAIx_Out_DeInit>:


static void SAIx_Out_DeInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <SAIx_Out_DeInit+0x24>)
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <SAIx_Out_DeInit+0x28>)
 80007f4:	601a      	str	r2, [r3, #0]
    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <SAIx_Out_DeInit+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <SAIx_Out_DeInit+0x24>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000804:	601a      	str	r2, [r3, #0]

    HAL_SAI_DeInit(&haudio_out_sai);
 8000806:	4802      	ldr	r0, [pc, #8]	@ (8000810 <SAIx_Out_DeInit+0x24>)
 8000808:	f007 f9ce 	bl	8007ba8 <HAL_SAI_DeInit>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200050b4 	.word	0x200050b4
 8000814:	40015804 	.word	0x40015804

08000818 <SAI_Clock_Configuration>:

void SAI_Clock_Configuration(uint32_t AudioFreq)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0a6      	sub	sp, #152	@ 0x98
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2290      	movs	r2, #144	@ 0x90
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f010 f909 	bl	8010a40 <memset>

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4618      	mov	r0, r3
 8000834:	f006 fda8 	bl	8007388 <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if ((AudioFreq == AUDIO_FREQUENCY_11K) ||
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800083e:	4293      	cmp	r3, r2
 8000840:	d009      	beq.n	8000856 <SAI_Clock_Configuration+0x3e>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f245 6222 	movw	r2, #22050	@ 0x5622
 8000848:	4293      	cmp	r3, r2
 800084a:	d004      	beq.n	8000856 <SAI_Clock_Configuration+0x3e>
        (AudioFreq == AUDIO_FREQUENCY_22K) ||
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000852:	4293      	cmp	r3, r2
 8000854:	d112      	bne.n	800087c <SAI_Clock_Configuration+0x64>
        (AudioFreq == AUDIO_FREQUENCY_44K))
    {
        /* Configure PLLSAI prescalers for ~11.289 MHz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000856:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800085a:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800085c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8000862:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8000866:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800086c:	2313      	movs	r3, #19
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4618      	mov	r0, r3
 8000876:	f006 f95f 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	e011      	b.n	80008a0 <SAI_Clock_Configuration+0x88>
    }
    else
    {
        /* Configure PLLSAI prescalers for ~49.142 MHz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800087c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000880:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8000882:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000886:	64bb      	str	r3, [r7, #72]	@ 0x48
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8000888:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800088c:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800088e:	2307      	movs	r3, #7
 8000890:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4618      	mov	r0, r3
 800089c:	f006 f94c 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
    }

    /* Route SAI2 as source for DFSDM1 audio clock */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 80008a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
    rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 80008a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80008aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 f940 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80008b8:	f006 f90a 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <SAI_Clock_Configuration+0xd0>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 faf1 	bl	8003eae <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f003 fafb 	bl	8003ec8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295
 80008da:	f003 fabe 	bl	8003e5a <HAL_NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3798      	adds	r7, #152	@ 0x98
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	10624dd3 	.word	0x10624dd3

080008ec <Sai_Out_MspInit>:



void Sai_Out_MspInit(SAI_HandleTypeDef *hsai)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80008f4:	4b48      	ldr	r3, [pc, #288]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f8:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 80008fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000900:	4b45      	ldr	r3, [pc, #276]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	69bb      	ldr	r3, [r7, #24]


  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800090c:	4b42      	ldr	r3, [pc, #264]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a41      	ldr	r2, [pc, #260]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 8000912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8000924:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a3b      	ldr	r2, [pc, #236]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000930:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800093c:	2370      	movs	r3, #112	@ 0x70
 800093e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800094c:	2306      	movs	r3, #6
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <Sai_Out_MspInit+0x130>)
 8000958:	f004 fb28 	bl	8004fac <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482e      	ldr	r0, [pc, #184]	@ (8000a20 <Sai_Out_MspInit+0x134>)
 8000968:	f004 fb20 	bl	8004fac <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a29      	ldr	r2, [pc, #164]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 8000972:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <Sai_Out_MspInit+0x12c>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a26      	ldr	r2, [pc, #152]	@ (8000a24 <Sai_Out_MspInit+0x138>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d137      	bne.n	80009fe <Sai_Out_MspInit+0x112>
  {
    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 8000996:	2240      	movs	r2, #64	@ 0x40
 8000998:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b6:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009be:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009c6:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <Sai_Out_MspInit+0x140>)
 80009e4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009f4:	f003 ff14 	bl	8004820 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <Sai_Out_MspInit+0x13c>)
 80009fa:	f003 fe63 	bl	80046c4 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210e      	movs	r1, #14
 8000a02:	2039      	movs	r0, #57	@ 0x39
 8000a04:	f003 fa29 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000a08:	2039      	movs	r0, #57	@ 0x39
 8000a0a:	f003 fa42 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40015804 	.word	0x40015804
 8000a28:	200051bc 	.word	0x200051bc
 8000a2c:	40026428 	.word	0x40026428

08000a30 <Sai_In_MspInit>:


void Sai_In_MspInit(SAI_HandleTypeDef *hsai)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	@ 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000a38:	4b50      	ldr	r3, [pc, #320]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a44:	4b4d      	ldr	r3, [pc, #308]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000a50:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a49      	ldr	r2, [pc, #292]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5c:	4b47      	ldr	r3, [pc, #284]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	483f      	ldr	r0, [pc, #252]	@ (8000b80 <Sai_In_MspInit+0x150>)
 8000a84:	f004 fa92 	bl	8004fac <HAL_GPIO_Init>

    /* Enable Audio INT GPIO clock */
    AUDIO_IN_INT_GPIO_ENABLE();
 8000a88:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    /* Audio INT pin configuration: input */
    gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4832      	ldr	r0, [pc, #200]	@ (8000b84 <Sai_In_MspInit+0x154>)
 8000aba:	f004 fa77 	bl	8004fac <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000abe:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <Sai_In_MspInit+0x14c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    if (hsai->Instance == AUDIO_IN_SAIx)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a2b      	ldr	r2, [pc, #172]	@ (8000b88 <Sai_In_MspInit+0x158>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d138      	bne.n	8000b52 <Sai_In_MspInit+0x122>
    {
        /* Configure the hdma_sai_rx handle parameters */
        hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ae6:	605a      	str	r2, [r3, #4]
        hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
        hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
        hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afa:	611a      	str	r2, [r3, #16]
        hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b02:	615a      	str	r2, [r3, #20]
        hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	619a      	str	r2, [r3, #24]
        hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b12:	61da      	str	r2, [r3, #28]
        hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b1a:	621a      	str	r2, [r3, #32]
        hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
        hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
        hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
        hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	@ 0x30

        hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <Sai_In_MspInit+0x160>)
 8000b38:	601a      	str	r2, [r3, #0]

        /* Associate the DMA handle */
        __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b3e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Deinitialize the Stream for new transfer */
        HAL_DMA_DeInit(&hdma_sai_rx);
 8000b46:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b48:	f003 fe6a 	bl	8004820 <HAL_DMA_DeInit>

        /* Configure the DMA Stream */
        HAL_DMA_Init(&hdma_sai_rx);
 8000b4c:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <Sai_In_MspInit+0x15c>)
 8000b4e:	f003 fdb9 	bl	80046c4 <HAL_DMA_Init>
    }

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	203c      	movs	r0, #60	@ 0x3c
 8000b58:	f003 f97f 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000b5c:	203c      	movs	r0, #60	@ 0x3c
 8000b5e:	f003 f998 	bl	8003e92 <HAL_NVIC_EnableIRQ>

    /* Audio INT IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	2028      	movs	r0, #40	@ 0x28
 8000b68:	f003 f977 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8000b6c:	2028      	movs	r0, #40	@ 0x28
 8000b6e:	f003 f990 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	@ 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40022400 	.word	0x40022400
 8000b88:	40015824 	.word	0x40015824
 8000b8c:	2000521c 	.word	0x2000521c
 8000b90:	40026470 	.word	0x40026470

08000b94 <CodekInit>:



void CodekInit(AUDIO_DrvTypeDef  *audio_drv, uint32_t AudioFreq)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
    audio_drv->Reset(AUDIO_I2C_ADDRESS);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba2:	2034      	movs	r0, #52	@ 0x34
 8000ba4:	4798      	blx	r3

    /* Inicjalizacja kodeka */
    audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681c      	ldr	r4, [r3, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2264      	movs	r2, #100	@ 0x64
 8000bae:	f240 3102 	movw	r1, #770	@ 0x302
 8000bb2:	2034      	movs	r0, #52	@ 0x34
 8000bb4:	47a0      	blx	r4

}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
	...

08000bc0 <AudioInit>:


void AudioInit(uint32_t AudioFreq)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	SAIx_In_DeInit();
 8000bc8:	f7ff fdfa 	bl	80007c0 <SAIx_In_DeInit>
	SAIx_Out_DeInit();
 8000bcc:	f7ff fe0e 	bl	80007ec <SAIx_Out_DeInit>
	SAI_Clock_Configuration(AudioFreq);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fe21 	bl	8000818 <SAI_Clock_Configuration>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <AudioInit+0x5c>)
 8000bd8:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <AudioInit+0x60>)
 8000bda:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <AudioInit+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <AudioInit+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
    if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <AudioInit+0x64>)
 8000be4:	f007 f9d0 	bl	8007f88 <HAL_SAI_GetState>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d105      	bne.n	8000bfa <AudioInit+0x3a>
    {
    	Sai_Out_MspInit(&haudio_out_sai);
 8000bee:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <AudioInit+0x5c>)
 8000bf0:	f7ff fe7c 	bl	80008ec <Sai_Out_MspInit>
    	Sai_In_MspInit(&haudio_in_sai);
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <AudioInit+0x64>)
 8000bf6:	f7ff ff1b 	bl	8000a30 <Sai_In_MspInit>
    }
    SAIx_Out_Init(AudioFreq);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fd06 	bl	800060c <SAIx_Out_Init>
    SAIx_In_Init(AudioFreq);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fd71 	bl	80006e8 <SAIx_In_Init>
    CodekInit(audio_drv, AudioFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <AudioInit+0x6c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffc1 	bl	8000b94 <CodekInit>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200050b4 	.word	0x200050b4
 8000c20:	40015804 	.word	0x40015804
 8000c24:	20005138 	.word	0x20005138
 8000c28:	40015824 	.word	0x40015824
 8000c2c:	20000000 	.word	0x20000000

08000c30 <StartRecordTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecordTask */
void StartRecordTask(void const * argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	@ 0x38
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    int recordingComplete = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_StatusTypeDef res;
    xRecordingTaskHandle = xTaskGetCurrentTaskHandle();
 8000c3c:	f00e ff7a 	bl	800fb34 <xTaskGetCurrentTaskHandle>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a5f      	ldr	r2, [pc, #380]	@ (8000dc0 <StartRecordTask+0x190>)
 8000c44:	6013      	str	r3, [r2, #0]
    AudioChunk_t chunk;

    for (;;)
    {
        TickType_t startTime = xTaskGetTickCount();
 8000c46:	f00e fc3b 	bl	800f4c0 <xTaskGetTickCount>
 8000c4a:	6238      	str	r0, [r7, #32]
        TickType_t stopTime = startTime + pdMS_TO_TICKS(60000);
 8000c4c:	6a3a      	ldr	r2, [r7, #32]
 8000c4e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8000c52:	4413      	add	r3, r2
 8000c54:	61fb      	str	r3, [r7, #28]
        recordingComplete = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
        audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000dc4 <StartRecordTask+0x194>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]

        if (xSemaphoreTake(recordTriggerSemaphore, portMAX_DELAY) == pdTRUE) {
 8000c60:	4b59      	ldr	r3, [pc, #356]	@ (8000dc8 <StartRecordTask+0x198>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00d fe05 	bl	800e878 <xQueueSemaphoreTake>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d1e8      	bne.n	8000c46 <StartRecordTask+0x16>

            // Initialize the DMA to receive and transmit audio data
            if (HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)record_buffer, BUFFER_SIZE_SAMPLES) != HAL_OK)
 8000c74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c78:	4954      	ldr	r1, [pc, #336]	@ (8000dcc <StartRecordTask+0x19c>)
 8000c7a:	4855      	ldr	r0, [pc, #340]	@ (8000dd0 <StartRecordTask+0x1a0>)
 8000c7c:	f007 f8ec 	bl	8007e58 <HAL_SAI_Receive_DMA>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <StartRecordTask+0x5a>
            {
                Error_Handler();
 8000c86:	f000 fe41 	bl	800190c <Error_Handler>
            }
            if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*)play_buffer, BUFFER_SIZE_SAMPLES) != HAL_OK)
 8000c8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c8e:	4951      	ldr	r1, [pc, #324]	@ (8000dd4 <StartRecordTask+0x1a4>)
 8000c90:	4851      	ldr	r0, [pc, #324]	@ (8000dd8 <StartRecordTask+0x1a8>)
 8000c92:	f007 f831 	bl	8007cf8 <HAL_SAI_Transmit_DMA>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d07d      	beq.n	8000d98 <StartRecordTask+0x168>
            {
                Error_Handler();
 8000c9c:	f000 fe36 	bl	800190c <Error_Handler>
                return;
 8000ca0:	e08b      	b.n	8000dba <StartRecordTask+0x18a>
            }

            while (!recordingComplete)
            {
                ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(portMAX_DELAY)); // Block until notified
 8000ca2:	494e      	ldr	r1, [pc, #312]	@ (8000ddc <StartRecordTask+0x1ac>)
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f00f f933 	bl	800ff10 <ulTaskNotifyTake>

                if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000caa:	4b46      	ldr	r3, [pc, #280]	@ (8000dc4 <StartRecordTask+0x194>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d072      	beq.n	8000d98 <StartRecordTask+0x168>
                {
            		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	484a      	ldr	r0, [pc, #296]	@ (8000de0 <StartRecordTask+0x1b0>)
 8000cb8:	f004 fc48 	bl	800554c <HAL_GPIO_WritePin>
                    int16_t* source_ptr = NULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34

                    if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8000cc0:	4b40      	ldr	r3, [pc, #256]	@ (8000dc4 <StartRecordTask+0x194>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d102      	bne.n	8000cce <StartRecordTask+0x9e>
                    {
                        source_ptr = &record_buffer[0];
 8000cc8:	4b40      	ldr	r3, [pc, #256]	@ (8000dcc <StartRecordTask+0x19c>)
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ccc:	e005      	b.n	8000cda <StartRecordTask+0xaa>
                    }
                    else if (audio_rec_buffer_state == BUFFER_OFFSET_FULL)
 8000cce:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <StartRecordTask+0x194>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d101      	bne.n	8000cda <StartRecordTask+0xaa>
                    {
                        source_ptr = &record_buffer[BUFFER_SIZE_SAMPLES / 2];
 8000cd6:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <StartRecordTask+0x1b4>)
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
                    }

                    // Skopiuj tylko slot 0 i 2 (L i R)
                    size_t out_idx = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
                    for (size_t i = 0; i < BUFFER_SIZE_SAMPLES / 2; i += 4)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce2:	e01b      	b.n	8000d1c <StartRecordTask+0xec>
                    {
                        compressed_buffer[out_idx++] = source_ptr[i];     // slot 0 - Left
 8000ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cea:	441a      	add	r2, r3
 8000cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cee:	1c59      	adds	r1, r3, #1
 8000cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8000cf2:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8000de8 <StartRecordTask+0x1b8>)
 8000cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                        compressed_buffer[out_idx++] = source_ptr[i + 2]; // slot 2 - Right
 8000cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cfe:	3302      	adds	r3, #2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d04:	441a      	add	r2, r3
 8000d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d08:	1c59      	adds	r1, r3, #1
 8000d0a:	6339      	str	r1, [r7, #48]	@ 0x30
 8000d0c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000d10:	4a35      	ldr	r2, [pc, #212]	@ (8000de8 <StartRecordTask+0x1b8>)
 8000d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    for (size_t i = 0; i < BUFFER_SIZE_SAMPLES / 2; i += 4)
 8000d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d18:	3304      	adds	r3, #4
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d22:	d3df      	bcc.n	8000ce4 <StartRecordTask+0xb4>
                    }

                    chunk.data = compressed_buffer;
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <StartRecordTask+0x1b8>)
 8000d26:	617b      	str	r3, [r7, #20]
                    chunk.length = out_idx; // liczba próbek stereo
 8000d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d2a:	61bb      	str	r3, [r7, #24]

                    xQueueSend(AudioQueueHandle, &chunk, portMAX_DELAY);
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <StartRecordTask+0x1bc>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	f107 0114 	add.w	r1, r7, #20
 8000d34:	2300      	movs	r3, #0
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3a:	f00d fa6f 	bl	800e21c <xQueueGenericSend>
                    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <StartRecordTask+0x194>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

                    if (xTaskGetTickCount() >= stopTime)
 8000d44:	f00e fbbc 	bl	800f4c0 <xTaskGetTickCount>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d823      	bhi.n	8000d98 <StartRecordTask+0x168>
                    {

                    	for(int i=0; i<10; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d54:	e00e      	b.n	8000d74 <StartRecordTask+0x144>
                    	{
                    		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000d56:	2120      	movs	r1, #32
 8000d58:	4821      	ldr	r0, [pc, #132]	@ (8000de0 <StartRecordTask+0x1b0>)
 8000d5a:	f004 fc10 	bl	800557e <HAL_GPIO_TogglePin>
                    		osDelay(330);
 8000d5e:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8000d62:	f00c fe13 	bl	800d98c <osDelay>
                    		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000d66:	2120      	movs	r1, #32
 8000d68:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <StartRecordTask+0x1b0>)
 8000d6a:	f004 fc08 	bl	800557e <HAL_GPIO_TogglePin>
                    	for(int i=0; i<10; i++)
 8000d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d70:	3301      	adds	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	dded      	ble.n	8000d56 <StartRecordTask+0x126>
                    	}

                        HAL_SAI_DMAStop(&haudio_in_sai);
 8000d7a:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <StartRecordTask+0x1a0>)
 8000d7c:	f006 ff49 	bl	8007c12 <HAL_SAI_DMAStop>
                        HAL_SAI_DMAStop(&haudio_out_sai);
 8000d80:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <StartRecordTask+0x1a8>)
 8000d82:	f006 ff46 	bl	8007c12 <HAL_SAI_DMAStop>
                		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8c:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <StartRecordTask+0x1b0>)
 8000d8e:	f004 fbdd 	bl	800554c <HAL_GPIO_WritePin>

                        recordingComplete = 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8000d96:	e002      	b.n	8000d9e <StartRecordTask+0x16e>
            while (!recordingComplete)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d081      	beq.n	8000ca2 <StartRecordTask+0x72>
                    }
                }
            }

            // Send end signal to the queue
            AudioChunk_t endSignal = { .data = NULL, .length = 0 };
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
            xQueueSend(AudioQueueHandle, &endSignal, portMAX_DELAY);
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <StartRecordTask+0x1bc>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	f107 010c 	add.w	r1, r7, #12
 8000dae:	2300      	movs	r3, #0
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	f00d fa32 	bl	800e21c <xQueueGenericSend>
    {
 8000db8:	e745      	b.n	8000c46 <StartRecordTask+0x16>
        }
    }
}
 8000dba:	3738      	adds	r7, #56	@ 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000598c 	.word	0x2000598c
 8000dc4:	2000527c 	.word	0x2000527c
 8000dc8:	20005984 	.word	0x20005984
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	20005138 	.word	0x20005138
 8000dd4:	200020b4 	.word	0x200020b4
 8000dd8:	200050b4 	.word	0x200050b4
 8000ddc:	00418936 	.word	0x00418936
 8000de0:	40022400 	.word	0x40022400
 8000de4:	200010b4 	.word	0x200010b4
 8000de8:	200040b4 	.word	0x200040b4
 8000dec:	20005980 	.word	0x20005980

08000df0 <StartSDCardTask>:




void StartSDCardTask(void const * argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09e      	sub	sp, #120	@ 0x78
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	6078      	str	r0, [r7, #4]
    char filename[32];
    FRESULT res;
    AudioChunk_t receivedChunk;
    bool recordingInProgress = true; // Flag to track if recording is in progress
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    for (;;)
    {
        // Wait for data in the queue
        if (xQueueReceive(AudioQueueHandle, &receivedChunk, portMAX_DELAY) == pdTRUE)
 8000dfe:	4b41      	ldr	r3, [pc, #260]	@ (8000f04 <StartSDCardTask+0x114>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000e06:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00d fc4c 	bl	800e6a8 <xQueueReceive>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d1f3      	bne.n	8000dfe <StartSDCardTask+0xe>
        {
            // Check if we received the NULL pointer signaling end of recording
            if (receivedChunk.data == NULL && recordingInProgress)
 8000e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12b      	bne.n	8000e74 <StartSDCardTask+0x84>
 8000e1c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d027      	beq.n	8000e74 <StartSDCardTask+0x84>
            {
                // Prepare and write the correct WAV header
                uint32_t fileSize = f_size(&SDFile);
 8000e24:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	66bb      	str	r3, [r7, #104]	@ 0x68
                WAV_Header finalHeader;
                FillWavHeader(&finalHeader, 44100, 16, 2, fileSize - sizeof(WAV_Header)); // sample rate, bits, channels
 8000e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e2c:	3b2c      	subs	r3, #44	@ 0x2c
 8000e2e:	f107 000c 	add.w	r0, r7, #12
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2302      	movs	r3, #2
 8000e36:	2210      	movs	r2, #16
 8000e38:	f64a 4144 	movw	r1, #44100	@ 0xac44
 8000e3c:	f000 f89a 	bl	8000f74 <FillWavHeader>

                // Write the correct WAV header (now with the correct size values)
                UINT headerWritten;
                f_lseek(&SDFile, 0);  // Go back to the beginning of the file to write the updated header
 8000e40:	2100      	movs	r1, #0
 8000e42:	4831      	ldr	r0, [pc, #196]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e44:	f00c f9cf 	bl	800d1e6 <f_lseek>
                f_write(&SDFile, &finalHeader, sizeof(WAV_Header), &headerWritten);
 8000e48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e4c:	f107 010c 	add.w	r1, r7, #12
 8000e50:	222c      	movs	r2, #44	@ 0x2c
 8000e52:	482d      	ldr	r0, [pc, #180]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e54:	f00b ff6b 	bl	800cd2e <f_write>

                // Final cleanup
                UpdateWavHeader(&SDFile); // Update chunk sizes before closing
 8000e58:	482b      	ldr	r0, [pc, #172]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e5a:	f000 f8f5 	bl	8001048 <UpdateWavHeader>
                f_close(&SDFile);  // Close the file when the end of recording is signaled
 8000e5e:	482a      	ldr	r0, [pc, #168]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e60:	f00c f992 	bl	800d188 <f_close>
                HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000e64:	2120      	movs	r1, #32
 8000e66:	4829      	ldr	r0, [pc, #164]	@ (8000f0c <StartSDCardTask+0x11c>)
 8000e68:	f004 fb89 	bl	800557e <HAL_GPIO_TogglePin>
                recordingInProgress = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                continue;
 8000e72:	e045      	b.n	8000f00 <StartSDCardTask+0x110>
            }

            // If the file is not open, open it
            if (SDFile.obj.fs == NULL)
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <StartSDCardTask+0x118>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12d      	bne.n	8000ed8 <StartSDCardTask+0xe8>
            {
                if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4924      	ldr	r1, [pc, #144]	@ (8000f10 <StartSDCardTask+0x120>)
 8000e80:	4824      	ldr	r0, [pc, #144]	@ (8000f14 <StartSDCardTask+0x124>)
 8000e82:	f00b fd2f 	bl	800c8e4 <f_mount>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <StartSDCardTask+0xa0>
                    Error_Handler();
 8000e8c:	f000 fd3e 	bl	800190c <Error_Handler>

                GenerateNextFilename(filename);
 8000e90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f843 	bl	8000f20 <GenerateNextFilename>
                if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000e9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e9e:	220a      	movs	r2, #10
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <StartSDCardTask+0x118>)
 8000ea4:	f00b fd82 	bl	800c9ac <f_open>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <StartSDCardTask+0xc2>
                    Error_Handler();
 8000eae:	f000 fd2d 	bl	800190c <Error_Handler>

                // Write dummy WAV header (we'll fix it at the end)
                res = f_write(&SDFile, &header, sizeof(WAV_Header), &byteswritten);
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <StartSDCardTask+0x128>)
 8000eb4:	222c      	movs	r2, #44	@ 0x2c
 8000eb6:	4919      	ldr	r1, [pc, #100]	@ (8000f1c <StartSDCardTask+0x12c>)
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <StartSDCardTask+0x118>)
 8000eba:	f00b ff38 	bl	800cd2e <f_write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                if ((byteswritten != sizeof(WAV_Header)) || (res != FR_OK))
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <StartSDCardTask+0x128>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000eca:	d103      	bne.n	8000ed4 <StartSDCardTask+0xe4>
 8000ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <StartSDCardTask+0xe8>
                {
                    Error_Handler();
 8000ed4:	f000 fd1a 	bl	800190c <Error_Handler>
                }
            }

            // Write audio chunk
            res = f_write(&SDFile, receivedChunk.data, receivedChunk.length * sizeof(int16_t), &byteswritten);
 8000ed8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000edc:	005a      	lsls	r2, r3, #1
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <StartSDCardTask+0x128>)
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <StartSDCardTask+0x118>)
 8000ee2:	f00b ff24 	bl	800cd2e <f_write>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (res != FR_OK || byteswritten == 0)
 8000eec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <StartSDCardTask+0x10c>
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <StartSDCardTask+0x128>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d180      	bne.n	8000dfe <StartSDCardTask+0xe>
                Error_Handler();
 8000efc:	f000 fd06 	bl	800190c <Error_Handler>
        if (xQueueReceive(AudioQueueHandle, &receivedChunk, portMAX_DELAY) == pdTRUE)
 8000f00:	e77d      	b.n	8000dfe <StartSDCardTask+0xe>
 8000f02:	bf00      	nop
 8000f04:	20005980 	.word	0x20005980
 8000f08:	20005c60 	.word	0x20005c60
 8000f0c:	40022400 	.word	0x40022400
 8000f10:	20005a28 	.word	0x20005a28
 8000f14:	20005a2c 	.word	0x20005a2c
 8000f18:	200052b0 	.word	0x200052b0
 8000f1c:	20005284 	.word	0x20005284

08000f20 <GenerateNextFilename>:




void GenerateNextFilename(char* filenameBuffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    static uint16_t fileIndex = 1;
    FRESULT res;
    FILINFO fno;

    do {
        sprintf(filenameBuffer, "AUDIO%03d.WAV", fileIndex++);
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <GenerateNextFilename+0x4c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	b291      	uxth	r1, r2
 8000f30:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <GenerateNextFilename+0x4c>)
 8000f32:	8011      	strh	r1, [r2, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	490e      	ldr	r1, [pc, #56]	@ (8000f70 <GenerateNextFilename+0x50>)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f00f fd5f 	bl	80109fc <siprintf>
        res = f_stat(filenameBuffer, &fno);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f00c fba1 	bl	800d68c <f_stat>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    } while (res == FR_OK && fileIndex < 1000); // Sprawdź do AUDIO999.WAV
 8000f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <GenerateNextFilename+0x42>
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <GenerateNextFilename+0x4c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f60:	d3e2      	bcc.n	8000f28 <GenerateNextFilename+0x8>
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	08011410 	.word	0x08011410

08000f74 <FillWavHeader>:
 * @param bitsPerSample Number of bits per sample (e.g., 16 for 16-bit audio).
 * @param numChannels Number of channels (1 for mono, 2 for stereo).
 * @param dataSize Size of the audio data (in bytes), excluding the WAV header.
 */
void FillWavHeader(WAV_Header* header, uint32_t sampleRate, uint16_t bitsPerSample, uint16_t numChannels, uint32_t dataSize)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	460b      	mov	r3, r1
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	80bb      	strh	r3, [r7, #4]
    memcpy(header->riff, "RIFF", 4);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	492a      	ldr	r1, [pc, #168]	@ (8001038 <FillWavHeader+0xc4>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00f fde7 	bl	8010b64 <memcpy>
    header->overall_size = dataSize + 36;
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	605a      	str	r2, [r3, #4]
    memcpy(header->wave, "WAVE", 4);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4925      	ldr	r1, [pc, #148]	@ (800103c <FillWavHeader+0xc8>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00f fddb 	bl	8010b64 <memcpy>
    memcpy(header->fmt_chunk_marker, "fmt ", 4);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4922      	ldr	r1, [pc, #136]	@ (8001040 <FillWavHeader+0xcc>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00f fdd4 	bl	8010b64 <memcpy>
    header->length_of_fmt = 16;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f042 0210 	orr.w	r2, r2, #16
 8000fc4:	741a      	strb	r2, [r3, #16]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	745a      	strb	r2, [r3, #17]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	749a      	strb	r2, [r3, #18]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	74da      	strb	r2, [r3, #19]
    header->format_type = 1;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	751a      	strb	r2, [r3, #20]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	755a      	strb	r2, [r3, #21]
    header->channels = numChannels;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	82da      	strh	r2, [r3, #22]
    header->sample_rate = sampleRate;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	619a      	str	r2, [r3, #24]
    header->byterate = sampleRate * numChannels * bitsPerSample / 8;
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	61da      	str	r2, [r3, #28]
    header->block_align = numChannels * bitsPerSample / 8;
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	da00      	bge.n	800100e <FillWavHeader+0x9a>
 800100c:	3307      	adds	r3, #7
 800100e:	10db      	asrs	r3, r3, #3
 8001010:	b29a      	uxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	841a      	strh	r2, [r3, #32]
    header->bits_per_sample = bitsPerSample;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	845a      	strh	r2, [r3, #34]	@ 0x22
    memcpy(header->data_chunk_header, "data", 4);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3324      	adds	r3, #36	@ 0x24
 8001020:	2204      	movs	r2, #4
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <FillWavHeader+0xd0>)
 8001024:	4618      	mov	r0, r3
 8001026:	f00f fd9d 	bl	8010b64 <memcpy>
    header->data_size = dataSize;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08011420 	.word	0x08011420
 800103c:	08011428 	.word	0x08011428
 8001040:	08011430 	.word	0x08011430
 8001044:	08011438 	.word	0x08011438

08001048 <UpdateWavHeader>:




void UpdateWavHeader(FIL* SDFile) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    FRESULT res;
    uint32_t fileSize = f_size(SDFile);  // Całkowity rozmiar pliku (po zapisaniu danych audio)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	613b      	str	r3, [r7, #16]
    uint32_t dataSize = fileSize - sizeof(WAV_Header);  // Rozmiar danych audio (po odjęciu nagłówka)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3b2c      	subs	r3, #44	@ 0x2c
 800105a:	60fb      	str	r3, [r7, #12]

    // Przesunięcie na miejsce ChunkSize (offset 4)
    res = f_lseek(SDFile, 4);
 800105c:	2104      	movs	r1, #4
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f00c f8c1 	bl	800d1e6 <f_lseek>
 8001064:	4603      	mov	r3, r0
 8001066:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK) {
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <UpdateWavHeader+0x2a>
        Error_Handler();
 800106e:	f000 fc4d 	bl	800190c <Error_Handler>
    }

    // Zaktualizowanie ChunkSize (rozmiar całego pliku - 8)
    res = f_write(SDFile, &fileSize, sizeof(uint32_t), &byteswritten);
 8001072:	f107 0110 	add.w	r1, r7, #16
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <UpdateWavHeader+0x90>)
 8001078:	2204      	movs	r2, #4
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f00b fe57 	bl	800cd2e <f_write>
 8001080:	4603      	mov	r3, r0
 8001082:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK || byteswritten != sizeof(uint32_t)) {
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <UpdateWavHeader+0x4a>
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <UpdateWavHeader+0x90>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d001      	beq.n	8001096 <UpdateWavHeader+0x4e>
        Error_Handler();
 8001092:	f000 fc3b 	bl	800190c <Error_Handler>
    }

    // Przesunięcie na miejsce Subchunk2Size (offset 40)
    res = f_lseek(SDFile, 40);
 8001096:	2128      	movs	r1, #40	@ 0x28
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f00c f8a4 	bl	800d1e6 <f_lseek>
 800109e:	4603      	mov	r3, r0
 80010a0:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK) {
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <UpdateWavHeader+0x64>
        Error_Handler();
 80010a8:	f000 fc30 	bl	800190c <Error_Handler>
    }

    // Zaktualizowanie Subchunk2Size (rozmiar danych audio)
    res = f_write(SDFile, &dataSize, sizeof(uint32_t), &byteswritten);
 80010ac:	f107 010c 	add.w	r1, r7, #12
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <UpdateWavHeader+0x90>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f00b fe3a 	bl	800cd2e <f_write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK || byteswritten != sizeof(uint32_t)) {
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <UpdateWavHeader+0x84>
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <UpdateWavHeader+0x90>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d001      	beq.n	80010d0 <UpdateWavHeader+0x88>
        Error_Handler();
 80010cc:	f000 fc1e 	bl	800190c <Error_Handler>
    }
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200052b0 	.word	0x200052b0

080010dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <vApplicationGetIdleTaskMemory+0x2c>)
 80010ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <vApplicationGetIdleTaskMemory+0x30>)
 80010f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200052b4 	.word	0x200052b4
 800110c:	20005354 	.word	0x20005354

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b09a      	sub	sp, #104	@ 0x68
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f002 fd44 	bl	8003ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f883 	bl	8001224 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800111e:	f000 f8f1 	bl	8001304 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f000 fab7 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 8001126:	f000 fa7f 	bl	8001628 <MX_DMA_Init>
  MX_SDMMC2_SD_Init();
 800112a:	f000 fa2d 	bl	8001588 <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 800112e:	f000 fa4b 	bl	80015c8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001132:	f009 fb7d 	bl	800a830 <MX_FATFS_Init>
  MX_SAI1_Init();
 8001136:	f000 f965 	bl	8001404 <MX_SAI1_Init>
  MX_DFSDM1_Init();
 800113a:	f000 f90b 	bl	8001354 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  AudioInit(AUDIO_FREQUENCY_44K);
 800113e:	f64a 4044 	movw	r0, #44100	@ 0xac44
 8001142:	f7ff fd3d 	bl	8000bc0 <AudioInit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AudioQueue */
  osMessageQDef(AudioQueue, 4, AudioChunk_t);
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <main+0xec>)
 8001148:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800114c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AudioQueueHandle = osMessageCreate(osMessageQ(AudioQueue), NULL);
 8001152:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00c fd02 	bl	800db62 <osMessageCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <main+0xf0>)
 8001162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  recordTriggerSemaphore = xSemaphoreCreateBinary();
 8001164:	2203      	movs	r2, #3
 8001166:	2100      	movs	r1, #0
 8001168:	2001      	movs	r0, #1
 800116a:	f00c ff7e 	bl	800e06a <xQueueGenericCreate>
 800116e:	4603      	mov	r3, r0
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <main+0xf4>)
 8001172:	6013      	str	r3, [r2, #0]
  xBufferReadySemaphore = xSemaphoreCreateBinary();
 8001174:	2203      	movs	r2, #3
 8001176:	2100      	movs	r1, #0
 8001178:	2001      	movs	r0, #1
 800117a:	f00c ff76 	bl	800e06a <xQueueGenericCreate>
 800117e:	4603      	mov	r3, r0
 8001180:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <main+0xf8>)
 8001182:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */


  /* Create the thread(s) */
  /* definition and creation of SDCardTask */
  osThreadDef(SDCardTask, StartSDCardTask, osPriorityAboveNormal, 0, 1024);
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <main+0xfc>)
 8001186:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardTaskHandle = osThreadCreate(osThread(SDCardTask), NULL);
 8001198:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00c fba8 	bl	800d8f4 <osThreadCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001210 <main+0x100>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of GUI_Task */
  osThreadDef(GUI_Task, StartGUI_Task, osPriorityLow, 0, 512);
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <main+0x104>)
 80011ac:	f107 0420 	add.w	r4, r7, #32
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GUI_TaskHandle = osThreadCreate(osThread(GUI_Task), NULL);
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fb95 	bl	800d8f4 <osThreadCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <main+0x108>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Record_Task */
  osThreadDef(Record_Task, StartRecordTask, osPriorityHigh, 0, 2048);
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <main+0x10c>)
 80011d2:	1d3c      	adds	r4, r7, #4
 80011d4:	461d      	mov	r5, r3
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Record_TaskHandle = osThreadCreate(osThread(Record_Task), NULL);
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00c fb84 	bl	800d8f4 <osThreadCreate>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <main+0x110>)
 80011f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011f2:	f00c fb5c 	bl	800d8ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <main+0xe6>
 80011fa:	bf00      	nop
 80011fc:	08011440 	.word	0x08011440
 8001200:	20005980 	.word	0x20005980
 8001204:	20005984 	.word	0x20005984
 8001208:	20005988 	.word	0x20005988
 800120c:	0801145c 	.word	0x0801145c
 8001210:	20005974 	.word	0x20005974
 8001214:	08011484 	.word	0x08011484
 8001218:	20005978 	.word	0x20005978
 800121c:	080114ac 	.word	0x080114ac
 8001220:	2000597c 	.word	0x2000597c

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2234      	movs	r2, #52	@ 0x34
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f00f fc04 	bl	8010a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <SystemClock_Config+0xd8>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <SystemClock_Config+0xd8>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <SystemClock_Config+0xd8>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <SystemClock_Config+0xdc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <SystemClock_Config+0xdc>)
 8001266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <SystemClock_Config+0xdc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800128c:	2319      	movs	r3, #25
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001290:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129a:	2304      	movs	r3, #4
 800129c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129e:	2302      	movs	r3, #2
 80012a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 ffb2 	bl	8006210 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012b2:	f000 fb2b 	bl	800190c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b6:	f004 ff5b 	bl	8006170 <HAL_PWREx_EnableOverDrive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012c0:	f000 fb24 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2107      	movs	r1, #7
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fa42 	bl	800676c <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80012ee:	f000 fb0d 	bl	800190c <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0a4      	sub	sp, #144	@ 0x90
 8001308:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2290      	movs	r2, #144	@ 0x90
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00f fb95 	bl	8010a40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001316:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800131a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 429;
 800131c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8001320:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001322:	2302      	movs	r3, #2
 8001324:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 19;
 800132e:	2313      	movs	r3, #19
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001332:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f005 fbfc 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8001346:	f000 fae1 	bl	800190c <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3790      	adds	r7, #144	@ 0x90
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001358:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 800135a:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <MX_DFSDM1_Init+0xa4>)
 800135c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001364:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 8001366:	2201      	movs	r2, #1
 8001368:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 8001378:	2240      	movs	r2, #64	@ 0x40
 800137a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 800137e:	2201      	movs	r2, #1
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001382:	481c      	ldr	r0, [pc, #112]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 8001384:	f002 fe90 	bl	80040a8 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 800138a:	4a1d      	ldr	r2, [pc, #116]	@ (8001400 <MX_DFSDM1_Init+0xac>)
 800138c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 800139c:	2202      	movs	r2, #2
 800139e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <MX_DFSDM1_Init+0xa8>)
 80013d8:	f002 fd92 	bl	8003f00 <HAL_DFSDM_ChannelInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_DFSDM1_Init+0x92>
  {
    Error_Handler();
 80013e2:	f000 fa93 	bl	800190c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <MX_DFSDM1_Init+0xa0>)
 80013ec:	f002 ff36 	bl	800425c <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005554 	.word	0x20005554
 80013f8:	40017500 	.word	0x40017500
 80013fc:	200055a8 	.word	0x200055a8
 8001400:	40017400 	.word	0x40017400

08001404 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 0 */
    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001408:	f005 fb62 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 800140c:	4603      	mov	r3, r0
 800140e:	4a59      	ldr	r2, [pc, #356]	@ (8001574 <MX_SAI1_Init+0x170>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fd49 	bl	8003eae <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800141c:	2004      	movs	r0, #4
 800141e:	f002 fd53 	bl	8003ec8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	f04f 30ff 	mov.w	r0, #4294967295
 800142a:	f002 fd16 	bl	8003e5a <HAL_NVIC_SetPriority>
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800142e:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001430:	4a52      	ldr	r2, [pc, #328]	@ (800157c <MX_SAI1_Init+0x178>)
 8001432:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001434:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800143a:	4b4f      	ldr	r3, [pc, #316]	@ (8001578 <MX_SAI1_Init+0x174>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001440:	4b4d      	ldr	r3, [pc, #308]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001446:	4b4c      	ldr	r3, [pc, #304]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800144c:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <MX_SAI1_Init+0x174>)
 800144e:	2200      	movs	r2, #0
 8001450:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001452:	4b49      	ldr	r3, [pc, #292]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001458:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <MX_SAI1_Init+0x174>)
 800145a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001460:	4b45      	ldr	r3, [pc, #276]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001466:	4b44      	ldr	r3, [pc, #272]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001468:	2201      	movs	r2, #1
 800146a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 800146c:	4b42      	ldr	r3, [pc, #264]	@ (8001578 <MX_SAI1_Init+0x174>)
 800146e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001472:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001474:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <MX_SAI1_Init+0x174>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001480:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001486:	4b3c      	ldr	r3, [pc, #240]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 64;
 800148c:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <MX_SAI1_Init+0x174>)
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 32;
 8001492:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <MX_SAI1_Init+0x174>)
 8001494:	2220      	movs	r2, #32
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001498:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <MX_SAI1_Init+0x174>)
 800149a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800149e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014a0:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014b4:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014bc:	2204      	movs	r2, #4
 80014be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000000F;
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014c2:	220f      	movs	r2, #15
 80014c4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80014c6:	482c      	ldr	r0, [pc, #176]	@ (8001578 <MX_SAI1_Init+0x174>)
 80014c8:	f006 f9f0 	bl	80078ac <HAL_SAI_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_SAI1_Init+0xd2>
  {
    Error_Handler();
 80014d2:	f000 fa1b 	bl	800190c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <MX_SAI1_Init+0x180>)
 80014da:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80014e2:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014e4:	2203      	movs	r2, #3
 80014e6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80014fa:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <MX_SAI1_Init+0x17c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800150c:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_RELEASED;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001520:	2210      	movs	r2, #16
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 64;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001526:	2240      	movs	r2, #64	@ 0x40
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 32;
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800152c:	2220      	movs	r2, #32
 800152e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001532:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001536:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001540:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001544:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800154e:	2200      	movs	r2, #0
 8001550:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 4;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001554:	2204      	movs	r2, #4
 8001556:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000000F;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_SAI1_Init+0x17c>)
 800155a:	220f      	movs	r2, #15
 800155c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800155e:	4808      	ldr	r0, [pc, #32]	@ (8001580 <MX_SAI1_Init+0x17c>)
 8001560:	f006 f9a4 	bl	80078ac <HAL_SAI_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 800156a:	f000 f9cf 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	10624dd3 	.word	0x10624dd3
 8001578:	200055e0 	.word	0x200055e0
 800157c:	40015804 	.word	0x40015804
 8001580:	20005664 	.word	0x20005664
 8001584:	40015824 	.word	0x40015824

08001588 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 800158e:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <MX_SDMMC2_SD_Init+0x3c>)
 8001590:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <MX_SDMMC2_SD_Init+0x38>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	200057a8 	.word	0x200057a8
 80015c4:	40011c00 	.word	0x40011c00

080015c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_USART1_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART1_UART_Init+0x58>)
 800160c:	f007 ff10 	bl	8009430 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 f979 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200058ec 	.word	0x200058ec
 8001624:	40011000 	.word	0x40011000

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_DMA_Init+0x68>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <MX_DMA_Init+0x68>)
 8001634:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_DMA_Init+0x68>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	2038      	movs	r0, #56	@ 0x38
 800164c:	f002 fc05 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001650:	2038      	movs	r0, #56	@ 0x38
 8001652:	f002 fc1e 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2039      	movs	r0, #57	@ 0x39
 800165c:	f002 fbfd 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001660:	2039      	movs	r0, #57	@ 0x39
 8001662:	f002 fc16 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	203c      	movs	r0, #60	@ 0x3c
 800166c:	f002 fbf5 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001670:	203c      	movs	r0, #60	@ 0x3c
 8001672:	f002 fc0e 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	2044      	movs	r0, #68	@ 0x44
 800167c:	f002 fbed 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001680:	2044      	movs	r0, #68	@ 0x44
 8001682:	f002 fc06 	bl	8003e92 <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	@ 0x38
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016aa:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a48      	ldr	r2, [pc, #288]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b46      	ldr	r3, [pc, #280]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a42      	ldr	r2, [pc, #264]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b40      	ldr	r3, [pc, #256]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a3c      	ldr	r2, [pc, #240]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a36      	ldr	r2, [pc, #216]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a30      	ldr	r2, [pc, #192]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001710:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001770:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <MX_GPIO_Init+0x140>)
 8001772:	f003 feeb 	bl	800554c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8001776:	f242 0320 	movw	r3, #8224	@ 0x2020
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4811      	ldr	r0, [pc, #68]	@ (80017d4 <MX_GPIO_Init+0x140>)
 8001790:	f003 fc0c 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	480a      	ldr	r0, [pc, #40]	@ (80017d4 <MX_GPIO_Init+0x140>)
 80017aa:	f003 fbff 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_GPIO_Init+0x144>)
 80017c4:	f003 fbf2 	bl	8004fac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c8:	bf00      	nop
 80017ca:	3738      	adds	r7, #56	@ 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40022400 	.word	0x40022400
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_SAI_TxHalfCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	audio_tx_buffer_state = BUFFER_OFFSET_HALF;
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <HAL_SAI_TxHalfCpltCallback+0x1c>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20005280 	.word	0x20005280

080017fc <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	audio_tx_buffer_state = BUFFER_OFFSET_FULL;
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <HAL_SAI_TxCpltCallback+0x1c>)
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20005280 	.word	0x20005280

0800181c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

	BSP_AUDIO_IN_TransferComplete_CallBack();
 8001824:	f000 f80e 	bl	8001844 <BSP_AUDIO_IN_TransferComplete_CallBack>

}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

	BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001838:	f000 f828 	bl	800188c <BSP_AUDIO_IN_HalfTransfer_CallBack>

}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <BSP_AUDIO_IN_TransferComplete_CallBack>:


void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
    // Set the buffer state
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>)
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]

    // Notify the task that the full buffer is ready

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
    vTaskNotifyGiveFromISR(xRecordingTaskHandle, &xHigherPriorityTaskWoken); // Notify task
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1d3a      	adds	r2, r7, #4
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f00e fba3 	bl	800ffa8 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // Yield to higher priority tasks
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
 8001868:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <BSP_AUDIO_IN_TransferComplete_CallBack+0x44>)
 800186a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	f3bf 8f6f 	isb	sy
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000527c 	.word	0x2000527c
 8001884:	2000598c 	.word	0x2000598c
 8001888:	e000ed04 	.word	0xe000ed04

0800188c <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
    // Set the buffer state
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x3c>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

    // Notify the task that the half-buffer is ready

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
    vTaskNotifyGiveFromISR(xRecordingTaskHandle, &xHigherPriorityTaskWoken); // Notify task
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1d3a      	adds	r2, r7, #4
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00e fb7f 	bl	800ffa8 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // Yield to higher priority tasks
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x44>)
 80018b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	f3bf 8f6f 	isb	sy
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000527c 	.word	0x2000527c
 80018cc:	2000598c 	.word	0x2000598c
 80018d0:	e000ed04 	.word	0xe000ed04

080018d4 <StartGUI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGUI_Task */
void StartGUI_Task(void const * argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGUI_Task */
	uint16_t toggleCount = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
      // Toggle LED
     // HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
      toggleCount++;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	3301      	adds	r3, #1
 80018e4:	81fb      	strh	r3, [r7, #14]

      if (toggleCount == 5)
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d108      	bne.n	80018fe <StartGUI_Task+0x2a>
      {
          xSemaphoreGive(recordTriggerSemaphore); // signal record task
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <StartGUI_Task+0x34>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	f00c fc91 	bl	800e21c <xQueueGenericSend>
          toggleCount = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	81fb      	strh	r3, [r7, #14]
      }

      osDelay(500); // Run every 500ms
 80018fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001902:	f00c f843 	bl	800d98c <osDelay>
      toggleCount++;
 8001906:	e7eb      	b.n	80018e0 <StartGUI_Task+0xc>
 8001908:	20005984 	.word	0x20005984

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <Error_Handler+0x20>)
 800191a:	f003 fe30 	bl	800557e <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800191e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001922:	f002 f99b 	bl	8003c5c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001926:	bf00      	nop
 8001928:	e7f4      	b.n	8001914 <Error_Handler+0x8>
 800192a:	bf00      	nop
 800192c:	40022400 	.word	0x40022400

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a10      	ldr	r2, [pc, #64]	@ (800197c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_MspInit+0x4c>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f002 fa74 	bl	8003e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_DFSDM_FilterMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_filter: DFSDM_Filter handle pointer
  * @retval None
  */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ae      	sub	sp, #184	@ 0xb8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2290      	movs	r2, #144	@ 0x90
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00f f84d 	bl	8010a40 <memset>
  if(DFSDM1_Init == 0)
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_DFSDM_FilterMspInit+0xdc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d152      	bne.n	8001a54 <HAL_DFSDM_FilterMspInit+0xd4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80019ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80019b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 f8ba 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80019ca:	f7ff ff9f 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_DFSDM_FilterMspInit+0xe0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_DFSDM_FilterMspInit+0xe0>)
 80019d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_DFSDM_FilterMspInit+0xe0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10b      	bne.n	80019f8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 80019e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_DFSDM_FilterMspInit+0xe4>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a10:	2318      	movs	r3, #24
 8001a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001a36:	f003 fab9 	bl	8004fac <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2063      	movs	r0, #99	@ 0x63
 8001a40:	f002 fa0b 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8001a44:	2063      	movs	r0, #99	@ 0x63
 8001a46:	f002 fa24 	bl	8003e92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <HAL_DFSDM_FilterMspInit+0xdc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a02      	ldr	r2, [pc, #8]	@ (8001a5c <HAL_DFSDM_FilterMspInit+0xdc>)
 8001a52:	6013      	str	r3, [r2, #0]
  }

}
 8001a54:	bf00      	nop
 8001a56:	37b8      	adds	r7, #184	@ 0xb8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20005994 	.word	0x20005994
 8001a60:	20005990 	.word	0x20005990
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020c00 	.word	0x40020c00

08001a6c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2290      	movs	r2, #144	@ 0x90
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00e ffd7 	bl	8010a40 <memset>
  if(DFSDM1_Init == 0)
 8001a92:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d14a      	bne.n	8001b30 <HAL_DFSDM_ChannelMspInit+0xc4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f844 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001ab6:	f7ff ff29 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001ac2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10b      	bne.n	8001ae4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001acc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ad2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ad6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_DATIN0
    PD4     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001afc:	2318      	movs	r3, #24
 8001afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b14:	2306      	movs	r3, #6
 8001b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4808      	ldr	r0, [pc, #32]	@ (8001b44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001b22:	f003 fa43 	bl	8004fac <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a02      	ldr	r2, [pc, #8]	@ (8001b38 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001b2e:	6013      	str	r3, [r2, #0]
  }

}
 8001b30:	bf00      	nop
 8001b32:	37b8      	adds	r7, #184	@ 0xb8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20005994 	.word	0x20005994
 8001b3c:	20005990 	.word	0x20005990
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ae      	sub	sp, #184	@ 0xb8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2290      	movs	r2, #144	@ 0x90
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00e ff69 	bl	8010a40 <memset>
  if(hsd->Instance==SDMMC2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a74      	ldr	r2, [pc, #464]	@ (8001d44 <HAL_SD_MspInit+0x1fc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	f040 80e0 	bne.w	8001d3a <HAL_SD_MspInit+0x1f2>

    /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8001b7a:	f04f 6384 	mov.w	r3, #69206016	@ 0x4200000
 8001b7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 ffd1 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001b9c:	f7ff feb6 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001ba0:	4b69      	ldr	r3, [pc, #420]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	4a68      	ldr	r2, [pc, #416]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bac:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	4a62      	ldr	r2, [pc, #392]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc4:	4b60      	ldr	r3, [pc, #384]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_SD_MspInit+0x200>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC2 GPIO Configuration
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001be8:	23c0      	movs	r3, #192	@ 0xc0
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001c00:	230b      	movs	r3, #11
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	484f      	ldr	r0, [pc, #316]	@ (8001d4c <HAL_SD_MspInit+0x204>)
 8001c0e:	f003 f9cd 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001c2c:	230b      	movs	r3, #11
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4845      	ldr	r0, [pc, #276]	@ (8001d50 <HAL_SD_MspInit+0x208>)
 8001c3a:	f003 f9b7 	bl	8004fac <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8001c3e:	4b45      	ldr	r3, [pc, #276]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c40:	4a45      	ldr	r2, [pc, #276]	@ (8001d58 <HAL_SD_MspInit+0x210>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c46:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4c:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c60:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c66:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c68:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c6e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8001c70:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c72:	2220      	movs	r2, #32
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c88:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c90:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8001c98:	482e      	ldr	r0, [pc, #184]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001c9a:	f002 fd13 	bl	80046c4 <HAL_DMA_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001ca4:	f7ff fe32 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a2a      	ldr	r2, [pc, #168]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cae:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <HAL_SD_MspInit+0x20c>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8001cb4:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <HAL_SD_MspInit+0x218>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cbc:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cc4:	2240      	movs	r2, #64	@ 0x40
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cdc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001ce0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001ce8:	2220      	movs	r2, #32
 8001cea:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001d00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001d08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8001d0e:	4813      	ldr	r0, [pc, #76]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001d10:	f002 fcd8 	bl	80046c4 <HAL_DMA_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001d1a:	f7ff fdf7 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_SD_MspInit+0x214>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	2067      	movs	r0, #103	@ 0x67
 8001d30:	f002 f893 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8001d34:	2067      	movs	r0, #103	@ 0x67
 8001d36:	f002 f8ac 	bl	8003e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 8001d3a:	bf00      	nop
 8001d3c:	37b8      	adds	r7, #184	@ 0xb8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40011c00 	.word	0x40011c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021800 	.word	0x40021800
 8001d54:	2000582c 	.word	0x2000582c
 8001d58:	40026410 	.word	0x40026410
 8001d5c:	2000588c 	.word	0x2000588c
 8001d60:	40026488 	.word	0x40026488

08001d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0ae      	sub	sp, #184	@ 0xb8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2290      	movs	r2, #144	@ 0x90
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f00e fe5b 	bl	8010a40 <memset>
  if(huart->Instance==USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <HAL_UART_MspInit+0xb0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d13a      	bne.n	8001e0a <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d94:	2340      	movs	r3, #64	@ 0x40
 8001d96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fec9 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dac:	f7ff fdae 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db0:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001de0:	23c0      	movs	r3, #192	@ 0xc0
 8001de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <HAL_UART_MspInit+0xb8>)
 8001e06:	f003 f8d1 	bl	8004fac <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e0a:	bf00      	nop
 8001e0c:	37b8      	adds	r7, #184	@ 0xb8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400

08001e20 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_SAI_MspInit+0x1c8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d174      	bne.n	8001f1c <HAL_SAI_MspInit+0xfc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001e32:	4b6e      	ldr	r3, [pc, #440]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001e40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001e52:	4b66      	ldr	r3, [pc, #408]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a64      	ldr	r2, [pc, #400]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001e5a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e5c:	2370      	movs	r3, #112	@ 0x70
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	485f      	ldr	r0, [pc, #380]	@ (8001ff4 <HAL_SAI_MspInit+0x1d4>)
 8001e78:	f003 f898 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4858      	ldr	r0, [pc, #352]	@ (8001ff8 <HAL_SAI_MspInit+0x1d8>)
 8001e98:	f003 f888 	bl	8004fac <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001e9c:	4b57      	ldr	r3, [pc, #348]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001e9e:	4a58      	ldr	r2, [pc, #352]	@ (8002000 <HAL_SAI_MspInit+0x1e0>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001ea2:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea8:	4b54      	ldr	r3, [pc, #336]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001eaa:	2240      	movs	r2, #64	@ 0x40
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eba:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec2:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eca:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eda:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001edc:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ede:	2204      	movs	r2, #4
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ee2:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ee8:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001eee:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001ef4:	4841      	ldr	r0, [pc, #260]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001ef6:	f002 fbe5 	bl	80046c4 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8001f00:	f7ff fd04 	bl	800190c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001f08:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3a      	ldr	r2, [pc, #232]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001f14:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001f16:	4a39      	ldr	r2, [pc, #228]	@ (8001ffc <HAL_SAI_MspInit+0x1dc>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	@ (8002004 <HAL_SAI_MspInit+0x1e4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d15c      	bne.n	8001fe0 <HAL_SAI_MspInit+0x1c0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <HAL_SAI_MspInit+0x126>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_SAI_MspInit+0x1d0>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001f46:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <HAL_SAI_MspInit+0x1cc>)
 8001f4e:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f50:	2308      	movs	r3, #8
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f60:	2306      	movs	r3, #6
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4822      	ldr	r0, [pc, #136]	@ (8001ff4 <HAL_SAI_MspInit+0x1d4>)
 8001f6c:	f003 f81e 	bl	8004fac <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001f70:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f72:	4a26      	ldr	r2, [pc, #152]	@ (800200c <HAL_SAI_MspInit+0x1ec>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f84:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f90:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fb0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001fb8:	4813      	ldr	r0, [pc, #76]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fba:	f002 fb83 	bl	80046c4 <HAL_DMA_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8001fc4:	f7ff fca2 	bl	800190c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fd8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001fda:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_SAI_MspInit+0x1e8>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	@ 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40015804 	.word	0x40015804
 8001fec:	20005998 	.word	0x20005998
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	200056e8 	.word	0x200056e8
 8002000:	40026428 	.word	0x40026428
 8002004:	40015824 	.word	0x40015824
 8002008:	20005748 	.word	0x20005748
 800200c:	40026470 	.word	0x40026470

08002010 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <HAL_SAI_MspDeInit+0xa0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d120      	bne.n	8002064 <HAL_SAI_MspDeInit+0x54>
    {
    SAI1_client --;
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3b01      	subs	r3, #1
 8002028:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 800202a:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_SAI_MspDeInit+0xa8>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_SAI_MspDeInit+0xa8>)
 800203a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800203e:	6453      	str	r3, [r2, #68]	@ 0x44
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8002040:	2170      	movs	r1, #112	@ 0x70
 8002042:	481e      	ldr	r0, [pc, #120]	@ (80020bc <HAL_SAI_MspDeInit+0xac>)
 8002044:	f003 f95e 	bl	8005304 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7);
 8002048:	2180      	movs	r1, #128	@ 0x80
 800204a:	481d      	ldr	r0, [pc, #116]	@ (80020c0 <HAL_SAI_MspDeInit+0xb0>)
 800204c:	f003 f95a 	bl	8005304 <HAL_GPIO_DeInit>

    /* SAI1 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fbe3 	bl	8004820 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fbde 	bl	8004820 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI1_Block_B)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <HAL_SAI_MspDeInit+0xb4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11c      	bne.n	80020a8 <HAL_SAI_MspDeInit+0x98>
    {
    SAI1_client --;
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 8002076:	6013      	str	r3, [r2, #0]
      if (SAI1_client == 0)
 8002078:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_SAI_MspDeInit+0xa4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_SAI_MspDeInit+0x7c>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI1_CLK_DISABLE();
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_SAI_MspDeInit+0xa8>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <HAL_SAI_MspDeInit+0xa8>)
 8002086:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800208a:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 800208c:	2108      	movs	r1, #8
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <HAL_SAI_MspDeInit+0xac>)
 8002090:	f003 f938 	bl	8005304 <HAL_GPIO_DeInit>

    /* SAI1 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fbc1 	bl	8004820 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fbbc 	bl	8004820 <HAL_DMA_DeInit>
    }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40015804 	.word	0x40015804
 80020b4:	20005998 	.word	0x20005998
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021800 	.word	0x40021800
 80020c4:	40015824 	.word	0x40015824

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <NMI_Handler+0x4>

080020d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <MemManage_Handler+0x4>

080020e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <UsageFault_Handler+0x4>

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002102:	f001 fd8b 	bl	8003c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002106:	f00d fd25 	bl	800fb54 <xTaskGetSchedulerState>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002110:	f00e f9f2 	bl	80104f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <DMA2_Stream0_IRQHandler+0x10>)
 800211e:	f002 fccf 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000582c 	.word	0x2000582c

0800212c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <DMA2_Stream1_IRQHandler+0x10>)
 8002132:	f002 fcc5 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200056e8 	.word	0x200056e8

08002140 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <DMA2_Stream4_IRQHandler+0x10>)
 8002146:	f002 fcbb 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20005748 	.word	0x20005748

08002154 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <DMA2_Stream5_IRQHandler+0x10>)
 800215a:	f002 fcb1 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000588c 	.word	0x2000588c

08002168 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <DFSDM1_FLT0_IRQHandler+0x10>)
 800216e:	f002 f8bb 	bl	80042e8 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20005554 	.word	0x20005554

0800217c <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002180:	4802      	ldr	r0, [pc, #8]	@ (800218c <SDMMC2_IRQHandler+0x10>)
 8002182:	f006 faad 	bl	80086e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200057a8 	.word	0x200057a8

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	@ (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d207      	bcs.n	80021d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c0:	f00e fca4 	bl	8010b0c <__errno>
 80021c4:	4603      	mov	r3, r0
 80021c6:	220c      	movs	r2, #12
 80021c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	e009      	b.n	80021e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <_sbrk+0x64>)
 80021e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20080000 	.word	0x20080000
 80021f0:	00000800 	.word	0x00000800
 80021f4:	2000599c 	.word	0x2000599c
 80021f8:	200121a0 	.word	0x200121a0

080021fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002258 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002224:	f7ff ffea 	bl	80021fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800222a:	490d      	ldr	r1, [pc, #52]	@ (8002260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800222c:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002240:	4c0a      	ldr	r4, [pc, #40]	@ (800226c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800224e:	f00e fc63 	bl	8010b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7fe ff5d 	bl	8001110 <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002264:	0801161c 	.word	0x0801161c
  ldr r2, =_sbss
 8002268:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800226c:	2001219c 	.word	0x2001219c

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	4603      	mov	r3, r0
 800227e:	81fb      	strh	r3, [r7, #14]
 8002280:	460b      	mov	r3, r1
 8002282:	81bb      	strh	r3, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800228c:	89bb      	ldrh	r3, [r7, #12]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002298:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800229e:	f001 fc0d 	bl	8003abc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2203      	movs	r2, #3
 80022a8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fa89 	bl	80037c4 <CODEC_IO_Write>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	f640 0117 	movw	r1, #2071	@ 0x817
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 fa7c 	bl	80037c4 <CODEC_IO_Write>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 fa6f 	bl	80037c4 <CODEC_IO_Write>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	226c      	movs	r2, #108	@ 0x6c
 80022f6:	2139      	movs	r1, #57	@ 0x39
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fa63 	bl	80037c4 <CODEC_IO_Write>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002308:	8afb      	ldrh	r3, [r7, #22]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2213      	movs	r2, #19
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fa54 	bl	80037c4 <CODEC_IO_Write>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e00b      	b.n	8002340 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002328:	89fb      	ldrh	r3, [r7, #14]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2203      	movs	r2, #3
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f001 fa47 	bl	80037c4 <CODEC_IO_Write>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002340:	2032      	movs	r0, #50	@ 0x32
 8002342:	f001 fc23 	bl	8003b8c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002346:	8b3b      	ldrh	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 815f 	beq.w	800260c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800234e:	4bae      	ldr	r3, [pc, #696]	@ (8002608 <wm8994_Init+0x394>)
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8002354:	8b3b      	ldrh	r3, [r7, #24]
 8002356:	2b03      	cmp	r3, #3
 8002358:	f000 808c 	beq.w	8002474 <wm8994_Init+0x200>
 800235c:	2b03      	cmp	r3, #3
 800235e:	f300 8111 	bgt.w	8002584 <wm8994_Init+0x310>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d002      	beq.n	800236c <wm8994_Init+0xf8>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d042      	beq.n	80023f0 <wm8994_Init+0x17c>
 800236a:	e10b      	b.n	8002584 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002374:	2105      	movs	r1, #5
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fa24 	bl	80037c4 <CODEC_IO_Write>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002386:	89fb      	ldrh	r3, [r7, #14]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2200      	movs	r2, #0
 800238c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fa17 	bl	80037c4 <CODEC_IO_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2200      	movs	r2, #0
 80023a6:	f240 6102 	movw	r1, #1538	@ 0x602
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fa0a 	bl	80037c4 <CODEC_IO_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2202      	movs	r2, #2
 80023c0:	f240 6104 	movw	r1, #1540	@ 0x604
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 f9fd 	bl	80037c4 <CODEC_IO_Write>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80023d4:	89fb      	ldrh	r3, [r7, #14]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2202      	movs	r2, #2
 80023da:	f240 6105 	movw	r1, #1541	@ 0x605
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f9f0 	bl	80037c4 <CODEC_IO_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	61fb      	str	r3, [r7, #28]
      break;
 80023ee:	e110      	b.n	8002612 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80023f0:	89fb      	ldrh	r3, [r7, #14]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f240 3203 	movw	r2, #771	@ 0x303
 80023f8:	2105      	movs	r1, #5
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 f9e2 	bl	80037c4 <CODEC_IO_Write>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2201      	movs	r2, #1
 8002410:	f240 6101 	movw	r1, #1537	@ 0x601
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f9d5 	bl	80037c4 <CODEC_IO_Write>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2201      	movs	r2, #1
 800242a:	f240 6102 	movw	r1, #1538	@ 0x602
 800242e:	4618      	mov	r0, r3
 8002430:	f001 f9c8 	bl	80037c4 <CODEC_IO_Write>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2200      	movs	r2, #0
 8002444:	f240 6104 	movw	r1, #1540	@ 0x604
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f9bb 	bl	80037c4 <CODEC_IO_Write>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2200      	movs	r2, #0
 800245e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002462:	4618      	mov	r0, r3
 8002464:	f001 f9ae 	bl	80037c4 <CODEC_IO_Write>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	61fb      	str	r3, [r7, #28]
      break;
 8002472:	e0ce      	b.n	8002612 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002474:	8afb      	ldrh	r3, [r7, #22]
 8002476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800247a:	d141      	bne.n	8002500 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002484:	2105      	movs	r1, #5
 8002486:	4618      	mov	r0, r3
 8002488:	f001 f99c 	bl	80037c4 <CODEC_IO_Write>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2203      	movs	r2, #3
 800249c:	f240 6101 	movw	r1, #1537	@ 0x601
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f98f 	bl	80037c4 <CODEC_IO_Write>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2203      	movs	r2, #3
 80024b6:	f240 6102 	movw	r1, #1538	@ 0x602
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 f982 	bl	80037c4 <CODEC_IO_Write>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2203      	movs	r2, #3
 80024d0:	f240 6104 	movw	r1, #1540	@ 0x604
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 f975 	bl	80037c4 <CODEC_IO_Write>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2203      	movs	r2, #3
 80024ea:	f240 6105 	movw	r1, #1541	@ 0x605
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 f968 	bl	80037c4 <CODEC_IO_Write>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80024fe:	e088      	b.n	8002612 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002508:	2105      	movs	r1, #5
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f95a 	bl	80037c4 <CODEC_IO_Write>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2201      	movs	r2, #1
 8002520:	f240 6101 	movw	r1, #1537	@ 0x601
 8002524:	4618      	mov	r0, r3
 8002526:	f001 f94d 	bl	80037c4 <CODEC_IO_Write>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2201      	movs	r2, #1
 800253a:	f240 6102 	movw	r1, #1538	@ 0x602
 800253e:	4618      	mov	r0, r3
 8002540:	f001 f940 	bl	80037c4 <CODEC_IO_Write>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2202      	movs	r2, #2
 8002554:	f240 6104 	movw	r1, #1540	@ 0x604
 8002558:	4618      	mov	r0, r3
 800255a:	f001 f933 	bl	80037c4 <CODEC_IO_Write>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2202      	movs	r2, #2
 800256e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002572:	4618      	mov	r0, r3
 8002574:	f001 f926 	bl	80037c4 <CODEC_IO_Write>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	61fb      	str	r3, [r7, #28]
      break;
 8002582:	e046      	b.n	8002612 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f240 3203 	movw	r2, #771	@ 0x303
 800258c:	2105      	movs	r1, #5
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f918 	bl	80037c4 <CODEC_IO_Write>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	f240 6101 	movw	r1, #1537	@ 0x601
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 f90b 	bl	80037c4 <CODEC_IO_Write>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80025b8:	89fb      	ldrh	r3, [r7, #14]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	f240 6102 	movw	r1, #1538	@ 0x602
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 f8fe 	bl	80037c4 <CODEC_IO_Write>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	f240 6104 	movw	r1, #1540	@ 0x604
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f8f1 	bl	80037c4 <CODEC_IO_Write>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	f240 6105 	movw	r1, #1541	@ 0x605
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 f8e4 	bl	80037c4 <CODEC_IO_Write>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
      break;
 8002606:	e004      	b.n	8002612 <wm8994_Init+0x39e>
 8002608:	200059a0 	.word	0x200059a0
    }
  }
  else
  {
    outputEnabled = 0;
 800260c:	4b99      	ldr	r3, [pc, #612]	@ (8002874 <wm8994_Init+0x600>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002612:	8afb      	ldrh	r3, [r7, #22]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 81ab 	beq.w	8002970 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800261a:	4b97      	ldr	r3, [pc, #604]	@ (8002878 <wm8994_Init+0x604>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002626:	f000 8129 	beq.w	800287c <wm8994_Init+0x608>
 800262a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800262e:	f300 819b 	bgt.w	8002968 <wm8994_Init+0x6f4>
 8002632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002636:	d05a      	beq.n	80026ee <wm8994_Init+0x47a>
 8002638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800263c:	f300 8194 	bgt.w	8002968 <wm8994_Init+0x6f4>
 8002640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002644:	f000 80c6 	beq.w	80027d4 <wm8994_Init+0x560>
 8002648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800264c:	f040 818c 	bne.w	8002968 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002658:	2104      	movs	r1, #4
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f8b2 	bl	80037c4 <CODEC_IO_Write>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	22db      	movs	r2, #219	@ 0xdb
 8002670:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f8a5 	bl	80037c4 <CODEC_IO_Write>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f898 	bl	80037c4 <CODEC_IO_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2202      	movs	r2, #2
 80026a4:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f88b 	bl	80037c4 <CODEC_IO_Write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2202      	movs	r2, #2
 80026be:	f240 6109 	movw	r1, #1545	@ 0x609
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f87e 	bl	80037c4 <CODEC_IO_Write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	220e      	movs	r2, #14
 80026d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 f871 	bl	80037c4 <CODEC_IO_Write>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
      break;
 80026ec:	e143      	b.n	8002976 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2211      	movs	r2, #17
 80026f4:	2128      	movs	r1, #40	@ 0x28
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 f864 	bl	80037c4 <CODEC_IO_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2220      	movs	r2, #32
 800270c:	2129      	movs	r1, #41	@ 0x29
 800270e:	4618      	mov	r0, r3
 8002710:	f001 f858 	bl	80037c4 <CODEC_IO_Write>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2220      	movs	r2, #32
 8002724:	212a      	movs	r1, #42	@ 0x2a
 8002726:	4618      	mov	r0, r3
 8002728:	f001 f84c 	bl	80037c4 <CODEC_IO_Write>
 800272c:	4603      	mov	r3, r0
 800272e:	461a      	mov	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f240 3203 	movw	r2, #771	@ 0x303
 800273e:	2104      	movs	r1, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f001 f83f 	bl	80037c4 <CODEC_IO_Write>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	22db      	movs	r2, #219	@ 0xdb
 8002756:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f832 	bl	80037c4 <CODEC_IO_Write>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f825 	bl	80037c4 <CODEC_IO_Write>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2202      	movs	r2, #2
 800278a:	f240 6106 	movw	r1, #1542	@ 0x606
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f818 	bl	80037c4 <CODEC_IO_Write>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800279e:	89fb      	ldrh	r3, [r7, #14]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2202      	movs	r2, #2
 80027a4:	f240 6107 	movw	r1, #1543	@ 0x607
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f80b 	bl	80037c4 <CODEC_IO_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	220d      	movs	r2, #13
 80027be:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fffe 	bl	80037c4 <CODEC_IO_Write>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]
      break;
 80027d2:	e0d0      	b.n	8002976 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80027dc:	2104      	movs	r1, #4
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fff0 	bl	80037c4 <CODEC_IO_Write>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	22db      	movs	r2, #219	@ 0xdb
 80027f4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 ffe3 	bl	80037c4 <CODEC_IO_Write>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002808:	89fb      	ldrh	r3, [r7, #14]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 ffd6 	bl	80037c4 <CODEC_IO_Write>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2202      	movs	r2, #2
 8002828:	f240 6106 	movw	r1, #1542	@ 0x606
 800282c:	4618      	mov	r0, r3
 800282e:	f000 ffc9 	bl	80037c4 <CODEC_IO_Write>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2202      	movs	r2, #2
 8002842:	f240 6107 	movw	r1, #1543	@ 0x607
 8002846:	4618      	mov	r0, r3
 8002848:	f000 ffbc 	bl	80037c4 <CODEC_IO_Write>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	220d      	movs	r2, #13
 800285c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ffaf 	bl	80037c4 <CODEC_IO_Write>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
      break; 
 8002870:	e081      	b.n	8002976 <wm8994_Init+0x702>
 8002872:	bf00      	nop
 8002874:	200059a0 	.word	0x200059a0
 8002878:	200059a4 	.word	0x200059a4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800287c:	89fb      	ldrh	r3, [r7, #14]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002884:	2104      	movs	r1, #4
 8002886:	4618      	mov	r0, r3
 8002888:	f000 ff9c 	bl	80037c4 <CODEC_IO_Write>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	22db      	movs	r2, #219	@ 0xdb
 800289c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 ff8f 	bl	80037c4 <CODEC_IO_Write>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	22db      	movs	r2, #219	@ 0xdb
 80028b6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 ff82 	bl	80037c4 <CODEC_IO_Write>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 ff75 	bl	80037c4 <CODEC_IO_Write>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2202      	movs	r2, #2
 80028ea:	f240 6106 	movw	r1, #1542	@ 0x606
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 ff68 	bl	80037c4 <CODEC_IO_Write>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2202      	movs	r2, #2
 8002904:	f240 6107 	movw	r1, #1543	@ 0x607
 8002908:	4618      	mov	r0, r3
 800290a:	f000 ff5b 	bl	80037c4 <CODEC_IO_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2202      	movs	r2, #2
 800291e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002922:	4618      	mov	r0, r3
 8002924:	f000 ff4e 	bl	80037c4 <CODEC_IO_Write>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2202      	movs	r2, #2
 8002938:	f240 6109 	movw	r1, #1545	@ 0x609
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ff41 	bl	80037c4 <CODEC_IO_Write>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800294c:	89fb      	ldrh	r3, [r7, #14]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	220d      	movs	r2, #13
 8002952:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002956:	4618      	mov	r0, r3
 8002958:	f000 ff34 	bl	80037c4 <CODEC_IO_Write>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
      break;    
 8002966:	e006      	b.n	8002976 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3301      	adds	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
      break;
 800296e:	e002      	b.n	8002976 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002970:	4bb1      	ldr	r3, [pc, #708]	@ (8002c38 <wm8994_Init+0x9c4>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4ab0      	ldr	r2, [pc, #704]	@ (8002c3c <wm8994_Init+0x9c8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d079      	beq.n	8002a72 <wm8994_Init+0x7fe>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4aae      	ldr	r2, [pc, #696]	@ (8002c3c <wm8994_Init+0x9c8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	f200 80ad 	bhi.w	8002ae2 <wm8994_Init+0x86e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800298e:	4293      	cmp	r3, r2
 8002990:	d061      	beq.n	8002a56 <wm8994_Init+0x7e2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002998:	4293      	cmp	r3, r2
 800299a:	f200 80a2 	bhi.w	8002ae2 <wm8994_Init+0x86e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80029a4:	4293      	cmp	r3, r2
 80029a6:	f000 808e 	beq.w	8002ac6 <wm8994_Init+0x852>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80029b0:	4293      	cmp	r3, r2
 80029b2:	f200 8096 	bhi.w	8002ae2 <wm8994_Init+0x86e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80029bc:	d03d      	beq.n	8002a3a <wm8994_Init+0x7c6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80029c4:	f200 808d 	bhi.w	8002ae2 <wm8994_Init+0x86e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f245 6222 	movw	r2, #22050	@ 0x5622
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d06b      	beq.n	8002aaa <wm8994_Init+0x836>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80029d8:	4293      	cmp	r3, r2
 80029da:	f200 8082 	bhi.w	8002ae2 <wm8994_Init+0x86e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80029e4:	d01b      	beq.n	8002a1e <wm8994_Init+0x7aa>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80029ec:	d879      	bhi.n	8002ae2 <wm8994_Init+0x86e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80029f4:	d005      	beq.n	8002a02 <wm8994_Init+0x78e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d046      	beq.n	8002a8e <wm8994_Init+0x81a>
 8002a00:	e06f      	b.n	8002ae2 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2203      	movs	r2, #3
 8002a08:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fed9 	bl	80037c4 <CODEC_IO_Write>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	61fb      	str	r3, [r7, #28]
    break;
 8002a1c:	e06f      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2233      	movs	r2, #51	@ 0x33
 8002a24:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fecb 	bl	80037c4 <CODEC_IO_Write>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461a      	mov	r2, r3
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	61fb      	str	r3, [r7, #28]
    break;
 8002a38:	e061      	b.n	8002afe <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2263      	movs	r2, #99	@ 0x63
 8002a40:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 febd 	bl	80037c4 <CODEC_IO_Write>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]
    break;
 8002a54:	e053      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2283      	movs	r2, #131	@ 0x83
 8002a5c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 feaf 	bl	80037c4 <CODEC_IO_Write>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
    break;
 8002a70:	e045      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	22a3      	movs	r2, #163	@ 0xa3
 8002a78:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fea1 	bl	80037c4 <CODEC_IO_Write>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	61fb      	str	r3, [r7, #28]
    break;
 8002a8c:	e037      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2213      	movs	r2, #19
 8002a94:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fe93 	bl	80037c4 <CODEC_IO_Write>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
    break;
 8002aa8:	e029      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2243      	movs	r2, #67	@ 0x43
 8002ab0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fe85 	bl	80037c4 <CODEC_IO_Write>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]
    break;
 8002ac4:	e01b      	b.n	8002afe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002ac6:	89fb      	ldrh	r3, [r7, #14]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2273      	movs	r2, #115	@ 0x73
 8002acc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fe77 	bl	80037c4 <CODEC_IO_Write>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
    break; 
 8002ae0:	e00d      	b.n	8002afe <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2283      	movs	r2, #131	@ 0x83
 8002ae8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fe69 	bl	80037c4 <CODEC_IO_Write>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	61fb      	str	r3, [r7, #28]
    break; 
 8002afc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002afe:	8afb      	ldrh	r3, [r7, #22]
 8002b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b04:	d10e      	bne.n	8002b24 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002b0e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe56 	bl	80037c4 <CODEC_IO_Write>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e00d      	b.n	8002b40 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002b2c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fe47 	bl	80037c4 <CODEC_IO_Write>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	f240 3102 	movw	r1, #770	@ 0x302
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fe3a 	bl	80037c4 <CODEC_IO_Write>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	220a      	movs	r2, #10
 8002b60:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fe2d 	bl	80037c4 <CODEC_IO_Write>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fe20 	bl	80037c4 <CODEC_IO_Write>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002b8e:	8b3b      	ldrh	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8124 	beq.w	8002dde <wm8994_Init+0xb6a>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fe0f 	bl	80037c4 <CODEC_IO_Write>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002bb0:	89fb      	ldrh	r3, [r7, #14]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2122      	movs	r1, #34	@ 0x22
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe03 	bl	80037c4 <CODEC_IO_Write>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2123      	movs	r1, #35	@ 0x23
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fdf7 	bl	80037c4 <CODEC_IO_Write>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002be8:	2136      	movs	r1, #54	@ 0x36
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fdea 	bl	80037c4 <CODEC_IO_Write>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fddd 	bl	80037c4 <CODEC_IO_Write>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c14:	8afb      	ldrh	r3, [r7, #22]
 8002c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c1a:	d111      	bne.n	8002c40 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f240 2205 	movw	r2, #517	@ 0x205
 8002c24:	2151      	movs	r1, #81	@ 0x51
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fdcc 	bl	80037c4 <CODEC_IO_Write>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e00f      	b.n	8002c58 <wm8994_Init+0x9e4>
 8002c38:	200059a4 	.word	0x200059a4
 8002c3c:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2205      	movs	r2, #5
 8002c46:	2151      	movs	r1, #81	@ 0x51
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fdbb 	bl	80037c4 <CODEC_IO_Write>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002c58:	8b7b      	ldrh	r3, [r7, #26]
 8002c5a:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002c5e:	f043 0303 	orr.w	r3, r3, #3
 8002c62:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	8b7a      	ldrh	r2, [r7, #26]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fda9 	bl	80037c4 <CODEC_IO_Write>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2222      	movs	r2, #34	@ 0x22
 8002c82:	2160      	movs	r1, #96	@ 0x60
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fd9d 	bl	80037c4 <CODEC_IO_Write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002c9c:	214c      	movs	r1, #76	@ 0x4c
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd90 	bl	80037c4 <CODEC_IO_Write>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002cae:	200f      	movs	r0, #15
 8002cb0:	f000 ff6c 	bl	8003b8c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2201      	movs	r2, #1
 8002cba:	212d      	movs	r1, #45	@ 0x2d
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fd81 	bl	80037c4 <CODEC_IO_Write>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	212e      	movs	r1, #46	@ 0x2e
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fd75 	bl	80037c4 <CODEC_IO_Write>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002cec:	2103      	movs	r1, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fd68 	bl	80037c4 <CODEC_IO_Write>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2233      	movs	r2, #51	@ 0x33
 8002d04:	2154      	movs	r1, #84	@ 0x54
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd5c 	bl	80037c4 <CODEC_IO_Write>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002d16:	f240 1001 	movw	r0, #257	@ 0x101
 8002d1a:	f000 ff37 	bl	8003b8c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	22ee      	movs	r2, #238	@ 0xee
 8002d24:	2160      	movs	r1, #96	@ 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fd4c 	bl	80037c4 <CODEC_IO_Write>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	22c0      	movs	r2, #192	@ 0xc0
 8002d3c:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fd3f 	bl	80037c4 <CODEC_IO_Write>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	22c0      	movs	r2, #192	@ 0xc0
 8002d56:	f240 6111 	movw	r1, #1553	@ 0x611
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fd32 	bl	80037c4 <CODEC_IO_Write>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd25 	bl	80037c4 <CODEC_IO_Write>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	22c0      	movs	r2, #192	@ 0xc0
 8002d8a:	f240 6112 	movw	r1, #1554	@ 0x612
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd18 	bl	80037c4 <CODEC_IO_Write>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	22c0      	movs	r2, #192	@ 0xc0
 8002da4:	f240 6113 	movw	r1, #1555	@ 0x613
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd0b 	bl	80037c4 <CODEC_IO_Write>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f240 4122 	movw	r1, #1058	@ 0x422
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fcfe 	bl	80037c4 <CODEC_IO_Write>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002dd2:	7afa      	ldrb	r2, [r7, #11]
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f983 	bl	80030e4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002dde:	8afb      	ldrh	r3, [r7, #22]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a6 	beq.w	8002f32 <wm8994_Init+0xcbe>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dec:	d003      	beq.n	8002df6 <wm8994_Init+0xb82>
 8002dee:	8afb      	ldrh	r3, [r7, #22]
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df4:	d12b      	bne.n	8002e4e <wm8994_Init+0xbda>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	f043 0313 	orr.w	r3, r3, #19
 8002dfc:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	8b7a      	ldrh	r2, [r7, #26]
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fcdc 	bl	80037c4 <CODEC_IO_Write>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002e16:	89fb      	ldrh	r3, [r7, #14]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fccf 	bl	80037c4 <CODEC_IO_Write>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002e30:	89fb      	ldrh	r3, [r7, #14]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e38:	f240 4111 	movw	r1, #1041	@ 0x411
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fcc1 	bl	80037c4 <CODEC_IO_Write>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e06b      	b.n	8002f26 <wm8994_Init+0xcb2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002e4e:	8afb      	ldrh	r3, [r7, #22]
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e54:	d139      	bne.n	8002eca <wm8994_Init+0xc56>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002e56:	8b7b      	ldrh	r3, [r7, #26]
 8002e58:	f043 0313 	orr.w	r3, r3, #19
 8002e5c:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	8b7a      	ldrh	r2, [r7, #26]
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fcac 	bl	80037c4 <CODEC_IO_Write>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fc9f 	bl	80037c4 <CODEC_IO_Write>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002e90:	89fb      	ldrh	r3, [r7, #14]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002e98:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fc91 	bl	80037c4 <CODEC_IO_Write>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002eb4:	f240 4111 	movw	r1, #1041	@ 0x411
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fc83 	bl	80037c4 <CODEC_IO_Write>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	e02d      	b.n	8002f26 <wm8994_Init+0xcb2>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002eca:	8afb      	ldrh	r3, [r7, #22]
 8002ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed0:	d003      	beq.n	8002eda <wm8994_Init+0xc66>
 8002ed2:	8afb      	ldrh	r3, [r7, #22]
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed8:	d125      	bne.n	8002f26 <wm8994_Init+0xcb2>
    {
    	//change adam 000B - 3
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	220b      	movs	r2, #11
 8002ee0:	2118      	movs	r1, #24
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fc6e 	bl	80037c4 <CODEC_IO_Write>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	220b      	movs	r2, #11
 8002ef8:	211a      	movs	r1, #26
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fc62 	bl	80037c4 <CODEC_IO_Write>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x7800);
 8002f0a:	89fb      	ldrh	r3, [r7, #14]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8002f12:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc54 	bl	80037c4 <CODEC_IO_Write>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002f26:	7afa      	ldrb	r2, [r7, #11]
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f8d9 	bl	80030e4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002f32:	69fb      	ldr	r3, [r7, #28]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002f40:	f000 fdc6 	bl	8003ad0 <AUDIO_IO_DeInit>
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002f52:	f000 fdb3 	bl	8003abc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fde9 	bl	8003b34 <AUDIO_IO_Read>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	80fb      	strh	r3, [r7, #6]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f9d1 	bl	800332c <wm8994_SetMute>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2101      	movs	r1, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9bc 	bl	800332c <wm8994_SetMute>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fbfd 	bl	80037c4 <CODEC_IO_Write>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f99b 	bl	800332c <wm8994_SetMute>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003018:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <wm8994_Stop+0xd8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05a      	beq.n	80030d6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f981 	bl	800332c <wm8994_SetMute>
 800302a:	4602      	mov	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d04e      	beq.n	80030d6 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003040:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fbbd 	bl	80037c4 <CODEC_IO_Write>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800305c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fbaf 	bl	80037c4 <CODEC_IO_Write>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2200      	movs	r2, #0
 8003076:	212d      	movs	r1, #45	@ 0x2d
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fba3 	bl	80037c4 <CODEC_IO_Write>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2200      	movs	r2, #0
 800308e:	212e      	movs	r1, #46	@ 0x2e
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fb97 	bl	80037c4 <CODEC_IO_Write>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	2105      	movs	r1, #5
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fb8b 	bl	80037c4 <CODEC_IO_Write>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fb7f 	bl	80037c4 <CODEC_IO_Write>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <wm8994_Stop+0xd8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200059a0 	.word	0x200059a0

080030e4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	460a      	mov	r2, r1
 80030ee:	80fb      	strh	r3, [r7, #6]
 80030f0:	4613      	mov	r3, r2
 80030f2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80030f8:	797b      	ldrb	r3, [r7, #5]
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d80b      	bhi.n	8003116 <wm8994_SetVolume+0x32>
 80030fe:	797a      	ldrb	r2, [r7, #5]
 8003100:	4613      	mov	r3, r2
 8003102:	019b      	lsls	r3, r3, #6
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	4a86      	ldr	r2, [pc, #536]	@ (8003320 <wm8994_SetVolume+0x23c>)
 8003108:	fb82 1203 	smull	r1, r2, r2, r3
 800310c:	1152      	asrs	r2, r2, #5
 800310e:	17db      	asrs	r3, r3, #31
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e000      	b.n	8003118 <wm8994_SetVolume+0x34>
 8003116:	2364      	movs	r3, #100	@ 0x64
 8003118:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800311a:	4b82      	ldr	r3, [pc, #520]	@ (8003324 <wm8994_SetVolume+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 809b 	beq.w	800325a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	2b3e      	cmp	r3, #62	@ 0x3e
 8003128:	d93d      	bls.n	80031a6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f8fc 	bl	800332c <wm8994_SetMute>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f240 127f 	movw	r2, #383	@ 0x17f
 8003144:	211c      	movs	r1, #28
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fb3c 	bl	80037c4 <CODEC_IO_Write>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f240 127f 	movw	r2, #383	@ 0x17f
 800315e:	211d      	movs	r1, #29
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fb2f 	bl	80037c4 <CODEC_IO_Write>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f240 127f 	movw	r2, #383	@ 0x17f
 8003178:	2126      	movs	r1, #38	@ 0x26
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb22 	bl	80037c4 <CODEC_IO_Write>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f240 127f 	movw	r2, #383	@ 0x17f
 8003192:	2127      	movs	r1, #39	@ 0x27
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fb15 	bl	80037c4 <CODEC_IO_Write>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4413      	add	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e059      	b.n	800325a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80031a6:	797b      	ldrb	r3, [r7, #5]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f8bb 	bl	800332c <wm8994_SetMute>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e04c      	b.n	800325a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f8b1 	bl	800332c <wm8994_SetMute>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2d8      	uxtb	r0, r3
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	b21b      	sxth	r3, r3
 80031da:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80031de:	b21b      	sxth	r3, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	211c      	movs	r1, #28
 80031e6:	f000 faed 	bl	80037c4 <CODEC_IO_Write>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	b2d8      	uxtb	r0, r3
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003200:	b21b      	sxth	r3, r3
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	211d      	movs	r1, #29
 8003208:	f000 fadc 	bl	80037c4 <CODEC_IO_Write>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2d8      	uxtb	r0, r3
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	b21b      	sxth	r3, r3
 800321e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003222:	b21b      	sxth	r3, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	2126      	movs	r1, #38	@ 0x26
 800322a:	f000 facb 	bl	80037c4 <CODEC_IO_Write>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	7afb      	ldrb	r3, [r7, #11]
 800323e:	b21b      	sxth	r3, r3
 8003240:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003244:	b21b      	sxth	r3, r3
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	2127      	movs	r1, #39	@ 0x27
 800324c:	f000 faba 	bl	80037c4 <CODEC_IO_Write>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800325a:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <wm8994_SetVolume+0x244>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d059      	beq.n	8003316 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003262:	797b      	ldrb	r3, [r7, #5]
 8003264:	2b63      	cmp	r3, #99	@ 0x63
 8003266:	d80c      	bhi.n	8003282 <wm8994_SetVolume+0x19e>
 8003268:	797a      	ldrb	r2, [r7, #5]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4a2b      	ldr	r2, [pc, #172]	@ (8003320 <wm8994_SetVolume+0x23c>)
 8003274:	fb82 1203 	smull	r1, r2, r2, r3
 8003278:	1152      	asrs	r2, r2, #5
 800327a:	17db      	asrs	r3, r3, #31
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e000      	b.n	8003284 <wm8994_SetVolume+0x1a0>
 8003282:	23ef      	movs	r3, #239	@ 0xef
 8003284:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	b2d8      	uxtb	r0, r3
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	b21b      	sxth	r3, r3
 800328e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003292:	b21b      	sxth	r3, r3
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800329c:	f000 fa92 	bl	80037c4 <CODEC_IO_Write>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	b2d8      	uxtb	r0, r3
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b6:	b21b      	sxth	r3, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	f240 4101 	movw	r1, #1025	@ 0x401
 80032c0:	f000 fa80 	bl	80037c4 <CODEC_IO_Write>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	b2d8      	uxtb	r0, r3
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	b21b      	sxth	r3, r3
 80032d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032da:	b21b      	sxth	r3, r3
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	f240 4104 	movw	r1, #1028	@ 0x404
 80032e4:	f000 fa6e 	bl	80037c4 <CODEC_IO_Write>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2d8      	uxtb	r0, r3
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fe:	b21b      	sxth	r3, r3
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	f240 4105 	movw	r1, #1029	@ 0x405
 8003308:	f000 fa5c 	bl	80037c4 <CODEC_IO_Write>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	51eb851f 	.word	0x51eb851f
 8003324:	200059a0 	.word	0x200059a0
 8003328:	200059a4 	.word	0x200059a4

0800332c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800333c:	4b21      	ldr	r3, [pc, #132]	@ (80033c4 <wm8994_SetMute+0x98>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d039      	beq.n	80033b8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d11c      	bne.n	8003384 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003352:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fa34 	bl	80037c4 <CODEC_IO_Write>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336e:	f240 4122 	movw	r1, #1058	@ 0x422
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fa26 	bl	80037c4 <CODEC_IO_Write>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e019      	b.n	80033b8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fa18 	bl	80037c4 <CODEC_IO_Write>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	f240 4122 	movw	r1, #1058	@ 0x422
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa0b 	bl	80037c4 <CODEC_IO_Write>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80033b8:	68fb      	ldr	r3, [r7, #12]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200059a0 	.word	0x200059a0

080033c8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	80fb      	strh	r3, [r7, #6]
 80033d4:	4613      	mov	r3, r2
 80033d6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80033dc:	797b      	ldrb	r3, [r7, #5]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	f000 808c 	beq.w	80034fc <wm8994_SetOutputMode+0x134>
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	f300 80cb 	bgt.w	8003580 <wm8994_SetOutputMode+0x1b8>
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <wm8994_SetOutputMode+0x2c>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d042      	beq.n	8003478 <wm8994_SetOutputMode+0xb0>
 80033f2:	e0c5      	b.n	8003580 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80033fc:	2105      	movs	r1, #5
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f9e0 	bl	80037c4 <CODEC_IO_Write>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2200      	movs	r2, #0
 8003414:	f240 6101 	movw	r1, #1537	@ 0x601
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f9d3 	bl	80037c4 <CODEC_IO_Write>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2200      	movs	r2, #0
 800342e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f9c6 	bl	80037c4 <CODEC_IO_Write>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2202      	movs	r2, #2
 8003448:	f240 6104 	movw	r1, #1540	@ 0x604
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f9b9 	bl	80037c4 <CODEC_IO_Write>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2202      	movs	r2, #2
 8003462:	f240 6105 	movw	r1, #1541	@ 0x605
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f9ac 	bl	80037c4 <CODEC_IO_Write>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
    break;
 8003476:	e0c5      	b.n	8003604 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f240 3203 	movw	r2, #771	@ 0x303
 8003480:	2105      	movs	r1, #5
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f99e 	bl	80037c4 <CODEC_IO_Write>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2201      	movs	r2, #1
 8003498:	f240 6101 	movw	r1, #1537	@ 0x601
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f991 	bl	80037c4 <CODEC_IO_Write>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f984 	bl	80037c4 <CODEC_IO_Write>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2200      	movs	r2, #0
 80034cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f977 	bl	80037c4 <CODEC_IO_Write>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2200      	movs	r2, #0
 80034e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f96a 	bl	80037c4 <CODEC_IO_Write>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    break;
 80034fa:	e083      	b.n	8003604 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003504:	2105      	movs	r1, #5
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f95c 	bl	80037c4 <CODEC_IO_Write>
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2201      	movs	r2, #1
 800351c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f94f 	bl	80037c4 <CODEC_IO_Write>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2201      	movs	r2, #1
 8003536:	f240 6102 	movw	r1, #1538	@ 0x602
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f942 	bl	80037c4 <CODEC_IO_Write>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2202      	movs	r2, #2
 8003550:	f240 6104 	movw	r1, #1540	@ 0x604
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f935 	bl	80037c4 <CODEC_IO_Write>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2202      	movs	r2, #2
 800356a:	f240 6105 	movw	r1, #1541	@ 0x605
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f928 	bl	80037c4 <CODEC_IO_Write>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
    break;
 800357e:	e041      	b.n	8003604 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f240 3203 	movw	r2, #771	@ 0x303
 8003588:	2105      	movs	r1, #5
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f91a 	bl	80037c4 <CODEC_IO_Write>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2201      	movs	r2, #1
 80035a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f90d 	bl	80037c4 <CODEC_IO_Write>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2201      	movs	r2, #1
 80035ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f900 	bl	80037c4 <CODEC_IO_Write>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2200      	movs	r2, #0
 80035d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f8f3 	bl	80037c4 <CODEC_IO_Write>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f8e6 	bl	80037c4 <CODEC_IO_Write>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    break;    
 8003602:	bf00      	nop
  }  
  return counter;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4a57      	ldr	r2, [pc, #348]	@ (8003780 <wm8994_SetFrequency+0x170>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d05f      	beq.n	80036e8 <wm8994_SetFrequency+0xd8>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4a55      	ldr	r2, [pc, #340]	@ (8003780 <wm8994_SetFrequency+0x170>)
 800362c:	4293      	cmp	r3, r2
 800362e:	f200 8093 	bhi.w	8003758 <wm8994_SetFrequency+0x148>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003638:	4293      	cmp	r3, r2
 800363a:	d047      	beq.n	80036cc <wm8994_SetFrequency+0xbc>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003642:	4293      	cmp	r3, r2
 8003644:	f200 8088 	bhi.w	8003758 <wm8994_SetFrequency+0x148>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800364e:	4293      	cmp	r3, r2
 8003650:	d074      	beq.n	800373c <wm8994_SetFrequency+0x12c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003658:	4293      	cmp	r3, r2
 800365a:	d87d      	bhi.n	8003758 <wm8994_SetFrequency+0x148>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003662:	4293      	cmp	r3, r2
 8003664:	d05c      	beq.n	8003720 <wm8994_SetFrequency+0x110>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f245 6222 	movw	r2, #22050	@ 0x5622
 800366c:	4293      	cmp	r3, r2
 800366e:	d873      	bhi.n	8003758 <wm8994_SetFrequency+0x148>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003676:	d01b      	beq.n	80036b0 <wm8994_SetFrequency+0xa0>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800367e:	d86b      	bhi.n	8003758 <wm8994_SetFrequency+0x148>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003686:	d005      	beq.n	8003694 <wm8994_SetFrequency+0x84>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800368e:	4293      	cmp	r3, r2
 8003690:	d038      	beq.n	8003704 <wm8994_SetFrequency+0xf4>
 8003692:	e061      	b.n	8003758 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2203      	movs	r2, #3
 800369a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f890 	bl	80037c4 <CODEC_IO_Write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
    break;
 80036ae:	e061      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2233      	movs	r2, #51	@ 0x33
 80036b6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f882 	bl	80037c4 <CODEC_IO_Write>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
    break;
 80036ca:	e053      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2283      	movs	r2, #131	@ 0x83
 80036d2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f874 	bl	80037c4 <CODEC_IO_Write>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
    break;
 80036e6:	e045      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	22a3      	movs	r2, #163	@ 0xa3
 80036ee:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f866 	bl	80037c4 <CODEC_IO_Write>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    break;
 8003702:	e037      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2213      	movs	r2, #19
 800370a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f858 	bl	80037c4 <CODEC_IO_Write>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    break;
 800371e:	e029      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2243      	movs	r2, #67	@ 0x43
 8003726:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f84a 	bl	80037c4 <CODEC_IO_Write>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
    break;
 800373a:	e01b      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2273      	movs	r2, #115	@ 0x73
 8003742:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f83c 	bl	80037c4 <CODEC_IO_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    break; 
 8003756:	e00d      	b.n	8003774 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2283      	movs	r2, #131	@ 0x83
 800375e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f82e 	bl	80037c4 <CODEC_IO_Write>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    break; 
 8003772:	bf00      	nop
  }
  return counter;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00017700 	.word	0x00017700

08003784 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f812 	bl	80037c4 <CODEC_IO_Write>
 80037a0:	4603      	mov	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <wm8994_Reset+0x38>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80037aa:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <wm8994_Reset+0x3c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

  return counter;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200059a0 	.word	0x200059a0
 80037c0:	200059a4 	.word	0x200059a4

080037c4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	460b      	mov	r3, r1
 80037d0:	80bb      	strh	r3, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	88b9      	ldrh	r1, [r7, #4]
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f97d 	bl	8003ae0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	b2db      	uxtb	r3, r3
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <I2Cx_MspInit+0x16c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d15b      	bne.n	80038bc <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003804:	4b57      	ldr	r3, [pc, #348]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	4a56      	ldr	r2, [pc, #344]	@ (8003964 <I2Cx_MspInit+0x170>)
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003810:	4b54      	ldr	r3, [pc, #336]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800381c:	4b51      	ldr	r3, [pc, #324]	@ (8003964 <I2Cx_MspInit+0x170>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	4a50      	ldr	r2, [pc, #320]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	6313      	str	r3, [r2, #48]	@ 0x30
 8003828:	4b4e      	ldr	r3, [pc, #312]	@ (8003964 <I2Cx_MspInit+0x170>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003838:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800383a:	2312      	movs	r3, #18
 800383c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8003846:	2304      	movs	r3, #4
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800384a:	f107 031c 	add.w	r3, r7, #28
 800384e:	4619      	mov	r1, r3
 8003850:	4845      	ldr	r0, [pc, #276]	@ (8003968 <I2Cx_MspInit+0x174>)
 8003852:	f001 fbab 	bl	8004fac <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800385a:	230b      	movs	r3, #11
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	4841      	ldr	r0, [pc, #260]	@ (800396c <I2Cx_MspInit+0x178>)
 8003866:	f001 fba1 	bl	8004fac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800386a:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <I2Cx_MspInit+0x170>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	4a3d      	ldr	r2, [pc, #244]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003874:	6413      	str	r3, [r2, #64]	@ 0x40
 8003876:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003882:	4b38      	ldr	r3, [pc, #224]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4a37      	ldr	r2, [pc, #220]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003888:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800388c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800388e:	4b35      	ldr	r3, [pc, #212]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003898:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	210f      	movs	r1, #15
 800389e:	205f      	movs	r0, #95	@ 0x5f
 80038a0:	f000 fadb 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80038a4:	205f      	movs	r0, #95	@ 0x5f
 80038a6:	f000 faf4 	bl	8003e92 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	210f      	movs	r1, #15
 80038ae:	2060      	movs	r0, #96	@ 0x60
 80038b0:	f000 fad3 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80038b4:	2060      	movs	r0, #96	@ 0x60
 80038b6:	f000 faec 	bl	8003e92 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80038ba:	e04d      	b.n	8003958 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80038bc:	4b29      	ldr	r3, [pc, #164]	@ (8003964 <I2Cx_MspInit+0x170>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	4a28      	ldr	r2, [pc, #160]	@ (8003964 <I2Cx_MspInit+0x170>)
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c8:	4b26      	ldr	r3, [pc, #152]	@ (8003964 <I2Cx_MspInit+0x170>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80038d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80038da:	2312      	movs	r3, #18
 80038dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80038e2:	2302      	movs	r3, #2
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80038e6:	2304      	movs	r3, #4
 80038e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80038ea:	f107 031c 	add.w	r3, r7, #28
 80038ee:	4619      	mov	r1, r3
 80038f0:	481e      	ldr	r0, [pc, #120]	@ (800396c <I2Cx_MspInit+0x178>)
 80038f2:	f001 fb5b 	bl	8004fac <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80038f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	4619      	mov	r1, r3
 8003902:	481a      	ldr	r0, [pc, #104]	@ (800396c <I2Cx_MspInit+0x178>)
 8003904:	f001 fb52 	bl	8004fac <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003908:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <I2Cx_MspInit+0x170>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <I2Cx_MspInit+0x170>)
 800390e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003920:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4a0f      	ldr	r2, [pc, #60]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003926:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800392a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800392c:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <I2Cx_MspInit+0x170>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a0c      	ldr	r2, [pc, #48]	@ (8003964 <I2Cx_MspInit+0x170>)
 8003932:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003936:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	210f      	movs	r1, #15
 800393c:	201f      	movs	r0, #31
 800393e:	f000 fa8c 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003942:	201f      	movs	r0, #31
 8003944:	f000 faa5 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	210f      	movs	r1, #15
 800394c:	2020      	movs	r0, #32
 800394e:	f000 fa84 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003952:	2020      	movs	r0, #32
 8003954:	f000 fa9d 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8003958:	bf00      	nop
 800395a:	3730      	adds	r7, #48	@ 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200059a8 	.word	0x200059a8
 8003964:	40023800 	.word	0x40023800
 8003968:	40020c00 	.word	0x40020c00
 800396c:	40020400 	.word	0x40020400

08003970 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f002 f929 	bl	8005bd0 <HAL_I2C_GetState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d125      	bne.n	80039d0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <I2Cx_Init+0x68>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <I2Cx_Init+0x6c>)
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e002      	b.n	800399a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <I2Cx_Init+0x70>)
 8003998:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a11      	ldr	r2, [pc, #68]	@ (80039e4 <I2Cx_Init+0x74>)
 800399e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff15 	bl	80037f4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f001 fdf2 	bl	80055b4 <HAL_I2C_Init>
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200059a8 	.word	0x200059a8
 80039dc:	40006000 	.word	0x40006000
 80039e0:	40005400 	.word	0x40005400
 80039e4:	40912732 	.word	0x40912732

080039e8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af04      	add	r7, sp, #16
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	72fb      	strb	r3, [r7, #11]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	b299      	uxth	r1, r3
 8003a0a:	88f8      	ldrh	r0, [r7, #6]
 8003a0c:	893a      	ldrh	r2, [r7, #8]
 8003a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f001 ffbc 	bl	800599c <HAL_I2C_Mem_Read>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	4619      	mov	r1, r3
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f832 	bl	8003a9c <I2Cx_Error>
  }
  return status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	@ 0x28
 8003a46:	af04      	add	r7, sp, #16
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	72fb      	strb	r3, [r7, #11]
 8003a54:	460b      	mov	r3, r1
 8003a56:	813b      	strh	r3, [r7, #8]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	b299      	uxth	r1, r3
 8003a64:	88f8      	ldrh	r0, [r7, #6]
 8003a66:	893a      	ldrh	r2, [r7, #8]
 8003a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a6c:	9302      	str	r3, [sp, #8]
 8003a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	4603      	mov	r3, r0
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f001 fe7b 	bl	8005774 <HAL_I2C_Mem_Write>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f805 	bl	8003a9c <I2Cx_Error>
  }
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 fe1f 	bl	80056ec <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff5e 	bl	8003970 <I2Cx_Init>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003ac0:	4802      	ldr	r0, [pc, #8]	@ (8003acc <AUDIO_IO_Init+0x10>)
 8003ac2:	f7ff ff55 	bl	8003970 <I2Cx_Init>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200059a8 	.word	0x200059a8

08003ad0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
 8003aea:	460b      	mov	r3, r1
 8003aec:	80bb      	strh	r3, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003af6:	89fb      	ldrh	r3, [r7, #14]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	b21a      	sxth	r2, r3
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003b12:	88ba      	ldrh	r2, [r7, #4]
 8003b14:	79f9      	ldrb	r1, [r7, #7]
 8003b16:	2302      	movs	r3, #2
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	1cbb      	adds	r3, r7, #2
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2302      	movs	r3, #2
 8003b20:	4803      	ldr	r0, [pc, #12]	@ (8003b30 <AUDIO_IO_Write+0x50>)
 8003b22:	f7ff ff8e 	bl	8003a42 <I2Cx_WriteMultiple>
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200059a8 	.word	0x200059a8

08003b34 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	71fb      	strb	r3, [r7, #7]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	81bb      	strh	r3, [r7, #12]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003b4c:	88ba      	ldrh	r2, [r7, #4]
 8003b4e:	79f9      	ldrb	r1, [r7, #7]
 8003b50:	2302      	movs	r3, #2
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	480a      	ldr	r0, [pc, #40]	@ (8003b88 <AUDIO_IO_Read+0x54>)
 8003b5e:	f7ff ff43 	bl	80039e8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003b62:	89bb      	ldrh	r3, [r7, #12]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003b68:	89bb      	ldrh	r3, [r7, #12]
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	b21b      	sxth	r3, r3
 8003b78:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003b7e:	89bb      	ldrh	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200059a8 	.word	0x200059a8

08003b8c <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f861 	bl	8003c5c <HAL_Delay>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	f000 f94c 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bac:	200f      	movs	r0, #15
 8003bae:	f000 f805 	bl	8003bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb2:	f7fd febd 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_InitTick+0x54>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <HAL_InitTick+0x58>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f967 	bl	8003eae <HAL_SYSTICK_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00e      	b.n	8003c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d80a      	bhi.n	8003c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f000 f92f 	bl	8003e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bfc:	4a06      	ldr	r2, [pc, #24]	@ (8003c18 <HAL_InitTick+0x5c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000008 	.word	0x20000008
 8003c14:	20000040 	.word	0x20000040
 8003c18:	2000003c 	.word	0x2000003c

08003c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_IncTick+0x20>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_IncTick+0x24>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <HAL_IncTick+0x24>)
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000040 	.word	0x20000040
 8003c40:	200059fc 	.word	0x200059fc

08003c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return uwTick;
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_GetTick+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200059fc 	.word	0x200059fc

08003c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7ff ffee 	bl	8003c44 <HAL_GetTick>
 8003c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d005      	beq.n	8003c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <HAL_Delay+0x44>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c82:	bf00      	nop
 8003c84:	f7ff ffde 	bl	8003c44 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d8f7      	bhi.n	8003c84 <HAL_Delay+0x28>
  {
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000040 	.word	0x20000040

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00
 8003ce8:	05fa0000 	.word	0x05fa0000

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	@ (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	@ (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	@ (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff8e 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff29 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e6c:	f7ff ff3e 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff ff8e 	bl	8003d98 <NVIC_EncodePriority>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff5d 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff31 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffa2 	bl	8003e00 <SysTick_Config>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d106      	bne.n	8003ee4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003ed6:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003ee2:	e005      	b.n	8003ef0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	@ (8003efc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003eea:	f023 0304 	bic.w	r3, r3, #4
 8003eee:	6013      	str	r3, [r2, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0ac      	b.n	800406c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb88 	bl	800462c <DFSDM_GetChannelFromInstance>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a55      	ldr	r2, [pc, #340]	@ (8004074 <HAL_DFSDM_ChannelInit+0x174>)
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e09f      	b.n	800406c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd fd9d 	bl	8001a6c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003f32:	4b51      	ldr	r3, [pc, #324]	@ (8004078 <HAL_DFSDM_ChannelInit+0x178>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a4f      	ldr	r2, [pc, #316]	@ (8004078 <HAL_DFSDM_ChannelInit+0x178>)
 8003f3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8003f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004078 <HAL_DFSDM_ChannelInit+0x178>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d125      	bne.n	8003f90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003f44:	4b4d      	ldr	r3, [pc, #308]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a4c      	ldr	r2, [pc, #304]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003f50:	4b4a      	ldr	r3, [pc, #296]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4948      	ldr	r1, [pc, #288]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a46      	ldr	r2, [pc, #280]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f64:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003f68:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	791b      	ldrb	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8003f72:	4b42      	ldr	r3, [pc, #264]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	493f      	ldr	r1, [pc, #252]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003f84:	4b3d      	ldr	r3, [pc, #244]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003f9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003fb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020f 	bic.w	r2, r2, #15
 8003fcc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003ff4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f002 0207 	and.w	r2, r2, #7
 8004020:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800404c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fae6 	bl	800462c <DFSDM_GetChannelFromInstance>
 8004060:	4602      	mov	r2, r0
 8004062:	4904      	ldr	r1, [pc, #16]	@ (8004074 <HAL_DFSDM_ChannelInit+0x174>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20005a04 	.word	0x20005a04
 8004078:	20005a00 	.word	0x20005a00
 800407c:	40017400 	.word	0x40017400

08004080 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0c6      	b.n	8004248 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a64      	ldr	r2, [pc, #400]	@ (8004250 <HAL_DFSDM_FilterInit+0x1a8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d109      	bne.n	80040d8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d003      	beq.n	80040d4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b7      	b.n	8004248 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fd fc45 	bl	8001980 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8004104:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7a1b      	ldrb	r3, [r3, #8]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d108      	bne.n	8004120 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e007      	b.n	8004130 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800412e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7a5b      	ldrb	r3, [r3, #9]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d108      	bne.n	800414a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e007      	b.n	800415a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004158:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_DFSDM_FilterInit+0x1ac>)
 8004166:	400b      	ands	r3, r1
 8004168:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d108      	bne.n	8004184 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7c1b      	ldrb	r3, [r3, #16]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d108      	bne.n	800419e <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0210 	orr.w	r2, r2, #16
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e007      	b.n	80041ae <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0210 	bic.w	r2, r2, #16
 80041ac:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7c5b      	ldrb	r3, [r3, #17]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0220 	orr.w	r2, r2, #32
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e007      	b.n	80041d8 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0220 	bic.w	r2, r2, #32
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6959      	ldr	r1, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <HAL_DFSDM_FilterInit+0x1b0>)
 80041e4:	400b      	ands	r3, r1
 80041e6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80041fa:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8004202:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7c1a      	ldrb	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40017500 	.word	0x40017500
 8004254:	ffff80f7 	.word	0xffff80f7
 8004258:	1c00ff00 	.word	0x1c00ff00

0800425c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02c      	beq.n	80042d0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800427c:	2bff      	cmp	r3, #255	@ 0xff
 800427e:	d027      	beq.n	80042d0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b16      	ldr	r3, [pc, #88]	@ (80042e4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800428c:	400b      	ands	r3, r1
 800428e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10d      	bne.n	80042b2 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80042a4:	431a      	orrs	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e00a      	b.n	80042c8 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80042ce:	e001      	b.n	80042d4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	f8fbffff 	.word	0xf8fbffff

080042e8 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	@ 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check if overrun occurs during regular conversion */
  if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) != 0) && \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <HAL_DFSDM_IRQHandler+0x3a>
     ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_ROVRIE) != 0))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0308 	and.w	r3, r3, #8
  if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) != 0) && \
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_DFSDM_IRQHandler+0x3a>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2208      	movs	r2, #8
 8004312:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f97c 	bl	8004618 <HAL_DFSDM_FilterErrorCallback>
 8004320:	e152      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) != 0) && \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d011      	beq.n	8004354 <HAL_DFSDM_IRQHandler+0x6c>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JOVRIE) != 0))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0304 	and.w	r3, r3, #4
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JOVRF) != 0) && \
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f963 	bl	8004618 <HAL_DFSDM_FilterErrorCallback>
 8004352:	e139      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if end of regular conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != 0) && \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d027      	beq.n	80043b2 <HAL_DFSDM_IRQHandler+0xca>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_REOCIE) != 0))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0302 	and.w	r3, r3, #2
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != 0) && \
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_DFSDM_IRQHandler+0xca>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f931 	bl	80045d8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	f040 8123 	bne.w	80045c6 <HAL_DFSDM_IRQHandler+0x2de>
       (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 811e 	bne.w	80045c6 <HAL_DFSDM_IRQHandler+0x2de>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0202 	bic.w	r2, r2, #2
 8004398:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d101      	bne.n	80043a8 <HAL_DFSDM_IRQHandler+0xc0>
 80043a4:	2201      	movs	r2, #1
 80043a6:	e000      	b.n	80043aa <HAL_DFSDM_IRQHandler+0xc2>
 80043a8:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80043b0:	e109      	b.n	80045c6 <HAL_DFSDM_IRQHandler+0x2de>
    }
  }
  /* Check if end of injected conversion */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != 0) && \
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d036      	beq.n	800442e <HAL_DFSDM_IRQHandler+0x146>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_JEOCIE) != 0))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0301 	and.w	r3, r3, #1
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_JEOCF) != 0) && \
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02f      	beq.n	800442e <HAL_DFSDM_IRQHandler+0x146>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f90c 	bl	80045ec <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	649a      	str	r2, [r3, #72]	@ 0x48
    if(hdfsdm_filter->InjConvRemaining == 0)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 80f0 	bne.w	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
    {
      /* End of conversion if trigger is software */
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d112      	bne.n	8004416 <HAL_DFSDM_IRQHandler+0x12e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8004406:	2b03      	cmp	r3, #3
 8004408:	d101      	bne.n	800440e <HAL_DFSDM_IRQHandler+0x126>
 800440a:	2201      	movs	r2, #1
 800440c:	e000      	b.n	8004410 <HAL_DFSDM_IRQHandler+0x128>
 800440e:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <HAL_DFSDM_IRQHandler+0x13e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	e000      	b.n	8004428 <HAL_DFSDM_IRQHandler+0x140>
 8004426:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6493      	str	r3, [r2, #72]	@ 0x48
    if(hdfsdm_filter->InjConvRemaining == 0)
 800442c:	e0cc      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if analog watchdog occurs */
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_AWDF) != 0) && \
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d042      	beq.n	80044c2 <HAL_DFSDM_IRQHandler+0x1da>
          ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_AWDIE) != 0))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0310 	and.w	r3, r3, #16
  else if(((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_AWDF) != 0) && \
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03b      	beq.n	80044c2 <HAL_DFSDM_IRQHandler+0x1da>
  {
    uint32_t reg = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t threshold = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
    uint32_t channel = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_DFSDM_IRQHandler+0x182>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_DFSDM_IRQHandler+0x184>
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
    if(threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_DFSDM_IRQHandler+0x1a0>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    while((reg & 1) == 0)
 800447a:	e005      	b.n	8004488 <HAL_DFSDM_IRQHandler+0x1a0>
    {
      channel++;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	3301      	adds	r3, #1
 8004480:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
    while((reg & 1) == 0)
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f4      	beq.n	800447c <HAL_DFSDM_IRQHandler+0x194>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_DFSDM_IRQHandler+0x1be>
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	3308      	adds	r3, #8
 800449c:	2201      	movs	r2, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	e004      	b.n	80044b0 <HAL_DFSDM_IRQHandler+0x1c8>
                                     (1 << channel);
 80044a6:	2201      	movs	r2, #1
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
                                        (1 << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80044ae:	461a      	mov	r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6a39      	ldr	r1, [r7, #32]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8a0 	bl	8004600 <HAL_DFSDM_FilterAwdCallback>
  {
 80044c0:	e082      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
#endif
  }
  /* Check if clock absence occurs */
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a42      	ldr	r2, [pc, #264]	@ (80045d0 <HAL_DFSDM_IRQHandler+0x2e8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d145      	bne.n	8004558 <HAL_DFSDM_IRQHandler+0x270>
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03e      	beq.n	8004558 <HAL_DFSDM_IRQHandler+0x270>
         ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_CKABIE) != 0))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) != 0) && \
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d037      	beq.n	8004558 <HAL_DFSDM_IRQHandler+0x270>
  {
    uint32_t reg = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
    uint32_t channel = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	61fb      	str	r3, [r7, #28]

    while(channel < DFSDM1_CHANNEL_NUMBER)
 80044fc:	e028      	b.n	8004550 <HAL_DFSDM_IRQHandler+0x268>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if(((reg & 1) != 0) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01d      	beq.n	8004544 <HAL_DFSDM_IRQHandler+0x25c>
 8004508:	4a32      	ldr	r2, [pc, #200]	@ (80045d4 <HAL_DFSDM_IRQHandler+0x2ec>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d017      	beq.n	8004544 <HAL_DFSDM_IRQHandler+0x25c>
      {
        /* Check clock absence has been enabled for this channel */
        if((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0)
 8004514:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <HAL_DFSDM_IRQHandler+0x2ec>)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_DFSDM_IRQHandler+0x25c>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3310      	adds	r3, #16
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004536:	4a27      	ldr	r2, [pc, #156]	@ (80045d4 <HAL_DFSDM_IRQHandler+0x2ec>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fd9e 	bl	8004080 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	3301      	adds	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
    while(channel < DFSDM1_CHANNEL_NUMBER)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d9d3      	bls.n	80044fe <HAL_DFSDM_IRQHandler+0x216>
  {
 8004556:	e037      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
    }
  }
  /* Check if short circuit detection occurs */
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_DFSDM_IRQHandler+0x2e8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d132      	bne.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
  else if((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800456c:	d32c      	bcc.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
         ((hdfsdm_filter->Instance->FLTCR2 & DFSDM_FLTCR2_SCDIE) != 0))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0320 	and.w	r3, r3, #32
         ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) != 0) && \
 8004578:	2b00      	cmp	r3, #0
 800457a:	d025      	beq.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
  {
    uint32_t reg = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
    uint32_t channel = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0e1b      	lsrs	r3, r3, #24
 800458c:	b2db      	uxtb	r3, r3
 800458e:	617b      	str	r3, [r7, #20]
    while((reg & 1) == 0)
 8004590:	e005      	b.n	800459e <HAL_DFSDM_IRQHandler+0x2b6>
    {
      channel++;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	3301      	adds	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
      reg = reg >> 1;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	617b      	str	r3, [r7, #20]
    while((reg & 1) == 0)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f4      	beq.n	8004592 <HAL_DFSDM_IRQHandler+0x2aa>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1 << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3318      	adds	r3, #24
 80045ac:	2201      	movs	r2, #1
 80045ae:	409a      	lsls	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80045b6:	4a07      	ldr	r2, [pc, #28]	@ (80045d4 <HAL_DFSDM_IRQHandler+0x2ec>)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fd68 	bl	8004094 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80045c4:	e000      	b.n	80045c8 <HAL_DFSDM_IRQHandler+0x2e0>
    if((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80045c6:	bf00      	nop
}
 80045c8:	bf00      	nop
 80045ca:	3728      	adds	r7, #40	@ 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40017500 	.word	0x40017500
 80045d4:	20005a04 	.word	0x20005a04

080045d8 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1c      	ldr	r2, [pc, #112]	@ (80046a8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d102      	bne.n	8004642 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e02b      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a19      	ldr	r2, [pc, #100]	@ (80046ac <DFSDM_GetChannelFromInstance+0x80>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d102      	bne.n	8004650 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800464a:	2301      	movs	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e024      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <DFSDM_GetChannelFromInstance+0x84>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d102      	bne.n	800465e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004658:	2302      	movs	r3, #2
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e01d      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <DFSDM_GetChannelFromInstance+0x88>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d102      	bne.n	800466c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8004666:	2303      	movs	r3, #3
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e016      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d102      	bne.n	800467a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004674:	2304      	movs	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e00f      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a0f      	ldr	r2, [pc, #60]	@ (80046bc <DFSDM_GetChannelFromInstance+0x90>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d102      	bne.n	8004688 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004682:	2305      	movs	r3, #5
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e008      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a0d      	ldr	r2, [pc, #52]	@ (80046c0 <DFSDM_GetChannelFromInstance+0x94>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d102      	bne.n	8004696 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004690:	2306      	movs	r3, #6
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e001      	b.n	800469a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8004696:	2307      	movs	r3, #7
 8004698:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40017400 	.word	0x40017400
 80046ac:	40017420 	.word	0x40017420
 80046b0:	40017440 	.word	0x40017440
 80046b4:	40017460 	.word	0x40017460
 80046b8:	40017480 	.word	0x40017480
 80046bc:	400174a0 	.word	0x400174a0
 80046c0:	400174c0 	.word	0x400174c0

080046c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d0:	f7ff fab8 	bl	8003c44 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e099      	b.n	8004814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004700:	e00f      	b.n	8004722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004702:	f7ff fa9f 	bl	8003c44 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b05      	cmp	r3, #5
 800470e:	d908      	bls.n	8004722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2203      	movs	r2, #3
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e078      	b.n	8004814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e8      	bne.n	8004702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4b38      	ldr	r3, [pc, #224]	@ (800481c <HAL_DMA_Init+0x158>)
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	2b04      	cmp	r3, #4
 800477a:	d107      	bne.n	800478c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	4313      	orrs	r3, r2
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d117      	bne.n	80047e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb73 	bl	8004eb4 <DMA_CheckFifoParam>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047e2:	2301      	movs	r3, #1
 80047e4:	e016      	b.n	8004814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fb2a 	bl	8004e48 <DMA_CalcBaseAndBitshift>
 80047f4:	4603      	mov	r3, r0
 80047f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	223f      	movs	r2, #63	@ 0x3f
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	e010803f 	.word	0xe010803f

08004820 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e050      	b.n	80048d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d101      	bne.n	8004842 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	e048      	b.n	80048d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2221      	movs	r2, #33	@ 0x21
 8004880:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fae0 	bl	8004e48 <DMA_CalcBaseAndBitshift>
 8004888:	4603      	mov	r3, r0
 800488a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	223f      	movs	r2, #63	@ 0x3f
 8004892:	409a      	lsls	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_DMA_Start_IT+0x26>
 80048fe:	2302      	movs	r3, #2
 8004900:	e048      	b.n	8004994 <HAL_DMA_Start_IT+0xb8>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d137      	bne.n	8004986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa5e 	bl	8004dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	223f      	movs	r2, #63	@ 0x3f
 8004936:	409a      	lsls	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0216 	orr.w	r2, r2, #22
 800494a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800495a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7ff f94b 	bl	8003c44 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d008      	beq.n	80049ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e052      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0216 	bic.w	r2, r2, #22
 80049dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_DMA_Abort+0x62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a1e:	e013      	b.n	8004a48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a20:	f7ff f910 	bl	8003c44 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d90c      	bls.n	8004a48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e015      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e4      	bne.n	8004a20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	223f      	movs	r2, #63	@ 0x3f
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00c      	b.n	8004ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004acc:	4b8e      	ldr	r3, [pc, #568]	@ (8004d08 <HAL_DMA_IRQHandler+0x248>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8004d0c <HAL_DMA_IRQHandler+0x24c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	2208      	movs	r2, #8
 8004aec:	409a      	lsls	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01a      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	2208      	movs	r2, #8
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	2201      	movs	r2, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	f043 0202 	orr.w	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	2204      	movs	r2, #4
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d043      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03c      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	2210      	movs	r2, #16
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d024      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
 8004bee:	e01f      	b.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	e016      	b.n	8004c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0208 	bic.w	r2, r2, #8
 8004c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	2220      	movs	r2, #32
 8004c36:	409a      	lsls	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 808f 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8087 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c56:	2220      	movs	r2, #32
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d136      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0216 	bic.w	r2, r2, #22
 8004c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_DMA_IRQHandler+0x1da>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cae:	223f      	movs	r2, #63	@ 0x3f
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d07e      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
        }
        return;
 8004cd6:	e079      	b.n	8004dcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01d      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d031      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
 8004d04:	e02c      	b.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
 8004d06:	bf00      	nop
 8004d08:	20000008 	.word	0x20000008
 8004d0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d023      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	e01e      	b.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0210 	bic.w	r2, r2, #16
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d032      	beq.n	8004dce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2205      	movs	r2, #5
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d307      	bcc.n	8004da8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f2      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x2cc>
 8004da6:	e000      	b.n	8004daa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004da8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
 8004dca:	e000      	b.n	8004dce <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dcc:	bf00      	nop
    }
  }
}
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d108      	bne.n	8004e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e2a:	e007      	b.n	8004e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3b10      	subs	r3, #16
 8004e58:	4a13      	ldr	r2, [pc, #76]	@ (8004ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e62:	4a12      	ldr	r2, [pc, #72]	@ (8004eac <DMA_CalcBaseAndBitshift+0x64>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d908      	bls.n	8004e88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e86:	e006      	b.n	8004e96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	aaaaaaab 	.word	0xaaaaaaab
 8004eac:	0801153c 	.word	0x0801153c
 8004eb0:	fffffc00 	.word	0xfffffc00

08004eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11f      	bne.n	8004f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d856      	bhi.n	8004f82 <DMA_CheckFifoParam+0xce>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <DMA_CheckFifoParam+0x28>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eff 	.word	0x08004eff
 8004ee4:	08004eed 	.word	0x08004eed
 8004ee8:	08004f83 	.word	0x08004f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d046      	beq.n	8004f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e043      	b.n	8004f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f06:	d140      	bne.n	8004f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e03d      	b.n	8004f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f16:	d121      	bne.n	8004f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d837      	bhi.n	8004f8e <DMA_CheckFifoParam+0xda>
 8004f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <DMA_CheckFifoParam+0x70>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f3b 	.word	0x08004f3b
 8004f2c:	08004f35 	.word	0x08004f35
 8004f30:	08004f4d 	.word	0x08004f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      break;
 8004f38:	e030      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d025      	beq.n	8004f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4a:	e022      	b.n	8004f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f54:	d11f      	bne.n	8004f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f5a:	e01c      	b.n	8004f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d903      	bls.n	8004f6a <DMA_CheckFifoParam+0xb6>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f68:	e018      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6e:	e015      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e00b      	b.n	8004f9a <DMA_CheckFifoParam+0xe6>
      break;
 8004f82:	bf00      	nop
 8004f84:	e00a      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f86:	bf00      	nop
 8004f88:	e008      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e006      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	@ 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e175      	b.n	80052b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fcc:	2201      	movs	r2, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	f040 8164 	bne.w	80052b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d005      	beq.n	8005002 <HAL_GPIO_Init+0x56>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d130      	bne.n	8005064 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0201 	and.w	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d017      	beq.n	80050a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	2203      	movs	r2, #3
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d123      	bne.n	80050f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	08da      	lsrs	r2, r3, #3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3208      	adds	r2, #8
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	220f      	movs	r2, #15
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	08da      	lsrs	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3208      	adds	r2, #8
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80be 	beq.w	80052b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	4b66      	ldr	r3, [pc, #408]	@ (80052d0 <HAL_GPIO_Init+0x324>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	4a65      	ldr	r2, [pc, #404]	@ (80052d0 <HAL_GPIO_Init+0x324>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005140:	6453      	str	r3, [r2, #68]	@ 0x44
 8005142:	4b63      	ldr	r3, [pc, #396]	@ (80052d0 <HAL_GPIO_Init+0x324>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800514e:	4a61      	ldr	r2, [pc, #388]	@ (80052d4 <HAL_GPIO_Init+0x328>)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3302      	adds	r3, #2
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	220f      	movs	r2, #15
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a58      	ldr	r2, [pc, #352]	@ (80052d8 <HAL_GPIO_Init+0x32c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d037      	beq.n	80051ea <HAL_GPIO_Init+0x23e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a57      	ldr	r2, [pc, #348]	@ (80052dc <HAL_GPIO_Init+0x330>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_GPIO_Init+0x23a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a56      	ldr	r2, [pc, #344]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02b      	beq.n	80051e2 <HAL_GPIO_Init+0x236>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a55      	ldr	r2, [pc, #340]	@ (80052e4 <HAL_GPIO_Init+0x338>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d025      	beq.n	80051de <HAL_GPIO_Init+0x232>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a54      	ldr	r2, [pc, #336]	@ (80052e8 <HAL_GPIO_Init+0x33c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01f      	beq.n	80051da <HAL_GPIO_Init+0x22e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a53      	ldr	r2, [pc, #332]	@ (80052ec <HAL_GPIO_Init+0x340>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d019      	beq.n	80051d6 <HAL_GPIO_Init+0x22a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a52      	ldr	r2, [pc, #328]	@ (80052f0 <HAL_GPIO_Init+0x344>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_GPIO_Init+0x226>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a51      	ldr	r2, [pc, #324]	@ (80052f4 <HAL_GPIO_Init+0x348>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_GPIO_Init+0x222>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a50      	ldr	r2, [pc, #320]	@ (80052f8 <HAL_GPIO_Init+0x34c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_GPIO_Init+0x21e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4f      	ldr	r2, [pc, #316]	@ (80052fc <HAL_GPIO_Init+0x350>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_GPIO_Init+0x21a>
 80051c2:	2309      	movs	r3, #9
 80051c4:	e012      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051c6:	230a      	movs	r3, #10
 80051c8:	e010      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ca:	2308      	movs	r3, #8
 80051cc:	e00e      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ce:	2307      	movs	r3, #7
 80051d0:	e00c      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051d2:	2306      	movs	r3, #6
 80051d4:	e00a      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051d6:	2305      	movs	r3, #5
 80051d8:	e008      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051da:	2304      	movs	r3, #4
 80051dc:	e006      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051de:	2303      	movs	r3, #3
 80051e0:	e004      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ea:	2300      	movs	r3, #0
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	f002 0203 	and.w	r2, r2, #3
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	4093      	lsls	r3, r2
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051fc:	4935      	ldr	r1, [pc, #212]	@ (80052d4 <HAL_GPIO_Init+0x328>)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	3302      	adds	r3, #2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800520a:	4b3d      	ldr	r3, [pc, #244]	@ (8005300 <HAL_GPIO_Init+0x354>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522e:	4a34      	ldr	r2, [pc, #208]	@ (8005300 <HAL_GPIO_Init+0x354>)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005234:	4b32      	ldr	r3, [pc, #200]	@ (8005300 <HAL_GPIO_Init+0x354>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005258:	4a29      	ldr	r2, [pc, #164]	@ (8005300 <HAL_GPIO_Init+0x354>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_GPIO_Init+0x354>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005282:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <HAL_GPIO_Init+0x354>)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005288:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <HAL_GPIO_Init+0x354>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052ac:	4a14      	ldr	r2, [pc, #80]	@ (8005300 <HAL_GPIO_Init+0x354>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	f67f ae86 	bls.w	8004fcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3724      	adds	r7, #36	@ 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40013800 	.word	0x40013800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020400 	.word	0x40020400
 80052e0:	40020800 	.word	0x40020800
 80052e4:	40020c00 	.word	0x40020c00
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40021400 	.word	0x40021400
 80052f0:	40021800 	.word	0x40021800
 80052f4:	40021c00 	.word	0x40021c00
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40022400 	.word	0x40022400
 8005300:	40013c00 	.word	0x40013c00

08005304 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e0d9      	b.n	80054d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005320:	2201      	movs	r2, #1
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4013      	ands	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	f040 80c9 	bne.w	80054ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800533c:	4a6b      	ldr	r2, [pc, #428]	@ (80054ec <HAL_GPIO_DeInit+0x1e8>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	3302      	adds	r3, #2
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	220f      	movs	r2, #15
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4013      	ands	r3, r2
 800535c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a63      	ldr	r2, [pc, #396]	@ (80054f0 <HAL_GPIO_DeInit+0x1ec>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d037      	beq.n	80053d6 <HAL_GPIO_DeInit+0xd2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a62      	ldr	r2, [pc, #392]	@ (80054f4 <HAL_GPIO_DeInit+0x1f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d031      	beq.n	80053d2 <HAL_GPIO_DeInit+0xce>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a61      	ldr	r2, [pc, #388]	@ (80054f8 <HAL_GPIO_DeInit+0x1f4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <HAL_GPIO_DeInit+0xca>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a60      	ldr	r2, [pc, #384]	@ (80054fc <HAL_GPIO_DeInit+0x1f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d025      	beq.n	80053ca <HAL_GPIO_DeInit+0xc6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a5f      	ldr	r2, [pc, #380]	@ (8005500 <HAL_GPIO_DeInit+0x1fc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <HAL_GPIO_DeInit+0xc2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a5e      	ldr	r2, [pc, #376]	@ (8005504 <HAL_GPIO_DeInit+0x200>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d019      	beq.n	80053c2 <HAL_GPIO_DeInit+0xbe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a5d      	ldr	r2, [pc, #372]	@ (8005508 <HAL_GPIO_DeInit+0x204>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_GPIO_DeInit+0xba>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a5c      	ldr	r2, [pc, #368]	@ (800550c <HAL_GPIO_DeInit+0x208>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00d      	beq.n	80053ba <HAL_GPIO_DeInit+0xb6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a5b      	ldr	r2, [pc, #364]	@ (8005510 <HAL_GPIO_DeInit+0x20c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <HAL_GPIO_DeInit+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005514 <HAL_GPIO_DeInit+0x210>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <HAL_GPIO_DeInit+0xae>
 80053ae:	2309      	movs	r3, #9
 80053b0:	e012      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053b2:	230a      	movs	r3, #10
 80053b4:	e010      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053b6:	2308      	movs	r3, #8
 80053b8:	e00e      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053ba:	2307      	movs	r3, #7
 80053bc:	e00c      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053be:	2306      	movs	r3, #6
 80053c0:	e00a      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053c2:	2305      	movs	r3, #5
 80053c4:	e008      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053c6:	2304      	movs	r3, #4
 80053c8:	e006      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053ca:	2303      	movs	r3, #3
 80053cc:	e004      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e002      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_GPIO_DeInit+0xd4>
 80053d6:	2300      	movs	r3, #0
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	f002 0203 	and.w	r2, r2, #3
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	4093      	lsls	r3, r2
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d132      	bne.n	800544e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	43db      	mvns	r3, r3
 80053f0:	4949      	ldr	r1, [pc, #292]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053f6:	4b48      	ldr	r3, [pc, #288]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	4946      	ldr	r1, [pc, #280]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 8005400:	4013      	ands	r3, r2
 8005402:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005404:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	43db      	mvns	r3, r3
 800540c:	4942      	ldr	r1, [pc, #264]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 800540e:	4013      	ands	r3, r2
 8005410:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005412:	4b41      	ldr	r3, [pc, #260]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	43db      	mvns	r3, r3
 800541a:	493f      	ldr	r1, [pc, #252]	@ (8005518 <HAL_GPIO_DeInit+0x214>)
 800541c:	4013      	ands	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005430:	4a2e      	ldr	r2, [pc, #184]	@ (80054ec <HAL_GPIO_DeInit+0x1e8>)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	089b      	lsrs	r3, r3, #2
 8005436:	3302      	adds	r3, #2
 8005438:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	43da      	mvns	r2, r3
 8005440:	482a      	ldr	r0, [pc, #168]	@ (80054ec <HAL_GPIO_DeInit+0x1e8>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	400a      	ands	r2, r1
 8005448:	3302      	adds	r3, #2
 800544a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	2103      	movs	r1, #3
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	401a      	ands	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	08da      	lsrs	r2, r3, #3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3208      	adds	r2, #8
 800546c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	220f      	movs	r2, #15
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	08d2      	lsrs	r2, r2, #3
 8005484:	4019      	ands	r1, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2103      	movs	r1, #3
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	2101      	movs	r1, #1
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	fa01 f303 	lsl.w	r3, r1, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	2103      	movs	r1, #3
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	401a      	ands	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	3301      	adds	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	f67f af22 	bls.w	8005320 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40020000 	.word	0x40020000
 80054f4:	40020400 	.word	0x40020400
 80054f8:	40020800 	.word	0x40020800
 80054fc:	40020c00 	.word	0x40020c00
 8005500:	40021000 	.word	0x40021000
 8005504:	40021400 	.word	0x40021400
 8005508:	40021800 	.word	0x40021800
 800550c:	40021c00 	.word	0x40021c00
 8005510:	40022000 	.word	0x40022000
 8005514:	40022400 	.word	0x40022400
 8005518:	40013c00 	.word	0x40013c00

0800551c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	887b      	ldrh	r3, [r7, #2]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	e001      	b.n	800553e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	807b      	strh	r3, [r7, #2]
 8005558:	4613      	mov	r3, r2
 800555a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800555c:	787b      	ldrb	r3, [r7, #1]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005562:	887a      	ldrh	r2, [r7, #2]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005568:	e003      	b.n	8005572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	041a      	lsls	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	619a      	str	r2, [r3, #24]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005590:	887a      	ldrh	r2, [r7, #2]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4013      	ands	r3, r2
 8005596:	041a      	lsls	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	43d9      	mvns	r1, r3
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	400b      	ands	r3, r1
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e08b      	b.n	80056de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8b5 	bl	800574a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	@ 0x24
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005604:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005614:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d107      	bne.n	800562e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	e006      	b.n	800563c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800563a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d108      	bne.n	8005656 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	e007      	b.n	8005666 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005664:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <HAL_I2C_Init+0x134>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	02008000 	.word	0x02008000

080056ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e021      	b.n	8005742 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	@ 0x24
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f821 	bl	800575e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4603      	mov	r3, r0
 8005784:	817b      	strh	r3, [r7, #10]
 8005786:	460b      	mov	r3, r1
 8005788:	813b      	strh	r3, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 80f9 	bne.w	800598e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_I2C_Mem_Write+0x34>
 80057a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0ed      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_I2C_Mem_Write+0x4e>
 80057be:	2302      	movs	r3, #2
 80057c0:	e0e6      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057ca:	f7fe fa3b 	bl	8003c44 <HAL_GetTick>
 80057ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2319      	movs	r3, #25
 80057d6:	2201      	movs	r2, #1
 80057d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fad1 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0d1      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2221      	movs	r2, #33	@ 0x21
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2240      	movs	r2, #64	@ 0x40
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800580c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005814:	88f8      	ldrh	r0, [r7, #6]
 8005816:	893a      	ldrh	r2, [r7, #8]
 8005818:	8979      	ldrh	r1, [r7, #10]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	4603      	mov	r3, r0
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f9e1 	bl	8005bec <I2C_RequestMemoryWrite>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0a9      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2bff      	cmp	r3, #255	@ 0xff
 8005844:	d90e      	bls.n	8005864 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	22ff      	movs	r2, #255	@ 0xff
 800584a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005850:	b2da      	uxtb	r2, r3
 8005852:	8979      	ldrh	r1, [r7, #10]
 8005854:	2300      	movs	r3, #0
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fc55 	bl	800610c <I2C_TransferConfig>
 8005862:	e00f      	b.n	8005884 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005872:	b2da      	uxtb	r2, r3
 8005874:	8979      	ldrh	r1, [r7, #10]
 8005876:	2300      	movs	r3, #0
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fc44 	bl	800610c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fad4 	bl	8005e36 <I2C_WaitOnTXISFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e07b      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	781a      	ldrb	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d034      	beq.n	800593c <HAL_I2C_Mem_Write+0x1c8>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d130      	bne.n	800593c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fa4d 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e04d      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2bff      	cmp	r3, #255	@ 0xff
 80058fc:	d90e      	bls.n	800591c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22ff      	movs	r2, #255	@ 0xff
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	b2da      	uxtb	r2, r3
 800590a:	8979      	ldrh	r1, [r7, #10]
 800590c:	2300      	movs	r3, #0
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fbf9 	bl	800610c <I2C_TransferConfig>
 800591a:	e00f      	b.n	800593c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592a:	b2da      	uxtb	r2, r3
 800592c:	8979      	ldrh	r1, [r7, #10]
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fbe8 	bl	800610c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d19e      	bne.n	8005884 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 faba 	bl	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e01a      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2220      	movs	r2, #32
 8005960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <HAL_I2C_Mem_Write+0x224>)
 800596e:	400b      	ands	r3, r1
 8005970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	fe00e800 	.word	0xfe00e800

0800599c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	460b      	mov	r3, r1
 80059b0:	813b      	strh	r3, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b20      	cmp	r3, #32
 80059c0:	f040 80fd 	bne.w	8005bbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_I2C_Mem_Read+0x34>
 80059ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0f1      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_I2C_Mem_Read+0x4e>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e0ea      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059f2:	f7fe f927 	bl	8003c44 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2319      	movs	r3, #25
 80059fe:	2201      	movs	r2, #1
 8005a00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f9bd 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0d5      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2222      	movs	r2, #34	@ 0x22
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2240      	movs	r2, #64	@ 0x40
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a3c:	88f8      	ldrh	r0, [r7, #6]
 8005a3e:	893a      	ldrh	r2, [r7, #8]
 8005a40:	8979      	ldrh	r1, [r7, #10]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f921 	bl	8005c94 <I2C_RequestMemoryRead>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0ad      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2bff      	cmp	r3, #255	@ 0xff
 8005a6c:	d90e      	bls.n	8005a8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	8979      	ldrh	r1, [r7, #10]
 8005a7c:	4b52      	ldr	r3, [pc, #328]	@ (8005bc8 <HAL_I2C_Mem_Read+0x22c>)
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fb41 	bl	800610c <I2C_TransferConfig>
 8005a8a:	e00f      	b.n	8005aac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	8979      	ldrh	r1, [r7, #10]
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc8 <HAL_I2C_Mem_Read+0x22c>)
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fb30 	bl	800610c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f964 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e07c      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d034      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x1d0>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d130      	bne.n	8005b6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	@ 0x80
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f935 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e04d      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2bff      	cmp	r3, #255	@ 0xff
 8005b2c:	d90e      	bls.n	8005b4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	8979      	ldrh	r1, [r7, #10]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fae1 	bl	800610c <I2C_TransferConfig>
 8005b4a:	e00f      	b.n	8005b6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	8979      	ldrh	r1, [r7, #10]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fad0 	bl	800610c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19a      	bne.n	8005aac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f9a2 	bl	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e01a      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <HAL_I2C_Mem_Read+0x230>)
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	80002400 	.word	0x80002400
 8005bcc:	fe00e800 	.word	0xfe00e800

08005bd0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bde:	b2db      	uxtb	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	817b      	strh	r3, [r7, #10]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	813b      	strh	r3, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	4b20      	ldr	r3, [pc, #128]	@ (8005c90 <I2C_RequestMemoryWrite+0xa4>)
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fa79 	bl	800610c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f909 	bl	8005e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e02c      	b.n	8005c88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c34:	893b      	ldrh	r3, [r7, #8]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c3e:	e015      	b.n	8005c6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f8ef 	bl	8005e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e012      	b.n	8005c88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2200      	movs	r2, #0
 8005c74:	2180      	movs	r1, #128	@ 0x80
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f884 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	80002000 	.word	0x80002000

08005c94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	4b20      	ldr	r3, [pc, #128]	@ (8005d38 <I2C_RequestMemoryRead+0xa4>)
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa26 	bl	800610c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f8b6 	bl	8005e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e02c      	b.n	8005d2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ce4:	e015      	b.n	8005d12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f89c 	bl	8005e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e012      	b.n	8005d2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d08:	893b      	ldrh	r3, [r7, #8]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2140      	movs	r1, #64	@ 0x40
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f831 	bl	8005d84 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	80002000 	.word	0x80002000

08005d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d103      	bne.n	8005d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d007      	beq.n	8005d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	619a      	str	r2, [r3, #24]
  }
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d94:	e03b      	b.n	8005e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f8d6 	bl	8005f4c <I2C_IsErrorOccurred>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e041      	b.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d02d      	beq.n	8005e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fd ff47 	bl	8003c44 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d122      	bne.n	8005e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d113      	bne.n	8005e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e00f      	b.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d0b4      	beq.n	8005d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e42:	e033      	b.n	8005eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f87f 	bl	8005f4c <I2C_IsErrorOccurred>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e031      	b.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d025      	beq.n	8005eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	f7fd fef0 	bl	8003c44 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11a      	bne.n	8005eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d013      	beq.n	8005eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e007      	b.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d1c4      	bne.n	8005e44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ed0:	e02f      	b.n	8005f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f838 	bl	8005f4c <I2C_IsErrorOccurred>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e02d      	b.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fd fead 	bl	8003c44 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11a      	bne.n	8005f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d013      	beq.n	8005f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e007      	b.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d1c8      	bne.n	8005ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d068      	beq.n	800604a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f80:	e049      	b.n	8006016 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d045      	beq.n	8006016 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fd fe5b 	bl	8003c44 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_IsErrorOccurred+0x54>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d13a      	bne.n	8006016 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc2:	d121      	bne.n	8006008 <I2C_IsErrorOccurred+0xbc>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fca:	d01d      	beq.n	8006008 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d01a      	beq.n	8006008 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fe2:	f7fd fe2f 	bl	8003c44 <HAL_GetTick>
 8005fe6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fe8:	e00e      	b.n	8006008 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fea:	f7fd fe2b 	bl	8003c44 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b19      	cmp	r3, #25
 8005ff6:	d907      	bls.n	8006008 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006006:	e006      	b.n	8006016 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b20      	cmp	r3, #32
 8006014:	d1e9      	bne.n	8005fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b20      	cmp	r3, #32
 8006022:	d003      	beq.n	800602c <I2C_IsErrorOccurred+0xe0>
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0aa      	beq.n	8005f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2220      	movs	r2, #32
 800603a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	f043 0304 	orr.w	r3, r3, #4
 8006042:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800606c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800608e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01c      	beq.n	80060fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fe3b 	bl	8005d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <I2C_IsErrorOccurred+0x1bc>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	@ 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	fe00e800 	.word	0xfe00e800

0800610c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	817b      	strh	r3, [r7, #10]
 800611a:	4613      	mov	r3, r2
 800611c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800611e:	897b      	ldrh	r3, [r7, #10]
 8006120:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006124:	7a7b      	ldrb	r3, [r7, #9]
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800612c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4313      	orrs	r3, r2
 8006136:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800613a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	0d5b      	lsrs	r3, r3, #21
 8006146:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800614a:	4b08      	ldr	r3, [pc, #32]	@ (800616c <I2C_TransferConfig+0x60>)
 800614c:	430b      	orrs	r3, r1
 800614e:	43db      	mvns	r3, r3
 8006150:	ea02 0103 	and.w	r1, r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	03ff63ff 	.word	0x03ff63ff

08006170 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	4b23      	ldr	r3, [pc, #140]	@ (8006208 <HAL_PWREx_EnableOverDrive+0x98>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	4a22      	ldr	r2, [pc, #136]	@ (8006208 <HAL_PWREx_EnableOverDrive+0x98>)
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006184:	6413      	str	r3, [r2, #64]	@ 0x40
 8006186:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <HAL_PWREx_EnableOverDrive+0x98>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006192:	4b1e      	ldr	r3, [pc, #120]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800619c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800619e:	f7fd fd51 	bl	8003c44 <HAL_GetTick>
 80061a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061a4:	e009      	b.n	80061ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061a6:	f7fd fd4d 	bl	8003c44 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061b4:	d901      	bls.n	80061ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e022      	b.n	8006200 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c6:	d1ee      	bne.n	80061a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061c8:	4b10      	ldr	r3, [pc, #64]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0f      	ldr	r2, [pc, #60]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061d4:	f7fd fd36 	bl	8003c44 <HAL_GetTick>
 80061d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061da:	e009      	b.n	80061f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061dc:	f7fd fd32 	bl	8003c44 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061ea:	d901      	bls.n	80061f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e007      	b.n	8006200 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fc:	d1ee      	bne.n	80061dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	40007000 	.word	0x40007000

08006210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e29b      	b.n	800675e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8087 	beq.w	8006342 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006234:	4b96      	ldr	r3, [pc, #600]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b04      	cmp	r3, #4
 800623e:	d00c      	beq.n	800625a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006240:	4b93      	ldr	r3, [pc, #588]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b08      	cmp	r3, #8
 800624a:	d112      	bne.n	8006272 <HAL_RCC_OscConfig+0x62>
 800624c:	4b90      	ldr	r3, [pc, #576]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006258:	d10b      	bne.n	8006272 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800625a:	4b8d      	ldr	r3, [pc, #564]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d06c      	beq.n	8006340 <HAL_RCC_OscConfig+0x130>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d168      	bne.n	8006340 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e275      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x7a>
 800627c:	4b84      	ldr	r3, [pc, #528]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a83      	ldr	r2, [pc, #524]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e02e      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x9c>
 8006292:	4b7f      	ldr	r3, [pc, #508]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7e      	ldr	r2, [pc, #504]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b7c      	ldr	r3, [pc, #496]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a7b      	ldr	r2, [pc, #492]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e01d      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCC_OscConfig+0xc0>
 80062b6:	4b76      	ldr	r3, [pc, #472]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a75      	ldr	r2, [pc, #468]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4b73      	ldr	r3, [pc, #460]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a72      	ldr	r2, [pc, #456]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 80062d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a6e      	ldr	r2, [pc, #440]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	4b6c      	ldr	r3, [pc, #432]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80062e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d013      	beq.n	8006318 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fd fca8 	bl	8003c44 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f8:	f7fd fca4 	bl	8003c44 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	@ 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e229      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630a:	4b61      	ldr	r3, [pc, #388]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0xe8>
 8006316:	e014      	b.n	8006342 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fd fc94 	bl	8003c44 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006320:	f7fd fc90 	bl	8003c44 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b64      	cmp	r3, #100	@ 0x64
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e215      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006332:	4b57      	ldr	r3, [pc, #348]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x110>
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d069      	beq.n	8006422 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800634e:	4b50      	ldr	r3, [pc, #320]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635a:	4b4d      	ldr	r3, [pc, #308]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b08      	cmp	r3, #8
 8006364:	d11c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x190>
 8006366:	4b4a      	ldr	r3, [pc, #296]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d116      	bne.n	80063a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	4b47      	ldr	r3, [pc, #284]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_RCC_OscConfig+0x17a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d001      	beq.n	800638a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e1e9      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638a:	4b41      	ldr	r3, [pc, #260]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	493d      	ldr	r1, [pc, #244]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800639e:	e040      	b.n	8006422 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d023      	beq.n	80063f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a8:	4b39      	ldr	r3, [pc, #228]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a38      	ldr	r2, [pc, #224]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fd fc46 	bl	8003c44 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063bc:	f7fd fc42 	bl	8003c44 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e1c7      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ce:	4b30      	ldr	r3, [pc, #192]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063da:	4b2d      	ldr	r3, [pc, #180]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4929      	ldr	r1, [pc, #164]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]
 80063ee:	e018      	b.n	8006422 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a26      	ldr	r2, [pc, #152]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fd fc22 	bl	8003c44 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006404:	f7fd fc1e 	bl	8003c44 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e1a3      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006416:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d038      	beq.n	80064a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d019      	beq.n	800646a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006436:	4b16      	ldr	r3, [pc, #88]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643a:	4a15      	ldr	r2, [pc, #84]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fd fbff 	bl	8003c44 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800644a:	f7fd fbfb 	bl	8003c44 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e180      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800645e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x23a>
 8006468:	e01a      	b.n	80064a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800646a:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 800646c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646e:	4a08      	ldr	r2, [pc, #32]	@ (8006490 <HAL_RCC_OscConfig+0x280>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006476:	f7fd fbe5 	bl	8003c44 <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800647c:	e00a      	b.n	8006494 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647e:	f7fd fbe1 	bl	8003c44 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d903      	bls.n	8006494 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e166      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
 8006490:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	4b92      	ldr	r3, [pc, #584]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ee      	bne.n	800647e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80a4 	beq.w	80065f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ae:	4b8c      	ldr	r3, [pc, #560]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4b89      	ldr	r3, [pc, #548]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	4a88      	ldr	r2, [pc, #544]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064c6:	4b86      	ldr	r3, [pc, #536]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d6:	4b83      	ldr	r3, [pc, #524]	@ (80066e4 <HAL_RCC_OscConfig+0x4d4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d118      	bne.n	8006514 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80064e2:	4b80      	ldr	r3, [pc, #512]	@ (80066e4 <HAL_RCC_OscConfig+0x4d4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7f      	ldr	r2, [pc, #508]	@ (80066e4 <HAL_RCC_OscConfig+0x4d4>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ee:	f7fd fba9 	bl	8003c44 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f6:	f7fd fba5 	bl	8003c44 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b64      	cmp	r3, #100	@ 0x64
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e12a      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006508:	4b76      	ldr	r3, [pc, #472]	@ (80066e4 <HAL_RCC_OscConfig+0x4d4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f0      	beq.n	80064f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <HAL_RCC_OscConfig+0x31a>
 800651c:	4b70      	ldr	r3, [pc, #448]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006520:	4a6f      	ldr	r2, [pc, #444]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6713      	str	r3, [r2, #112]	@ 0x70
 8006528:	e02d      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_RCC_OscConfig+0x33c>
 8006532:	4b6b      	ldr	r3, [pc, #428]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	4a6a      	ldr	r2, [pc, #424]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6713      	str	r3, [r2, #112]	@ 0x70
 800653e:	4b68      	ldr	r3, [pc, #416]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006542:	4a67      	ldr	r2, [pc, #412]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	6713      	str	r3, [r2, #112]	@ 0x70
 800654a:	e01c      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b05      	cmp	r3, #5
 8006552:	d10c      	bne.n	800656e <HAL_RCC_OscConfig+0x35e>
 8006554:	4b62      	ldr	r3, [pc, #392]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006558:	4a61      	ldr	r2, [pc, #388]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006560:	4b5f      	ldr	r3, [pc, #380]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006564:	4a5e      	ldr	r2, [pc, #376]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	@ 0x70
 800656c:	e00b      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800656e:	4b5c      	ldr	r3, [pc, #368]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006572:	4a5b      	ldr	r2, [pc, #364]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	@ 0x70
 800657a:	4b59      	ldr	r3, [pc, #356]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657e:	4a58      	ldr	r2, [pc, #352]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d015      	beq.n	80065ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fd fb59 	bl	8003c44 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fd fb55 	bl	8003c44 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0d8      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ac:	4b4c      	ldr	r3, [pc, #304]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0ee      	beq.n	8006596 <HAL_RCC_OscConfig+0x386>
 80065b8:	e014      	b.n	80065e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ba:	f7fd fb43 	bl	8003c44 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fd fb3f 	bl	8003c44 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e0c2      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d8:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ee      	bne.n	80065c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ea:	4b3d      	ldr	r3, [pc, #244]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	4a3c      	ldr	r2, [pc, #240]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80065f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80ae 	beq.w	800675c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006600:	4b37      	ldr	r3, [pc, #220]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 030c 	and.w	r3, r3, #12
 8006608:	2b08      	cmp	r3, #8
 800660a:	d06d      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d14b      	bne.n	80066ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006614:	4b32      	ldr	r3, [pc, #200]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a31      	ldr	r2, [pc, #196]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800661a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800661e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fd fb10 	bl	8003c44 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fd fb0c 	bl	8003c44 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e091      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	019b      	lsls	r3, r3, #6
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	3b01      	subs	r3, #1
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	491b      	ldr	r1, [pc, #108]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 8006674:	4313      	orrs	r3, r2
 8006676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006678:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 800667e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fd fade 	bl	8003c44 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668c:	f7fd fada 	bl	8003c44 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e05f      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800669e:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f0      	beq.n	800668c <HAL_RCC_OscConfig+0x47c>
 80066aa:	e057      	b.n	800675c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0b      	ldr	r2, [pc, #44]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80066b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fd fac4 	bl	8003c44 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c0:	f7fd fac0 	bl	8003c44 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e045      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d2:	4b03      	ldr	r3, [pc, #12]	@ (80066e0 <HAL_RCC_OscConfig+0x4d0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4b0>
 80066de:	e03d      	b.n	800675c <HAL_RCC_OscConfig+0x54c>
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80066e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <HAL_RCC_OscConfig+0x558>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d030      	beq.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d129      	bne.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d122      	bne.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006718:	4013      	ands	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800671e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006720:	4293      	cmp	r3, r2
 8006722:	d119      	bne.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	3b01      	subs	r3, #1
 8006732:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d10f      	bne.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d107      	bne.n	8006758 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800

0800676c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0d0      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006784:	4b6a      	ldr	r3, [pc, #424]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d910      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b67      	ldr	r3, [pc, #412]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 020f 	bic.w	r2, r3, #15
 800679a:	4965      	ldr	r1, [pc, #404]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b63      	ldr	r3, [pc, #396]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0b8      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d020      	beq.n	8006802 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067cc:	4b59      	ldr	r3, [pc, #356]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4a58      	ldr	r2, [pc, #352]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e4:	4b53      	ldr	r3, [pc, #332]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	4a52      	ldr	r2, [pc, #328]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b50      	ldr	r3, [pc, #320]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	494d      	ldr	r1, [pc, #308]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d040      	beq.n	8006890 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006816:	4b47      	ldr	r3, [pc, #284]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d115      	bne.n	800684e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e07f      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d107      	bne.n	800683e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682e:	4b41      	ldr	r3, [pc, #260]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e073      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683e:	4b3d      	ldr	r3, [pc, #244]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e06b      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684e:	4b39      	ldr	r3, [pc, #228]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f023 0203 	bic.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4936      	ldr	r1, [pc, #216]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006860:	f7fd f9f0 	bl	8003c44 <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	e00a      	b.n	800687e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006868:	f7fd f9ec 	bl	8003c44 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e053      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	4b2d      	ldr	r3, [pc, #180]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 020c 	and.w	r2, r3, #12
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	429a      	cmp	r2, r3
 800688e:	d1eb      	bne.n	8006868 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006890:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d210      	bcs.n	80068c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b24      	ldr	r3, [pc, #144]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 020f 	bic.w	r2, r3, #15
 80068a6:	4922      	ldr	r1, [pc, #136]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b20      	ldr	r3, [pc, #128]	@ (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d001      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e032      	b.n	8006926 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068cc:	4b19      	ldr	r3, [pc, #100]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	4916      	ldr	r1, [pc, #88]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068ea:	4b12      	ldr	r3, [pc, #72]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	490e      	ldr	r1, [pc, #56]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068fe:	f000 f821 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 8006902:	4602      	mov	r2, r0
 8006904:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	490a      	ldr	r1, [pc, #40]	@ (8006938 <HAL_RCC_ClockConfig+0x1cc>)
 8006910:	5ccb      	ldrb	r3, [r1, r3]
 8006912:	fa22 f303 	lsr.w	r3, r2, r3
 8006916:	4a09      	ldr	r2, [pc, #36]	@ (800693c <HAL_RCC_ClockConfig+0x1d0>)
 8006918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800691a:	4b09      	ldr	r3, [pc, #36]	@ (8006940 <HAL_RCC_ClockConfig+0x1d4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fd f94c 	bl	8003bbc <HAL_InitTick>

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40023c00 	.word	0x40023c00
 8006934:	40023800 	.word	0x40023800
 8006938:	08011524 	.word	0x08011524
 800693c:	20000008 	.word	0x20000008
 8006940:	2000003c 	.word	0x2000003c

08006944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006948:	b090      	sub	sp, #64	@ 0x40
 800694a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006950:	2300      	movs	r3, #0
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006954:	2300      	movs	r3, #0
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800695c:	4b59      	ldr	r3, [pc, #356]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b08      	cmp	r3, #8
 8006966:	d00d      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0x40>
 8006968:	2b08      	cmp	r3, #8
 800696a:	f200 80a1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x16c>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_RCC_GetSysClockFreq+0x34>
 8006972:	2b04      	cmp	r3, #4
 8006974:	d003      	beq.n	800697e <HAL_RCC_GetSysClockFreq+0x3a>
 8006976:	e09b      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006978:	4b53      	ldr	r3, [pc, #332]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 800697a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800697c:	e09b      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800697e:	4b53      	ldr	r3, [pc, #332]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x188>)
 8006980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006982:	e098      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006984:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800698e:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d028      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	2200      	movs	r2, #0
 80069a2:	623b      	str	r3, [r7, #32]
 80069a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80069ac:	2100      	movs	r1, #0
 80069ae:	4b47      	ldr	r3, [pc, #284]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x188>)
 80069b0:	fb03 f201 	mul.w	r2, r3, r1
 80069b4:	2300      	movs	r3, #0
 80069b6:	fb00 f303 	mul.w	r3, r0, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	4a43      	ldr	r2, [pc, #268]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x188>)
 80069be:	fba0 1202 	umull	r1, r2, r0, r2
 80069c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c4:	460a      	mov	r2, r1
 80069c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80069c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ca:	4413      	add	r3, r2
 80069cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d0:	2200      	movs	r2, #0
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	61fa      	str	r2, [r7, #28]
 80069d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80069de:	f7f9 fc7f 	bl	80002e0 <__aeabi_uldivmod>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4613      	mov	r3, r2
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ea:	e053      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ec:	4b35      	ldr	r3, [pc, #212]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	099b      	lsrs	r3, r3, #6
 80069f2:	2200      	movs	r2, #0
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	617a      	str	r2, [r7, #20]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069fe:	f04f 0b00 	mov.w	fp, #0
 8006a02:	4652      	mov	r2, sl
 8006a04:	465b      	mov	r3, fp
 8006a06:	f04f 0000 	mov.w	r0, #0
 8006a0a:	f04f 0100 	mov.w	r1, #0
 8006a0e:	0159      	lsls	r1, r3, #5
 8006a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a14:	0150      	lsls	r0, r2, #5
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a1e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a36:	ebb2 0408 	subs.w	r4, r2, r8
 8006a3a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	00eb      	lsls	r3, r5, #3
 8006a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a4c:	00e2      	lsls	r2, r4, #3
 8006a4e:	4614      	mov	r4, r2
 8006a50:	461d      	mov	r5, r3
 8006a52:	eb14 030a 	adds.w	r3, r4, sl
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	eb45 030b 	adc.w	r3, r5, fp
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	028b      	lsls	r3, r1, #10
 8006a6e:	4621      	mov	r1, r4
 8006a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a74:	4621      	mov	r1, r4
 8006a76:	028a      	lsls	r2, r1, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	2200      	movs	r2, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	60fa      	str	r2, [r7, #12]
 8006a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a88:	f7f9 fc2a 	bl	80002e0 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4613      	mov	r3, r2
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3740      	adds	r7, #64	@ 0x40
 8006abc:	46bd      	mov	sp, r7
 8006abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	00f42400 	.word	0x00f42400
 8006acc:	017d7840 	.word	0x017d7840

08006ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad4:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000008 	.word	0x20000008

08006ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aec:	f7ff fff0 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	0a9b      	lsrs	r3, r3, #10
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	4903      	ldr	r1, [pc, #12]	@ (8006b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afe:	5ccb      	ldrb	r3, [r1, r3]
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	08011534 	.word	0x08011534

08006b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b14:	f7ff ffdc 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	0b5b      	lsrs	r3, r3, #13
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4903      	ldr	r1, [pc, #12]	@ (8006b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	08011534 	.word	0x08011534

08006b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d012      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b60:	4b69      	ldr	r3, [pc, #420]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4a68      	ldr	r2, [pc, #416]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b6a:	6093      	str	r3, [r2, #8]
 8006b6c:	4b66      	ldr	r3, [pc, #408]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	4964      	ldr	r1, [pc, #400]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b82:	2301      	movs	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d017      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b92:	4b5d      	ldr	r3, [pc, #372]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba0:	4959      	ldr	r1, [pc, #356]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d017      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bce:	4b4e      	ldr	r3, [pc, #312]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	494a      	ldr	r1, [pc, #296]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 808b 	beq.w	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c20:	4a39      	ldr	r2, [pc, #228]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c28:	4b37      	ldr	r3, [pc, #220]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a34      	ldr	r2, [pc, #208]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c40:	f7fd f800 	bl	8003c44 <HAL_GetTick>
 8006c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c48:	f7fc fffc 	bl	8003c44 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	@ 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e38f      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c66:	4b28      	ldr	r3, [pc, #160]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d035      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d02e      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c84:	4b20      	ldr	r3, [pc, #128]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c92:	4a1d      	ldr	r2, [pc, #116]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c98:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cac:	4b16      	ldr	r3, [pc, #88]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d114      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fc ffc4 	bl	8003c44 <HAL_GetTick>
 8006cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc0:	f7fc ffc0 	bl	8003c44 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e351      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ee      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cee:	d111      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	4901      	ldr	r1, [pc, #4]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
 8006d06:	e00b      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	0ffffcff 	.word	0x0ffffcff
 8006d14:	4bac      	ldr	r3, [pc, #688]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4aab      	ldr	r2, [pc, #684]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d1e:	6093      	str	r3, [r2, #8]
 8006d20:	4ba9      	ldr	r3, [pc, #676]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2c:	49a6      	ldr	r1, [pc, #664]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d010      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d3e:	4ba2      	ldr	r3, [pc, #648]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d44:	4aa0      	ldr	r2, [pc, #640]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	499b      	ldr	r1, [pc, #620]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d6c:	4b96      	ldr	r3, [pc, #600]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7a:	4993      	ldr	r1, [pc, #588]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d8e:	4b8e      	ldr	r3, [pc, #568]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d9c:	498a      	ldr	r1, [pc, #552]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006db0:	4b85      	ldr	r3, [pc, #532]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dbe:	4982      	ldr	r1, [pc, #520]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de0:	4979      	ldr	r1, [pc, #484]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df4:	4b74      	ldr	r3, [pc, #464]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfa:	f023 0203 	bic.w	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	4971      	ldr	r1, [pc, #452]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e16:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	f023 020c 	bic.w	r2, r3, #12
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e24:	4968      	ldr	r1, [pc, #416]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e38:	4b63      	ldr	r3, [pc, #396]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e46:	4960      	ldr	r1, [pc, #384]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e60:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e68:	4957      	ldr	r1, [pc, #348]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e7c:	4b52      	ldr	r3, [pc, #328]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8a:	494f      	ldr	r1, [pc, #316]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eac:	4946      	ldr	r1, [pc, #280]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ec0:	4b41      	ldr	r3, [pc, #260]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ece:	493e      	ldr	r1, [pc, #248]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ee2:	4b39      	ldr	r3, [pc, #228]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef0:	4935      	ldr	r1, [pc, #212]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f04:	4b30      	ldr	r3, [pc, #192]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f12:	492d      	ldr	r1, [pc, #180]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d011      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f26:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f34:	4924      	ldr	r1, [pc, #144]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f44:	d101      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f46:	2301      	movs	r3, #1
 8006f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f66:	4b18      	ldr	r3, [pc, #96]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f74:	4914      	ldr	r1, [pc, #80]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f88:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f98:	490b      	ldr	r1, [pc, #44]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00f      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006fac:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fbc:	4902      	ldr	r1, [pc, #8]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fc4:	e002      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe8:	4986      	ldr	r1, [pc, #536]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ffc:	4b81      	ldr	r3, [pc, #516]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007002:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800700c:	497d      	ldr	r1, [pc, #500]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d006      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 80d6 	beq.w	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007028:	4b76      	ldr	r3, [pc, #472]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a75      	ldr	r2, [pc, #468]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800702e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fc fe06 	bl	8003c44 <HAL_GetTick>
 8007038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800703c:	f7fc fe02 	bl	8003c44 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	@ 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e195      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800704e:	4b6d      	ldr	r3, [pc, #436]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d021      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	2b00      	cmp	r3, #0
 800706c:	d11d      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800706e:	4b65      	ldr	r3, [pc, #404]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800707c:	4b61      	ldr	r3, [pc, #388]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800707e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	019a      	lsls	r2, r3, #6
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	041b      	lsls	r3, r3, #16
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	071b      	lsls	r3, r3, #28
 80070a2:	4958      	ldr	r1, [pc, #352]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070be:	d00a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d02e      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070d4:	d129      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070e4:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ea:	0f1b      	lsrs	r3, r3, #28
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	019a      	lsls	r2, r3, #6
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	431a      	orrs	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	071b      	lsls	r3, r3, #28
 800710a:	493e      	ldr	r1, [pc, #248]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007112:	4b3c      	ldr	r3, [pc, #240]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007118:	f023 021f 	bic.w	r2, r3, #31
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	3b01      	subs	r3, #1
 8007122:	4938      	ldr	r1, [pc, #224]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01d      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007136:	4b33      	ldr	r3, [pc, #204]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007144:	4b2f      	ldr	r3, [pc, #188]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714a:	0f1b      	lsrs	r3, r3, #28
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	019a      	lsls	r2, r3, #6
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	431a      	orrs	r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	431a      	orrs	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	071b      	lsls	r3, r3, #28
 800716a:	4926      	ldr	r1, [pc, #152]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	019a      	lsls	r2, r3, #6
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	061b      	lsls	r3, r3, #24
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	071b      	lsls	r3, r3, #28
 800719a:	491a      	ldr	r1, [pc, #104]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071a2:	4b18      	ldr	r3, [pc, #96]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a17      	ldr	r2, [pc, #92]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ae:	f7fc fd49 	bl	8003c44 <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071b6:	f7fc fd45 	bl	8003c44 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b64      	cmp	r3, #100	@ 0x64
 80071c2:	d901      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0d8      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	f040 80ce 	bne.w	8007378 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071dc:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a08      	ldr	r2, [pc, #32]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e8:	f7fc fd2c 	bl	8003c44 <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071ee:	e00b      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071f0:	f7fc fd28 	bl	8003c44 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	@ 0x64
 80071fc:	d904      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e0bb      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007208:	4b5e      	ldr	r3, [pc, #376]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007214:	d0ec      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02e      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d12a      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800723e:	4b51      	ldr	r3, [pc, #324]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007244:	0c1b      	lsrs	r3, r3, #16
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800724c:	4b4d      	ldr	r3, [pc, #308]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	019a      	lsls	r2, r3, #6
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	061b      	lsls	r3, r3, #24
 800726c:	431a      	orrs	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	071b      	lsls	r3, r3, #28
 8007272:	4944      	ldr	r1, [pc, #272]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800727a:	4b42      	ldr	r3, [pc, #264]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800727c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007280:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	3b01      	subs	r3, #1
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	493d      	ldr	r1, [pc, #244]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d022      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a8:	d11d      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072aa:	4b36      	ldr	r3, [pc, #216]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b0:	0e1b      	lsrs	r3, r3, #24
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072b8:	4b32      	ldr	r3, [pc, #200]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	019a      	lsls	r2, r3, #6
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	431a      	orrs	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	071b      	lsls	r3, r3, #28
 80072de:	4929      	ldr	r1, [pc, #164]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d028      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072f2:	4b24      	ldr	r3, [pc, #144]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f8:	0e1b      	lsrs	r3, r3, #24
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007300:	4b20      	ldr	r3, [pc, #128]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007306:	0c1b      	lsrs	r3, r3, #16
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	019a      	lsls	r2, r3, #6
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	431a      	orrs	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	071b      	lsls	r3, r3, #28
 8007326:	4917      	ldr	r1, [pc, #92]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800732e:	4b15      	ldr	r3, [pc, #84]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	4911      	ldr	r1, [pc, #68]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007344:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a0e      	ldr	r2, [pc, #56]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800734a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007350:	f7fc fc78 	bl	8003c44 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007356:	e008      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007358:	f7fc fc74 	bl	8003c44 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b64      	cmp	r3, #100	@ 0x64
 8007364:	d901      	bls.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e007      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800736a:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007376:	d1ef      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	40023800 	.word	0x40023800

08007388 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a8c      	ldr	r2, [pc, #560]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 8007398:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800739a:	4b8c      	ldr	r3, [pc, #560]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a0:	099b      	lsrs	r3, r3, #6
 80073a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073aa:	4b88      	ldr	r3, [pc, #544]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	f003 0203 	and.w	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073ba:	4b84      	ldr	r3, [pc, #528]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ca:	4b80      	ldr	r3, [pc, #512]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d0:	0f1b      	lsrs	r3, r3, #28
 80073d2:	f003 0207 	and.w	r2, r3, #7
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80073da:	4b7c      	ldr	r3, [pc, #496]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e0:	099b      	lsrs	r3, r3, #6
 80073e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073ea:	4b78      	ldr	r3, [pc, #480]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	f003 0203 	and.w	r2, r3, #3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073fa:	4b74      	ldr	r3, [pc, #464]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	0e1b      	lsrs	r3, r3, #24
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800740a:	4b70      	ldr	r3, [pc, #448]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007410:	0f1b      	lsrs	r3, r3, #28
 8007412:	f003 0207 	and.w	r2, r3, #7
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800741a:	4b6c      	ldr	r3, [pc, #432]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007420:	f003 021f 	and.w	r2, r3, #31
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007428:	4b68      	ldr	r3, [pc, #416]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800742a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	f003 021f 	and.w	r2, r3, #31
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007438:	4b64      	ldr	r3, [pc, #400]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800743a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	f003 0203 	and.w	r2, r3, #3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007448:	4b60      	ldr	r3, [pc, #384]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800744a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800744e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007456:	4b5d      	ldr	r3, [pc, #372]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800745c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007464:	4b59      	ldr	r3, [pc, #356]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007470:	4b56      	ldr	r3, [pc, #344]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800747e:	4b53      	ldr	r3, [pc, #332]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007484:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800748c:	4b4f      	ldr	r3, [pc, #316]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007492:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800749a:	4b4c      	ldr	r3, [pc, #304]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80074a8:	4b48      	ldr	r3, [pc, #288]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ae:	f003 0203 	and.w	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80074b6:	4b45      	ldr	r3, [pc, #276]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f003 020c 	and.w	r2, r3, #12
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80074c4:	4b41      	ldr	r3, [pc, #260]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ca:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80074d2:	4b3e      	ldr	r3, [pc, #248]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80074e0:	4b3a      	ldr	r3, [pc, #232]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80074ee:	4b37      	ldr	r3, [pc, #220]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f4:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80074fc:	4b33      	ldr	r3, [pc, #204]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800750a:	4b30      	ldr	r3, [pc, #192]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007510:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007518:	4b2c      	ldr	r3, [pc, #176]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007526:	4b29      	ldr	r3, [pc, #164]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007534:	4b25      	ldr	r3, [pc, #148]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007542:	4b22      	ldr	r3, [pc, #136]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007552:	4b1e      	ldr	r3, [pc, #120]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007558:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007562:	4b1a      	ldr	r3, [pc, #104]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007568:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007572:	4b16      	ldr	r3, [pc, #88]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007578:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007582:	4b12      	ldr	r3, [pc, #72]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800758a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800758c:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800758e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007590:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800759c:	4b0b      	ldr	r3, [pc, #44]	@ (80075cc <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800759e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	1cfffff1 	.word	0x1cfffff1
 80075cc:	40023800 	.word	0x40023800

080075d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075ee:	f040 80a4 	bne.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80075f2:	4ba6      	ldr	r3, [pc, #664]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007600:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007608:	f000 808a 	beq.w	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007612:	f200 8091 	bhi.w	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800761c:	d07d      	beq.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007624:	f200 8088 	bhi.w	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007634:	d039      	beq.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007636:	e07f      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007638:	4b94      	ldr	r3, [pc, #592]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007644:	4b91      	ldr	r3, [pc, #580]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800764c:	4a90      	ldr	r2, [pc, #576]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800764e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	e007      	b.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007656:	4b8d      	ldr	r3, [pc, #564]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800765e:	4a8d      	ldr	r2, [pc, #564]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007666:	4b89      	ldr	r3, [pc, #548]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766c:	0e1b      	lsrs	r3, r3, #24
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007674:	4b85      	ldr	r3, [pc, #532]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	099b      	lsrs	r3, r3, #6
 800767c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	fb03 f202 	mul.w	r2, r3, r2
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800768e:	4b7f      	ldr	r3, [pc, #508]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007694:	0a1b      	lsrs	r3, r3, #8
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	617b      	str	r3, [r7, #20]
        break;
 80076a8:	e047      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076aa:	4b78      	ldr	r3, [pc, #480]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076b6:	4b75      	ldr	r3, [pc, #468]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076be:	4a74      	ldr	r2, [pc, #464]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e007      	b.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076c8:	4b70      	ldr	r3, [pc, #448]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d0:	4a70      	ldr	r2, [pc, #448]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80076d8:	4b6c      	ldr	r3, [pc, #432]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076de:	0e1b      	lsrs	r3, r3, #24
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80076e6:	4b69      	ldr	r3, [pc, #420]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	fb03 f202 	mul.w	r2, r3, r2
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fe:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007700:	4b62      	ldr	r3, [pc, #392]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	617b      	str	r3, [r7, #20]
        break;
 8007718:	e00f      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800771a:	4b5f      	ldr	r3, [pc, #380]	@ (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800771c:	617b      	str	r3, [r7, #20]
        break;
 800771e:	e00c      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007720:	4b5a      	ldr	r3, [pc, #360]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800772c:	4b58      	ldr	r3, [pc, #352]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800772e:	617b      	str	r3, [r7, #20]
        break;
 8007730:	e003      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8007732:	4b58      	ldr	r3, [pc, #352]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007734:	617b      	str	r3, [r7, #20]
        break;
 8007736:	e000      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8007738:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007740:	f040 80ad 	bne.w	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007744:	4b51      	ldr	r3, [pc, #324]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007752:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800775a:	f000 808a 	beq.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007764:	f200 809a 	bhi.w	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800776e:	d07d      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007776:	f200 8091 	bhi.w	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007786:	d039      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007788:	e088      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800778a:	4b40      	ldr	r3, [pc, #256]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d108      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007796:	4b3d      	ldr	r3, [pc, #244]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800779e:	4a3c      	ldr	r2, [pc, #240]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	e007      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80077a8:	4b38      	ldr	r3, [pc, #224]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077b0:	4a38      	ldr	r2, [pc, #224]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80077b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80077b8:	4b34      	ldr	r3, [pc, #208]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077be:	0e1b      	lsrs	r3, r3, #24
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80077c6:	4b31      	ldr	r3, [pc, #196]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	099b      	lsrs	r3, r3, #6
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	fb03 f202 	mul.w	r2, r3, r2
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80077e0:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]
        break;
 80077fa:	e050      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80077fc:	4b23      	ldr	r3, [pc, #140]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007808:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007810:	4a1f      	ldr	r2, [pc, #124]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	e007      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800781a:	4b1c      	ldr	r3, [pc, #112]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007822:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800782a:	4b18      	ldr	r3, [pc, #96]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800782c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007830:	0e1b      	lsrs	r3, r3, #24
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800783e:	099b      	lsrs	r3, r3, #6
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	fb03 f202 	mul.w	r2, r3, r2
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	3301      	adds	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]
        break;
 800786a:	e018      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800786e:	617b      	str	r3, [r7, #20]
        break;
 8007870:	e015      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007872:	4b06      	ldr	r3, [pc, #24]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800787e:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007880:	617b      	str	r3, [r7, #20]
        break;
 8007882:	e00c      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8007884:	4b03      	ldr	r3, [pc, #12]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007886:	617b      	str	r3, [r7, #20]
        break;
 8007888:	e009      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800788a:	bf00      	nop
 800788c:	40023800 	.word	0x40023800
 8007890:	00f42400 	.word	0x00f42400
 8007894:	017d7840 	.word	0x017d7840
 8007898:	00bb8000 	.word	0x00bb8000
        break;
 800789c:	bf00      	nop
      }
    }
  }

  return frequency;
 800789e:	697b      	ldr	r3, [r7, #20]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e156      	b.n	8007b78 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fa9e 	bl	8001e20 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fb8f 	bl	8008010 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d00c      	beq.n	8007914 <HAL_SAI_Init+0x68>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d80d      	bhi.n	800791a <HAL_SAI_Init+0x6e>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SAI_Init+0x5c>
 8007902:	2b01      	cmp	r3, #1
 8007904:	d003      	beq.n	800790e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007906:	e008      	b.n	800791a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
      break;
 800790c:	e006      	b.n	800791c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800790e:	2310      	movs	r3, #16
 8007910:	61fb      	str	r3, [r7, #28]
      break;
 8007912:	e003      	b.n	800791c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007914:	2320      	movs	r3, #32
 8007916:	61fb      	str	r3, [r7, #28]
      break;
 8007918:	e000      	b.n	800791c <HAL_SAI_Init+0x70>
      break;
 800791a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d81e      	bhi.n	8007962 <HAL_SAI_Init+0xb6>
 8007924:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <HAL_SAI_Init+0x80>)
 8007926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792a:	bf00      	nop
 800792c:	0800793d 	.word	0x0800793d
 8007930:	08007943 	.word	0x08007943
 8007934:	0800794b 	.word	0x0800794b
 8007938:	08007953 	.word	0x08007953
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007940:	e010      	b.n	8007964 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007946:	617b      	str	r3, [r7, #20]
    }
    break;
 8007948:	e00c      	b.n	8007964 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800794a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800794e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007950:	e008      	b.n	8007964 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007956:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007960:	e000      	b.n	8007964 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007962:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a85      	ldr	r2, [pc, #532]	@ (8007b80 <HAL_SAI_Init+0x2d4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_SAI_Init+0xcc>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a84      	ldr	r2, [pc, #528]	@ (8007b84 <HAL_SAI_Init+0x2d8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007978:	4a83      	ldr	r2, [pc, #524]	@ (8007b88 <HAL_SAI_Init+0x2dc>)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e002      	b.n	8007986 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007980:	4a82      	ldr	r2, [pc, #520]	@ (8007b8c <HAL_SAI_Init+0x2e0>)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d04c      	beq.n	8007a28 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a7a      	ldr	r2, [pc, #488]	@ (8007b80 <HAL_SAI_Init+0x2d4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_SAI_Init+0xfa>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a78      	ldr	r2, [pc, #480]	@ (8007b84 <HAL_SAI_Init+0x2d8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d104      	bne.n	80079b0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80079a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80079aa:	f7ff fe11 	bl	80075d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80079ae:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a76      	ldr	r2, [pc, #472]	@ (8007b90 <HAL_SAI_Init+0x2e4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_SAI_Init+0x118>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a75      	ldr	r2, [pc, #468]	@ (8007b94 <HAL_SAI_Init+0x2e8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d104      	bne.n	80079ce <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80079c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80079c8:	f7ff fe02 	bl	80075d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80079cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	025b      	lsls	r3, r3, #9
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007b98 <HAL_SAI_Init+0x2ec>)
 80079ea:	fba2 2303 	umull	r2, r3, r2, r3
 80079ee:	08da      	lsrs	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	4b68      	ldr	r3, [pc, #416]	@ (8007b98 <HAL_SAI_Init+0x2ec>)
 80079f8:	fba3 2301 	umull	r2, r3, r3, r1
 80079fc:	08da      	lsrs	r2, r3, #3
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	1aca      	subs	r2, r1, r3
 8007a08:	2a08      	cmp	r2, #8
 8007a0a:	d904      	bls.n	8007a16 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d104      	bne.n	8007a28 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	085a      	lsrs	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_SAI_Init+0x18c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d109      	bne.n	8007a4c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_SAI_Init+0x198>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e001      	b.n	8007a48 <HAL_SAI_Init+0x19c>
 8007a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	e008      	b.n	8007a5e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <HAL_SAI_Init+0x1ae>
 8007a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a58:	e000      	b.n	8007a5c <HAL_SAI_Init+0x1b0>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b4c      	ldr	r3, [pc, #304]	@ (8007b9c <HAL_SAI_Init+0x2f0>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a82:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007a96:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007aa2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b38      	ldr	r3, [pc, #224]	@ (8007ba0 <HAL_SAI_Init+0x2f4>)
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6859      	ldr	r1, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6899      	ldr	r1, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba4 <HAL_SAI_Init+0x2f8>)
 8007aee:	400b      	ands	r3, r1
 8007af0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007b02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007b08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007b0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b14:	3b01      	subs	r3, #1
 8007b16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68d9      	ldr	r1, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007b30:	400b      	ands	r3, r1
 8007b32:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b42:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b50:	3b01      	subs	r3, #1
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3720      	adds	r7, #32
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40015804 	.word	0x40015804
 8007b84:	40015824 	.word	0x40015824
 8007b88:	40015800 	.word	0x40015800
 8007b8c:	40015c00 	.word	0x40015c00
 8007b90:	40015c04 	.word	0x40015c04
 8007b94:	40015c24 	.word	0x40015c24
 8007b98:	cccccccd 	.word	0xcccccccd
 8007b9c:	ff05c010 	.word	0xff05c010
 8007ba0:	ffff1ff0 	.word	0xffff1ff0
 8007ba4:	fff88000 	.word	0xfff88000

08007ba8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e027      	b.n	8007c0a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa1b 	bl	8008010 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0208 	orr.w	r2, r2, #8
 8007be8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fa fa10 	bl	8002010 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_SAI_DMAStop+0x1a>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e061      	b.n	8007cf0 <HAL_SAI_DMAStop+0xde>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9eb 	bl	8008010 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c48:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01c      	beq.n	8007c8c <HAL_SAI_DMAStop+0x7a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b12      	cmp	r3, #18
 8007c5c:	d116      	bne.n	8007c8c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc fe9a 	bl	800499c <HAL_DMA_Abort>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00e      	beq.n	8007c8c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c74:	2b80      	cmp	r3, #128	@ 0x80
 8007c76:	d009      	beq.n	8007c8c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01c      	beq.n	8007cce <HAL_SAI_DMAStop+0xbc>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b22      	cmp	r3, #34	@ 0x22
 8007c9e:	d116      	bne.n	8007cce <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fc fe79 	bl	800499c <HAL_DMA_Abort>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	2b80      	cmp	r3, #128	@ 0x80
 8007cb8:	d009      	beq.n	8007cce <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0208 	orr.w	r2, r2, #8
 8007cdc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007d06:	f7fb ff9d 	bl	8003c44 <HAL_GetTick>
 8007d0a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SAI_Transmit_DMA+0x20>
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e093      	b.n	8007e44 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	f040 808c 	bne.w	8007e42 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_SAI_Transmit_DMA+0x40>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e085      	b.n	8007e44 <HAL_SAI_Transmit_DMA+0x14c>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	88fa      	ldrh	r2, [r7, #6]
 8007d52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2212      	movs	r2, #18
 8007d62:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d6a:	4a38      	ldr	r2, [pc, #224]	@ (8007e4c <HAL_SAI_Transmit_DMA+0x154>)
 8007d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d72:	4a37      	ldr	r2, [pc, #220]	@ (8007e50 <HAL_SAI_Transmit_DMA+0x158>)
 8007d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7a:	4a36      	ldr	r2, [pc, #216]	@ (8007e54 <HAL_SAI_Transmit_DMA+0x15c>)
 8007d7c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d82:	2200      	movs	r2, #0
 8007d84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	331c      	adds	r3, #28
 8007d96:	461a      	mov	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d9e:	f7fc fd9d 	bl	80048dc <HAL_DMA_Start_IT>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e047      	b.n	8007e44 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007db4:	2100      	movs	r1, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f8f4 	bl	8007fa4 <SAI_InterruptFlag>
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691a      	ldr	r2, [r3, #16]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007dda:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007ddc:	e015      	b.n	8007e0a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007dde:	f7fb ff31 	bl	8003c44 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dec:	d90d      	bls.n	8007e0a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007df4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e01c      	b.n	8007e44 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0e2      	beq.n	8007dde <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007e34:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e000      	b.n	8007e44 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007e42:	2302      	movs	r3, #2
  }
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	080080e1 	.word	0x080080e1
 8007e50:	08008081 	.word	0x08008081
 8007e54:	08008179 	.word	0x08008179

08007e58 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_SAI_Receive_DMA+0x1a>
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e074      	b.n	8007f60 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d16d      	bne.n	8007f5e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_SAI_Receive_DMA+0x38>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e067      	b.n	8007f60 <HAL_SAI_Receive_DMA+0x108>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	88fa      	ldrh	r2, [r7, #6]
 8007ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2222      	movs	r2, #34	@ 0x22
 8007eba:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec2:	4a29      	ldr	r2, [pc, #164]	@ (8007f68 <HAL_SAI_Receive_DMA+0x110>)
 8007ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eca:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <HAL_SAI_Receive_DMA+0x114>)
 8007ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed2:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <HAL_SAI_Receive_DMA+0x118>)
 8007ed4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eda:	2200      	movs	r2, #0
 8007edc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	331c      	adds	r3, #28
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ef6:	f7fc fcf1 	bl	80048dc <HAL_DMA_Start_IT>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e029      	b.n	8007f60 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f848 	bl	8007fa4 <SAI_InterruptFlag>
 8007f14:	4601      	mov	r1, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007f32:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007f50:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e000      	b.n	8007f60 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007f5e:	2302      	movs	r3, #2
  }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	0800815d 	.word	0x0800815d
 8007f6c:	080080fd 	.word	0x080080fd
 8007f70:	08008179 	.word	0x08008179

08007f74 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007f96:	b2db      	uxtb	r3, r3
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d103      	bne.n	8007fc0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f043 0308 	orr.w	r3, r3, #8
 8007fbe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d10b      	bne.n	8007fe0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d003      	beq.n	8007fd8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d103      	bne.n	8007fe0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f043 0310 	orr.w	r3, r3, #16
 8007fde:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d003      	beq.n	8007ff0 <SAI_InterruptFlag+0x4c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d104      	bne.n	8007ffa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e003      	b.n	8008002 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f043 0304 	orr.w	r3, r3, #4
 8008000:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008002:	68fb      	ldr	r3, [r7, #12]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008018:	4b17      	ldr	r3, [pc, #92]	@ (8008078 <SAI_Disable+0x68>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a17      	ldr	r2, [pc, #92]	@ (800807c <SAI_Disable+0x6c>)
 800801e:	fba2 2303 	umull	r2, r3, r2, r3
 8008022:	0b1b      	lsrs	r3, r3, #12
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800803a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	60fa      	str	r2, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800804c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	72fb      	strb	r3, [r7, #11]
      break;
 800805a:	e006      	b.n	800806a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e8      	bne.n	800803c <SAI_Disable+0x2c>

  return status;
 800806a:	7afb      	ldrb	r3, [r7, #11]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000008 	.word	0x20000008
 800807c:	95cbec1b 	.word	0x95cbec1b

08008080 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008096:	d01c      	beq.n	80080d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80080ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80080b0:	2100      	movs	r1, #0
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff ff76 	bl	8007fa4 <SAI_InterruptFlag>
 80080b8:	4603      	mov	r3, r0
 80080ba:	43d9      	mvns	r1, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	400a      	ands	r2, r1
 80080c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7f9 fb92 	bl	80017fc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7f9 fb74 	bl	80017dc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008108:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008112:	d01c      	beq.n	800814e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008122:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800812c:	2100      	movs	r1, #0
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff ff38 	bl	8007fa4 <SAI_InterruptFlag>
 8008134:	4603      	mov	r3, r0
 8008136:	43d9      	mvns	r1, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	400a      	ands	r2, r1
 8008144:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7f9 fb64 	bl	800181c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008168:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7f9 fb60 	bl	8001830 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800819a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819c:	2b01      	cmp	r3, #1
 800819e:	d004      	beq.n	80081aa <SAI_DMAError+0x32>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d112      	bne.n	80081d0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80081b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff ff28 	bl	8008010 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff fecf 	bl	8007f74 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e022      	b.n	8008236 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f9 fca0 	bl	8001b48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2203      	movs	r2, #3
 800820c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f815 	bl	8008240 <HAL_SD_InitCard>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e00a      	b.n	8008236 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008240:	b5b0      	push	{r4, r5, r7, lr}
 8008242:	b08e      	sub	sp, #56	@ 0x38
 8008244:	af04      	add	r7, sp, #16
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800825c:	2376      	movs	r3, #118	@ 0x76
 800825e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681d      	ldr	r5, [r3, #0]
 8008264:	466c      	mov	r4, sp
 8008266:	f107 0314 	add.w	r3, r7, #20
 800826a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800826e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008278:	4628      	mov	r0, r5
 800827a:	f001 fda7 	bl	8009dcc <SDMMC_Init>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e059      	b.n	8008344 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800829e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fddb 	bl	8009e60 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80082ba:	2002      	movs	r0, #2
 80082bc:	f7fb fcce 	bl	8003c5c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 ff59 	bl	8009178 <SD_PowerON>
 80082c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e02e      	b.n	8008344 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fe78 	bl	8008fdc <SD_InitCard>
 80082ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e01b      	b.n	8008344 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fe35 	bl	8009f84 <SDMMC_CmdBlockLength>
 800831a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00f      	beq.n	8008342 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a09      	ldr	r2, [pc, #36]	@ (800834c <HAL_SD_InitCard+0x10c>)
 8008328:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3728      	adds	r7, #40	@ 0x28
 8008348:	46bd      	mov	sp, r7
 800834a:	bdb0      	pop	{r4, r5, r7, pc}
 800834c:	004005ff 	.word	0x004005ff

08008350 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	@ 0x30
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d107      	bne.n	8008378 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e0c3      	b.n	8008500 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	f040 80bc 	bne.w	80084fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800838c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	441a      	add	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008396:	429a      	cmp	r2, r3
 8008398:	d907      	bls.n	80083aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0aa      	b.n	8008500 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2203      	movs	r2, #3
 80083ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80083c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008508 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80083d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	4a4d      	ldr	r2, [pc, #308]	@ (800850c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80083d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	2200      	movs	r2, #0
 80083e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3380      	adds	r3, #128	@ 0x80
 8008410:	4619      	mov	r1, r3
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	025b      	lsls	r3, r3, #9
 8008418:	089b      	lsrs	r3, r3, #2
 800841a:	f7fc fa5f 	bl	80048dc <HAL_DMA_Start_IT>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d017      	beq.n	8008454 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008432:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a35      	ldr	r2, [pc, #212]	@ (8008510 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800843a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008440:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e055      	b.n	8008500 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008468:	2b01      	cmp	r3, #1
 800846a:	d002      	beq.n	8008472 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	025b      	lsls	r3, r3, #9
 8008470:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	025b      	lsls	r3, r3, #9
 800847c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800847e:	2390      	movs	r3, #144	@ 0x90
 8008480:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008482:	2302      	movs	r3, #2
 8008484:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008486:	2300      	movs	r3, #0
 8008488:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800848a:	2301      	movs	r3, #1
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f107 0210 	add.w	r2, r7, #16
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fd47 	bl	8009f2c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d90a      	bls.n	80084ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2282      	movs	r2, #130	@ 0x82
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fdab 	bl	800a00c <SDMMC_CmdReadMultiBlock>
 80084b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80084b8:	e009      	b.n	80084ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2281      	movs	r2, #129	@ 0x81
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fd7e 	bl	8009fc8 <SDMMC_CmdReadSingleBlock>
 80084cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d012      	beq.n	80084fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008510 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80084da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	431a      	orrs	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e002      	b.n	8008500 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80084fe:	2302      	movs	r3, #2
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3730      	adds	r7, #48	@ 0x30
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	08008deb 	.word	0x08008deb
 800850c:	08008e5d 	.word	0x08008e5d
 8008510:	004005ff 	.word	0x004005ff

08008514 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	@ 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0c6      	b.n	80086ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	f040 80bf 	bne.w	80086c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855a:	429a      	cmp	r2, r3
 800855c:	d907      	bls.n	800856e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008562:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e0ad      	b.n	80086ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2203      	movs	r2, #3
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 021a 	orr.w	r2, r2, #26
 800858c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008592:	4a50      	ldr	r2, [pc, #320]	@ (80086d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	4a4f      	ldr	r2, [pc, #316]	@ (80086d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800859c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a2:	2200      	movs	r2, #0
 80085a4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d002      	beq.n	80085b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	025b      	lsls	r3, r3, #9
 80085b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d90a      	bls.n	80085d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	22a0      	movs	r2, #160	@ 0xa0
 80085be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fd64 	bl	800a094 <SDMMC_CmdWriteMultiBlock>
 80085cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80085ce:	e009      	b.n	80085e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2290      	movs	r2, #144	@ 0x90
 80085d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fd37 	bl	800a050 <SDMMC_CmdWriteSingleBlock>
 80085e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d012      	beq.n	8008610 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a3b      	ldr	r2, [pc, #236]	@ (80086dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80085f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	431a      	orrs	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e05c      	b.n	80086ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0208 	orr.w	r2, r2, #8
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008624:	2240      	movs	r2, #64	@ 0x40
 8008626:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3380      	adds	r3, #128	@ 0x80
 8008650:	461a      	mov	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	025b      	lsls	r3, r3, #9
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	f7fc f940 	bl	80048dc <HAL_DMA_Start_IT>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01a      	beq.n	8008698 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 021a 	bic.w	r2, r2, #26
 8008670:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a19      	ldr	r2, [pc, #100]	@ (80086dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008678:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e018      	b.n	80086ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086a4:	2390      	movs	r3, #144	@ 0x90
 80086a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f107 0210 	add.w	r2, r7, #16
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fc34 	bl	8009f2c <SDMMC_ConfigData>

      return HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e000      	b.n	80086ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80086c8:	2302      	movs	r3, #2
  }
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3730      	adds	r7, #48	@ 0x30
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	08008dc1 	.word	0x08008dc1
 80086d8:	08008e5d 	.word	0x08008e5d
 80086dc:	004005ff 	.word	0x004005ff

080086e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <HAL_SD_IRQHandler+0x2e>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fdec 	bl	80092e4 <SD_Read_IT>
 800870c:	e15a      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 808d 	beq.w	8008838 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008726:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b9a      	ldr	r3, [pc, #616]	@ (800899c <HAL_SD_IRQHandler+0x2bc>)
 8008734:	400b      	ands	r3, r1
 8008736:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0201 	bic.w	r2, r2, #1
 8008746:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d039      	beq.n	80087c6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <HAL_SD_IRQHandler+0x86>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d011      	beq.n	800878a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fcb4 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 8008770:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d008      	beq.n	800878a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f921 	bl	80089cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <HAL_SD_IRQHandler+0xd6>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f002 f8d2 	bl	800a960 <HAL_SD_RxCpltCallback>
 80087bc:	e102      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f002 f8c4 	bl	800a94c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087c4:	e0fe      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80f9 	beq.w	80089c4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 fc79 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 80087e6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d008      	beq.n	8008800 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	431a      	orrs	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8e6 	bl	80089cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 80dc 	bne.w	80089c4 <HAL_SD_IRQHandler+0x2e4>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	f040 80d6 	bne.w	80089c4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0208 	bic.w	r2, r2, #8
 8008826:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f002 f88b 	bl	800a94c <HAL_SD_TxCpltCallback>
}
 8008836:	e0c5      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <HAL_SD_IRQHandler+0x178>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fd98 	bl	8009386 <SD_Write_IT>
 8008856:	e0b5      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80ae 	beq.w	80089c4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887a:	f043 0202 	orr.w	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008894:	f043 0208 	orr.w	r2, r3, #8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ae:	f043 0220 	orr.w	r2, r3, #32
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c8:	f043 0210 	orr.w	r2, r3, #16
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80088d8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80088e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 fbf2 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 80088f4:	4602      	mov	r2, r0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f857 	bl	80089cc <HAL_SD_ErrorCallback>
}
 800891e:	e051      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d04c      	beq.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <HAL_SD_IRQHandler+0x25e>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d011      	beq.n	8008962 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008942:	4a17      	ldr	r2, [pc, #92]	@ (80089a0 <HAL_SD_IRQHandler+0x2c0>)
 8008944:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894a:	4618      	mov	r0, r3
 800894c:	f7fc f896 	bl	8004a7c <HAL_DMA_Abort_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d036      	beq.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fad0 	bl	8008f00 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008960:	e030      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <HAL_SD_IRQHandler+0x296>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d018      	beq.n	80089a8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	4a0a      	ldr	r2, [pc, #40]	@ (80089a4 <HAL_SD_IRQHandler+0x2c4>)
 800897c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008982:	4618      	mov	r0, r3
 8008984:	f7fc f87a 	bl	8004a7c <HAL_DMA_Abort_IT>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d01a      	beq.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	4618      	mov	r0, r3
 8008994:	f000 faeb 	bl	8008f6e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008998:	e014      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
 800899a:	bf00      	nop
 800899c:	ffff3ec5 	.word	0xffff3ec5
 80089a0:	08008f01 	.word	0x08008f01
 80089a4:	08008f6f 	.word	0x08008f6f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 ffbb 	bl	800a938 <HAL_SD_AbortCallback>
}
 80089c2:	e7ff      	b.n	80089c4 <HAL_SD_IRQHandler+0x2e4>
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ee:	0f9b      	lsrs	r3, r3, #30
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089fa:	0e9b      	lsrs	r3, r3, #26
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a0c:	0e1b      	lsrs	r3, r3, #24
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a1e:	0c1b      	lsrs	r3, r3, #16
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a4c:	0c1b      	lsrs	r3, r3, #16
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a5e:	0bdb      	lsrs	r3, r3, #15
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a70:	0b9b      	lsrs	r3, r3, #14
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a82:	0b5b      	lsrs	r3, r3, #13
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a94:	0b1b      	lsrs	r3, r3, #12
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d163      	bne.n	8008b78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ab4:	009a      	lsls	r2, r3, #2
 8008ab6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008aba:	4013      	ands	r3, r2
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008ac0:	0f92      	lsrs	r2, r2, #30
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008acc:	0edb      	lsrs	r3, r3, #27
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ade:	0e1b      	lsrs	r3, r3, #24
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af0:	0d5b      	lsrs	r3, r3, #21
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b02:	0c9b      	lsrs	r3, r3, #18
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b14:	0bdb      	lsrs	r3, r3, #15
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0307 	and.w	r3, r3, #7
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	7e1b      	ldrb	r3, [r3, #24]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	3302      	adds	r3, #2
 8008b38:	2201      	movs	r2, #1
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008b42:	fb03 f202 	mul.w	r2, r3, r2
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	7a1b      	ldrb	r3, [r3, #8]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 030f 	and.w	r3, r3, #15
 8008b54:	2201      	movs	r2, #1
 8008b56:	409a      	lsls	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008b64:	0a52      	lsrs	r2, r2, #9
 8008b66:	fb03 f202 	mul.w	r2, r3, r2
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b74:	661a      	str	r2, [r3, #96]	@ 0x60
 8008b76:	e031      	b.n	8008bdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d11d      	bne.n	8008bbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	431a      	orrs	r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	029a      	lsls	r2, r3, #10
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008bba:	e00f      	b.n	8008bdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a58      	ldr	r2, [pc, #352]	@ (8008d24 <HAL_SD_GetCardCSD+0x344>)
 8008bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e09d      	b.n	8008d18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be0:	0b9b      	lsrs	r3, r3, #14
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf2:	09db      	lsrs	r3, r3, #7
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c14:	0fdb      	lsrs	r3, r3, #31
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c20:	0f5b      	lsrs	r3, r3, #29
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c32:	0e9b      	lsrs	r3, r3, #26
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c44:	0d9b      	lsrs	r3, r3, #22
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c56:	0d5b      	lsrs	r3, r3, #21
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c86:	0bdb      	lsrs	r3, r3, #15
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9a:	0b9b      	lsrs	r3, r3, #14
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cae:	0b5b      	lsrs	r3, r3, #13
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cc2:	0b1b      	lsrs	r3, r3, #12
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd6:	0a9b      	lsrs	r3, r3, #10
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	004005ff 	.word	0x004005ff

08008d28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d8c:	f107 030c 	add.w	r3, r7, #12
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa7e 	bl	8009294 <SD_SendStatus>
 8008d98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	0a5b      	lsrs	r3, r3, #9
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008db6:	693b      	ldr	r3, [r7, #16]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfc:	2b82      	cmp	r3, #130	@ 0x82
 8008dfe:	d111      	bne.n	8008e24 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 f967 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 8008e0a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d008      	beq.n	8008e24 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff fdd4 	bl	80089cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0208 	bic.w	r2, r2, #8
 8008e32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008e3c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f001 fd87 	bl	800a960 <HAL_SD_RxCpltCallback>
#endif
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e68:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7fb ffb2 	bl	8004dd4 <HAL_DMA_GetError>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d03e      	beq.n	8008ef4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e84:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <SD_DMAError+0x36>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d12d      	bne.n	8008eee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a19      	ldr	r2, [pc, #100]	@ (8008efc <SD_DMAError+0xa0>)
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008ea8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008eb6:	6978      	ldr	r0, [r7, #20]
 8008eb8:	f7ff ff62 	bl	8008d80 <HAL_SD_GetCardState>
 8008ebc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d002      	beq.n	8008eca <SD_DMAError+0x6e>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b05      	cmp	r3, #5
 8008ec8:	d10a      	bne.n	8008ee0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 f902 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	431a      	orrs	r2, r3
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008eee:	6978      	ldr	r0, [r7, #20]
 8008ef0:	f7ff fd6c 	bl	80089cc <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	004005ff 	.word	0x004005ff

08008f00 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008f16:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff ff31 	bl	8008d80 <HAL_SD_GetCardState>
 8008f1e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b06      	cmp	r3, #6
 8008f32:	d002      	beq.n	8008f3a <SD_DMATxAbort+0x3a>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	d10a      	bne.n	8008f50 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 f8ca 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 8008f44:	4602      	mov	r2, r0
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f001 fced 	bl	800a938 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f5e:	e002      	b.n	8008f66 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff fd33 	bl	80089cc <HAL_SD_ErrorCallback>
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008f84:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fefa 	bl	8008d80 <HAL_SD_GetCardState>
 8008f8c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b06      	cmp	r3, #6
 8008fa0:	d002      	beq.n	8008fa8 <SD_DMARxAbort+0x3a>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d10a      	bne.n	8008fbe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 f893 	bl	800a0d8 <SDMMC_CmdStopTransfer>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f001 fcb6 	bl	800a938 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fcc:	e002      	b.n	8008fd4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff fcfc 	bl	80089cc <HAL_SD_ErrorCallback>
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b094      	sub	sp, #80	@ 0x50
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 ff45 	bl	8009e7c <SDMMC_GetPowerState>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ff8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008ffc:	e0b8      	b.n	8009170 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009002:	2b03      	cmp	r3, #3
 8009004:	d02f      	beq.n	8009066 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f001 f92c 	bl	800a268 <SDMMC_CmdSendCID>
 8009010:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SD_InitCard+0x40>
    {
      return errorstate;
 8009018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901a:	e0a9      	b.n	8009170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f000 ff6f 	bl	8009f06 <SDMMC_GetResponse>
 8009028:	4602      	mov	r2, r0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2104      	movs	r1, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f000 ff66 	bl	8009f06 <SDMMC_GetResponse>
 800903a:	4602      	mov	r2, r0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2108      	movs	r1, #8
 8009046:	4618      	mov	r0, r3
 8009048:	f000 ff5d 	bl	8009f06 <SDMMC_GetResponse>
 800904c:	4602      	mov	r2, r0
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	210c      	movs	r1, #12
 8009058:	4618      	mov	r0, r3
 800905a:	f000 ff54 	bl	8009f06 <SDMMC_GetResponse>
 800905e:	4602      	mov	r2, r0
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906a:	2b03      	cmp	r3, #3
 800906c:	d00d      	beq.n	800908a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f107 020e 	add.w	r2, r7, #14
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f001 f932 	bl	800a2e2 <SDMMC_CmdSetRelAdd>
 800907e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <SD_InitCard+0xae>
    {
      return errorstate;
 8009086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009088:	e072      	b.n	8009170 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908e:	2b03      	cmp	r3, #3
 8009090:	d036      	beq.n	8009100 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009092:	89fb      	ldrh	r3, [r7, #14]
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f001 f8fc 	bl	800a2a4 <SDMMC_CmdSendCSD>
 80090ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80090b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b6:	e05b      	b.n	8009170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 ff21 	bl	8009f06 <SDMMC_GetResponse>
 80090c4:	4602      	mov	r2, r0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2104      	movs	r1, #4
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 ff18 	bl	8009f06 <SDMMC_GetResponse>
 80090d6:	4602      	mov	r2, r0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2108      	movs	r1, #8
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 ff0f 	bl	8009f06 <SDMMC_GetResponse>
 80090e8:	4602      	mov	r2, r0
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	210c      	movs	r1, #12
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 ff06 	bl	8009f06 <SDMMC_GetResponse>
 80090fa:	4602      	mov	r2, r0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2104      	movs	r1, #4
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fefd 	bl	8009f06 <SDMMC_GetResponse>
 800910c:	4603      	mov	r3, r0
 800910e:	0d1a      	lsrs	r2, r3, #20
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009114:	f107 0310 	add.w	r3, r7, #16
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fc60 	bl	80089e0 <HAL_SD_GetCardCSD>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009126:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800912a:	e021      	b.n	8009170 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6819      	ldr	r1, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	2200      	movs	r2, #0
 8009138:	461c      	mov	r4, r3
 800913a:	4615      	mov	r5, r2
 800913c:	4622      	mov	r2, r4
 800913e:	462b      	mov	r3, r5
 8009140:	4608      	mov	r0, r1
 8009142:	f000 ffeb 	bl	800a11c <SDMMC_CmdSelDesel>
 8009146:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <SD_InitCard+0x176>
  {
    return errorstate;
 800914e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009150:	e00e      	b.n	8009170 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681d      	ldr	r5, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	466c      	mov	r4, sp
 800915a:	f103 0210 	add.w	r2, r3, #16
 800915e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009160:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009164:	3304      	adds	r3, #4
 8009166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009168:	4628      	mov	r0, r5
 800916a:	f000 fe2f 	bl	8009dcc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3740      	adds	r7, #64	@ 0x40
 8009174:	46bd      	mov	sp, r7
 8009176:	bdb0      	pop	{r4, r5, r7, pc}

08009178 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 ffe6 	bl	800a162 <SDMMC_CmdGoIdleState>
 8009196:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	e072      	b.n	8009288 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fff9 	bl	800a19e <SDMMC_CmdOperCond>
 80091ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00d      	beq.n	80091d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 ffcf 	bl	800a162 <SDMMC_CmdGoIdleState>
 80091c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	e05b      	b.n	8009288 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d137      	bne.n	800924e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fff9 	bl	800a1dc <SDMMC_CmdAppCommand>
 80091ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d02d      	beq.n	800924e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091f6:	e047      	b.n	8009288 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 ffec 	bl	800a1dc <SDMMC_CmdAppCommand>
 8009204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <SD_PowerON+0x98>
    {
      return errorstate;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	e03b      	b.n	8009288 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	491e      	ldr	r1, [pc, #120]	@ (8009290 <SD_PowerON+0x118>)
 8009216:	4618      	mov	r0, r3
 8009218:	f001 f802 	bl	800a220 <SDMMC_CmdAppOperCommand>
 800921c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009224:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009228:	e02e      	b.n	8009288 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2100      	movs	r1, #0
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fe68 	bl	8009f06 <SDMMC_GetResponse>
 8009236:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	0fdb      	lsrs	r3, r3, #31
 800923c:	2b01      	cmp	r3, #1
 800923e:	d101      	bne.n	8009244 <SD_PowerON+0xcc>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <SD_PowerON+0xce>
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]

    count++;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3301      	adds	r3, #1
 800924c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009254:	4293      	cmp	r3, r2
 8009256:	d802      	bhi.n	800925e <SD_PowerON+0xe6>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0cc      	beq.n	80091f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009264:	4293      	cmp	r3, r2
 8009266:	d902      	bls.n	800926e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009268:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800926c:	e00c      	b.n	8009288 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	645a      	str	r2, [r3, #68]	@ 0x44
 800927e:	e002      	b.n	8009286 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	c1100000 	.word	0xc1100000

08009294 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092a8:	e018      	b.n	80092dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b2:	041b      	lsls	r3, r3, #16
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f001 f834 	bl	800a324 <SDMMC_CmdSendStatus>
 80092bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	e009      	b.n	80092dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fe19 	bl	8009f06 <SDMMC_GetResponse>
 80092d4:	4602      	mov	r2, r0
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d03f      	beq.n	800937e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	e033      	b.n	800936c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fd8b 	bl	8009e24 <SDMMC_ReadFIFO>
 800930e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	b2da      	uxtb	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3b01      	subs	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	b2da      	uxtb	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3b01      	subs	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	0c1b      	lsrs	r3, r3, #16
 800933e:	b2da      	uxtb	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	0e1b      	lsrs	r3, r3, #24
 8009354:	b2da      	uxtb	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	701a      	strb	r2, [r3, #0]
      tmp++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	3301      	adds	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b07      	cmp	r3, #7
 8009370:	d9c8      	bls.n	8009304 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800937e:	bf00      	nop
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b086      	sub	sp, #24
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009398:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d043      	beq.n	8009428 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	e037      	b.n	8009416 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	021a      	lsls	r2, r3, #8
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	041a      	lsls	r2, r3, #16
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	061a      	lsls	r2, r3, #24
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fd17 	bl	8009e3e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	3301      	adds	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b07      	cmp	r3, #7
 800941a:	d9c4      	bls.n	80093a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009428:	bf00      	nop
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e040      	b.n	80094c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f8 fc86 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2224      	movs	r2, #36	@ 0x24
 800945c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa8c 	bl	8009994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f825 	bl	80094cc <UART_SetConfig>
 8009482:	4603      	mov	r3, r0
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e01b      	b.n	80094c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800949a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fb0b 	bl	8009ad8 <UART_CheckIdleState>
 80094c2:	4603      	mov	r3, r0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4ba6      	ldr	r3, [pc, #664]	@ (8009790 <UART_SetConfig+0x2c4>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6812      	ldr	r2, [r2, #0]
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	430b      	orrs	r3, r1
 8009502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	430a      	orrs	r2, r1
 800953c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a94      	ldr	r2, [pc, #592]	@ (8009794 <UART_SetConfig+0x2c8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d120      	bne.n	800958a <UART_SetConfig+0xbe>
 8009548:	4b93      	ldr	r3, [pc, #588]	@ (8009798 <UART_SetConfig+0x2cc>)
 800954a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b03      	cmp	r3, #3
 8009554:	d816      	bhi.n	8009584 <UART_SetConfig+0xb8>
 8009556:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <UART_SetConfig+0x90>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	0800956d 	.word	0x0800956d
 8009560:	08009579 	.word	0x08009579
 8009564:	08009573 	.word	0x08009573
 8009568:	0800957f 	.word	0x0800957f
 800956c:	2301      	movs	r3, #1
 800956e:	77fb      	strb	r3, [r7, #31]
 8009570:	e150      	b.n	8009814 <UART_SetConfig+0x348>
 8009572:	2302      	movs	r3, #2
 8009574:	77fb      	strb	r3, [r7, #31]
 8009576:	e14d      	b.n	8009814 <UART_SetConfig+0x348>
 8009578:	2304      	movs	r3, #4
 800957a:	77fb      	strb	r3, [r7, #31]
 800957c:	e14a      	b.n	8009814 <UART_SetConfig+0x348>
 800957e:	2308      	movs	r3, #8
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	e147      	b.n	8009814 <UART_SetConfig+0x348>
 8009584:	2310      	movs	r3, #16
 8009586:	77fb      	strb	r3, [r7, #31]
 8009588:	e144      	b.n	8009814 <UART_SetConfig+0x348>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a83      	ldr	r2, [pc, #524]	@ (800979c <UART_SetConfig+0x2d0>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d132      	bne.n	80095fa <UART_SetConfig+0x12e>
 8009594:	4b80      	ldr	r3, [pc, #512]	@ (8009798 <UART_SetConfig+0x2cc>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959a:	f003 030c 	and.w	r3, r3, #12
 800959e:	2b0c      	cmp	r3, #12
 80095a0:	d828      	bhi.n	80095f4 <UART_SetConfig+0x128>
 80095a2:	a201      	add	r2, pc, #4	@ (adr r2, 80095a8 <UART_SetConfig+0xdc>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095dd 	.word	0x080095dd
 80095ac:	080095f5 	.word	0x080095f5
 80095b0:	080095f5 	.word	0x080095f5
 80095b4:	080095f5 	.word	0x080095f5
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095f5 	.word	0x080095f5
 80095c4:	080095f5 	.word	0x080095f5
 80095c8:	080095e3 	.word	0x080095e3
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095f5 	.word	0x080095f5
 80095d8:	080095ef 	.word	0x080095ef
 80095dc:	2300      	movs	r3, #0
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e118      	b.n	8009814 <UART_SetConfig+0x348>
 80095e2:	2302      	movs	r3, #2
 80095e4:	77fb      	strb	r3, [r7, #31]
 80095e6:	e115      	b.n	8009814 <UART_SetConfig+0x348>
 80095e8:	2304      	movs	r3, #4
 80095ea:	77fb      	strb	r3, [r7, #31]
 80095ec:	e112      	b.n	8009814 <UART_SetConfig+0x348>
 80095ee:	2308      	movs	r3, #8
 80095f0:	77fb      	strb	r3, [r7, #31]
 80095f2:	e10f      	b.n	8009814 <UART_SetConfig+0x348>
 80095f4:	2310      	movs	r3, #16
 80095f6:	77fb      	strb	r3, [r7, #31]
 80095f8:	e10c      	b.n	8009814 <UART_SetConfig+0x348>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a68      	ldr	r2, [pc, #416]	@ (80097a0 <UART_SetConfig+0x2d4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d120      	bne.n	8009646 <UART_SetConfig+0x17a>
 8009604:	4b64      	ldr	r3, [pc, #400]	@ (8009798 <UART_SetConfig+0x2cc>)
 8009606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800960e:	2b30      	cmp	r3, #48	@ 0x30
 8009610:	d013      	beq.n	800963a <UART_SetConfig+0x16e>
 8009612:	2b30      	cmp	r3, #48	@ 0x30
 8009614:	d814      	bhi.n	8009640 <UART_SetConfig+0x174>
 8009616:	2b20      	cmp	r3, #32
 8009618:	d009      	beq.n	800962e <UART_SetConfig+0x162>
 800961a:	2b20      	cmp	r3, #32
 800961c:	d810      	bhi.n	8009640 <UART_SetConfig+0x174>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <UART_SetConfig+0x15c>
 8009622:	2b10      	cmp	r3, #16
 8009624:	d006      	beq.n	8009634 <UART_SetConfig+0x168>
 8009626:	e00b      	b.n	8009640 <UART_SetConfig+0x174>
 8009628:	2300      	movs	r3, #0
 800962a:	77fb      	strb	r3, [r7, #31]
 800962c:	e0f2      	b.n	8009814 <UART_SetConfig+0x348>
 800962e:	2302      	movs	r3, #2
 8009630:	77fb      	strb	r3, [r7, #31]
 8009632:	e0ef      	b.n	8009814 <UART_SetConfig+0x348>
 8009634:	2304      	movs	r3, #4
 8009636:	77fb      	strb	r3, [r7, #31]
 8009638:	e0ec      	b.n	8009814 <UART_SetConfig+0x348>
 800963a:	2308      	movs	r3, #8
 800963c:	77fb      	strb	r3, [r7, #31]
 800963e:	e0e9      	b.n	8009814 <UART_SetConfig+0x348>
 8009640:	2310      	movs	r3, #16
 8009642:	77fb      	strb	r3, [r7, #31]
 8009644:	e0e6      	b.n	8009814 <UART_SetConfig+0x348>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a56      	ldr	r2, [pc, #344]	@ (80097a4 <UART_SetConfig+0x2d8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d120      	bne.n	8009692 <UART_SetConfig+0x1c6>
 8009650:	4b51      	ldr	r3, [pc, #324]	@ (8009798 <UART_SetConfig+0x2cc>)
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009656:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800965a:	2bc0      	cmp	r3, #192	@ 0xc0
 800965c:	d013      	beq.n	8009686 <UART_SetConfig+0x1ba>
 800965e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009660:	d814      	bhi.n	800968c <UART_SetConfig+0x1c0>
 8009662:	2b80      	cmp	r3, #128	@ 0x80
 8009664:	d009      	beq.n	800967a <UART_SetConfig+0x1ae>
 8009666:	2b80      	cmp	r3, #128	@ 0x80
 8009668:	d810      	bhi.n	800968c <UART_SetConfig+0x1c0>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <UART_SetConfig+0x1a8>
 800966e:	2b40      	cmp	r3, #64	@ 0x40
 8009670:	d006      	beq.n	8009680 <UART_SetConfig+0x1b4>
 8009672:	e00b      	b.n	800968c <UART_SetConfig+0x1c0>
 8009674:	2300      	movs	r3, #0
 8009676:	77fb      	strb	r3, [r7, #31]
 8009678:	e0cc      	b.n	8009814 <UART_SetConfig+0x348>
 800967a:	2302      	movs	r3, #2
 800967c:	77fb      	strb	r3, [r7, #31]
 800967e:	e0c9      	b.n	8009814 <UART_SetConfig+0x348>
 8009680:	2304      	movs	r3, #4
 8009682:	77fb      	strb	r3, [r7, #31]
 8009684:	e0c6      	b.n	8009814 <UART_SetConfig+0x348>
 8009686:	2308      	movs	r3, #8
 8009688:	77fb      	strb	r3, [r7, #31]
 800968a:	e0c3      	b.n	8009814 <UART_SetConfig+0x348>
 800968c:	2310      	movs	r3, #16
 800968e:	77fb      	strb	r3, [r7, #31]
 8009690:	e0c0      	b.n	8009814 <UART_SetConfig+0x348>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a44      	ldr	r2, [pc, #272]	@ (80097a8 <UART_SetConfig+0x2dc>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d125      	bne.n	80096e8 <UART_SetConfig+0x21c>
 800969c:	4b3e      	ldr	r3, [pc, #248]	@ (8009798 <UART_SetConfig+0x2cc>)
 800969e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096aa:	d017      	beq.n	80096dc <UART_SetConfig+0x210>
 80096ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096b0:	d817      	bhi.n	80096e2 <UART_SetConfig+0x216>
 80096b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096b6:	d00b      	beq.n	80096d0 <UART_SetConfig+0x204>
 80096b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096bc:	d811      	bhi.n	80096e2 <UART_SetConfig+0x216>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <UART_SetConfig+0x1fe>
 80096c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c6:	d006      	beq.n	80096d6 <UART_SetConfig+0x20a>
 80096c8:	e00b      	b.n	80096e2 <UART_SetConfig+0x216>
 80096ca:	2300      	movs	r3, #0
 80096cc:	77fb      	strb	r3, [r7, #31]
 80096ce:	e0a1      	b.n	8009814 <UART_SetConfig+0x348>
 80096d0:	2302      	movs	r3, #2
 80096d2:	77fb      	strb	r3, [r7, #31]
 80096d4:	e09e      	b.n	8009814 <UART_SetConfig+0x348>
 80096d6:	2304      	movs	r3, #4
 80096d8:	77fb      	strb	r3, [r7, #31]
 80096da:	e09b      	b.n	8009814 <UART_SetConfig+0x348>
 80096dc:	2308      	movs	r3, #8
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e098      	b.n	8009814 <UART_SetConfig+0x348>
 80096e2:	2310      	movs	r3, #16
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e095      	b.n	8009814 <UART_SetConfig+0x348>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a2f      	ldr	r2, [pc, #188]	@ (80097ac <UART_SetConfig+0x2e0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d125      	bne.n	800973e <UART_SetConfig+0x272>
 80096f2:	4b29      	ldr	r3, [pc, #164]	@ (8009798 <UART_SetConfig+0x2cc>)
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009700:	d017      	beq.n	8009732 <UART_SetConfig+0x266>
 8009702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009706:	d817      	bhi.n	8009738 <UART_SetConfig+0x26c>
 8009708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800970c:	d00b      	beq.n	8009726 <UART_SetConfig+0x25a>
 800970e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009712:	d811      	bhi.n	8009738 <UART_SetConfig+0x26c>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <UART_SetConfig+0x254>
 8009718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800971c:	d006      	beq.n	800972c <UART_SetConfig+0x260>
 800971e:	e00b      	b.n	8009738 <UART_SetConfig+0x26c>
 8009720:	2301      	movs	r3, #1
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e076      	b.n	8009814 <UART_SetConfig+0x348>
 8009726:	2302      	movs	r3, #2
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e073      	b.n	8009814 <UART_SetConfig+0x348>
 800972c:	2304      	movs	r3, #4
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e070      	b.n	8009814 <UART_SetConfig+0x348>
 8009732:	2308      	movs	r3, #8
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e06d      	b.n	8009814 <UART_SetConfig+0x348>
 8009738:	2310      	movs	r3, #16
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e06a      	b.n	8009814 <UART_SetConfig+0x348>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1b      	ldr	r2, [pc, #108]	@ (80097b0 <UART_SetConfig+0x2e4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d138      	bne.n	80097ba <UART_SetConfig+0x2ee>
 8009748:	4b13      	ldr	r3, [pc, #76]	@ (8009798 <UART_SetConfig+0x2cc>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009752:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009756:	d017      	beq.n	8009788 <UART_SetConfig+0x2bc>
 8009758:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800975c:	d82a      	bhi.n	80097b4 <UART_SetConfig+0x2e8>
 800975e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009762:	d00b      	beq.n	800977c <UART_SetConfig+0x2b0>
 8009764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009768:	d824      	bhi.n	80097b4 <UART_SetConfig+0x2e8>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <UART_SetConfig+0x2aa>
 800976e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009772:	d006      	beq.n	8009782 <UART_SetConfig+0x2b6>
 8009774:	e01e      	b.n	80097b4 <UART_SetConfig+0x2e8>
 8009776:	2300      	movs	r3, #0
 8009778:	77fb      	strb	r3, [r7, #31]
 800977a:	e04b      	b.n	8009814 <UART_SetConfig+0x348>
 800977c:	2302      	movs	r3, #2
 800977e:	77fb      	strb	r3, [r7, #31]
 8009780:	e048      	b.n	8009814 <UART_SetConfig+0x348>
 8009782:	2304      	movs	r3, #4
 8009784:	77fb      	strb	r3, [r7, #31]
 8009786:	e045      	b.n	8009814 <UART_SetConfig+0x348>
 8009788:	2308      	movs	r3, #8
 800978a:	77fb      	strb	r3, [r7, #31]
 800978c:	e042      	b.n	8009814 <UART_SetConfig+0x348>
 800978e:	bf00      	nop
 8009790:	efff69f3 	.word	0xefff69f3
 8009794:	40011000 	.word	0x40011000
 8009798:	40023800 	.word	0x40023800
 800979c:	40004400 	.word	0x40004400
 80097a0:	40004800 	.word	0x40004800
 80097a4:	40004c00 	.word	0x40004c00
 80097a8:	40005000 	.word	0x40005000
 80097ac:	40011400 	.word	0x40011400
 80097b0:	40007800 	.word	0x40007800
 80097b4:	2310      	movs	r3, #16
 80097b6:	77fb      	strb	r3, [r7, #31]
 80097b8:	e02c      	b.n	8009814 <UART_SetConfig+0x348>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a72      	ldr	r2, [pc, #456]	@ (8009988 <UART_SetConfig+0x4bc>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d125      	bne.n	8009810 <UART_SetConfig+0x344>
 80097c4:	4b71      	ldr	r3, [pc, #452]	@ (800998c <UART_SetConfig+0x4c0>)
 80097c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80097ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80097d2:	d017      	beq.n	8009804 <UART_SetConfig+0x338>
 80097d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80097d8:	d817      	bhi.n	800980a <UART_SetConfig+0x33e>
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097de:	d00b      	beq.n	80097f8 <UART_SetConfig+0x32c>
 80097e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097e4:	d811      	bhi.n	800980a <UART_SetConfig+0x33e>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <UART_SetConfig+0x326>
 80097ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ee:	d006      	beq.n	80097fe <UART_SetConfig+0x332>
 80097f0:	e00b      	b.n	800980a <UART_SetConfig+0x33e>
 80097f2:	2300      	movs	r3, #0
 80097f4:	77fb      	strb	r3, [r7, #31]
 80097f6:	e00d      	b.n	8009814 <UART_SetConfig+0x348>
 80097f8:	2302      	movs	r3, #2
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e00a      	b.n	8009814 <UART_SetConfig+0x348>
 80097fe:	2304      	movs	r3, #4
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e007      	b.n	8009814 <UART_SetConfig+0x348>
 8009804:	2308      	movs	r3, #8
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e004      	b.n	8009814 <UART_SetConfig+0x348>
 800980a:	2310      	movs	r3, #16
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e001      	b.n	8009814 <UART_SetConfig+0x348>
 8009810:	2310      	movs	r3, #16
 8009812:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800981c:	d15b      	bne.n	80098d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800981e:	7ffb      	ldrb	r3, [r7, #31]
 8009820:	2b08      	cmp	r3, #8
 8009822:	d828      	bhi.n	8009876 <UART_SetConfig+0x3aa>
 8009824:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <UART_SetConfig+0x360>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009861 	.word	0x08009861
 8009838:	08009877 	.word	0x08009877
 800983c:	08009867 	.word	0x08009867
 8009840:	08009877 	.word	0x08009877
 8009844:	08009877 	.word	0x08009877
 8009848:	08009877 	.word	0x08009877
 800984c:	0800986f 	.word	0x0800986f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009850:	f7fd f94a 	bl	8006ae8 <HAL_RCC_GetPCLK1Freq>
 8009854:	61b8      	str	r0, [r7, #24]
        break;
 8009856:	e013      	b.n	8009880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009858:	f7fd f95a 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 800985c:	61b8      	str	r0, [r7, #24]
        break;
 800985e:	e00f      	b.n	8009880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009860:	4b4b      	ldr	r3, [pc, #300]	@ (8009990 <UART_SetConfig+0x4c4>)
 8009862:	61bb      	str	r3, [r7, #24]
        break;
 8009864:	e00c      	b.n	8009880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009866:	f7fd f86d 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 800986a:	61b8      	str	r0, [r7, #24]
        break;
 800986c:	e008      	b.n	8009880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800986e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009872:	61bb      	str	r3, [r7, #24]
        break;
 8009874:	e004      	b.n	8009880 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	77bb      	strb	r3, [r7, #30]
        break;
 800987e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d074      	beq.n	8009970 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	005a      	lsls	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b0f      	cmp	r3, #15
 80098a0:	d916      	bls.n	80098d0 <UART_SetConfig+0x404>
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a8:	d212      	bcs.n	80098d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f023 030f 	bic.w	r3, r3, #15
 80098b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	b29a      	uxth	r2, r3
 80098c0:	89fb      	ldrh	r3, [r7, #14]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	89fa      	ldrh	r2, [r7, #14]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	e04f      	b.n	8009970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	77bb      	strb	r3, [r7, #30]
 80098d4:	e04c      	b.n	8009970 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098d6:	7ffb      	ldrb	r3, [r7, #31]
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d828      	bhi.n	800992e <UART_SetConfig+0x462>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <UART_SetConfig+0x418>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	08009909 	.word	0x08009909
 80098e8:	08009911 	.word	0x08009911
 80098ec:	08009919 	.word	0x08009919
 80098f0:	0800992f 	.word	0x0800992f
 80098f4:	0800991f 	.word	0x0800991f
 80098f8:	0800992f 	.word	0x0800992f
 80098fc:	0800992f 	.word	0x0800992f
 8009900:	0800992f 	.word	0x0800992f
 8009904:	08009927 	.word	0x08009927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009908:	f7fd f8ee 	bl	8006ae8 <HAL_RCC_GetPCLK1Freq>
 800990c:	61b8      	str	r0, [r7, #24]
        break;
 800990e:	e013      	b.n	8009938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009910:	f7fd f8fe 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 8009914:	61b8      	str	r0, [r7, #24]
        break;
 8009916:	e00f      	b.n	8009938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009918:	4b1d      	ldr	r3, [pc, #116]	@ (8009990 <UART_SetConfig+0x4c4>)
 800991a:	61bb      	str	r3, [r7, #24]
        break;
 800991c:	e00c      	b.n	8009938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800991e:	f7fd f811 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 8009922:	61b8      	str	r0, [r7, #24]
        break;
 8009924:	e008      	b.n	8009938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800992a:	61bb      	str	r3, [r7, #24]
        break;
 800992c:	e004      	b.n	8009938 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	77bb      	strb	r3, [r7, #30]
        break;
 8009936:	bf00      	nop
    }

    if (pclk != 0U)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	085a      	lsrs	r2, r3, #1
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	441a      	add	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b0f      	cmp	r3, #15
 8009956:	d909      	bls.n	800996c <UART_SetConfig+0x4a0>
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995e:	d205      	bcs.n	800996c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60da      	str	r2, [r3, #12]
 800996a:	e001      	b.n	8009970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800997c:	7fbb      	ldrb	r3, [r7, #30]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40007c00 	.word	0x40007c00
 800998c:	40023800 	.word	0x40023800
 8009990:	00f42400 	.word	0x00f42400

08009994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a28:	f003 0310 	and.w	r3, r3, #16
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00a      	beq.n	8009a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	f003 0320 	and.w	r3, r3, #32
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01a      	beq.n	8009aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a92:	d10a      	bne.n	8009aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	605a      	str	r2, [r3, #4]
  }
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b098      	sub	sp, #96	@ 0x60
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ae8:	f7fa f8ac 	bl	8003c44 <HAL_GetTick>
 8009aec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d12e      	bne.n	8009b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b04:	2200      	movs	r2, #0
 8009b06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f88c 	bl	8009c28 <UART_WaitOnFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d021      	beq.n	8009b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e062      	b.n	8009c20 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d149      	bne.n	8009bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b70:	2200      	movs	r2, #0
 8009b72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f856 	bl	8009c28 <UART_WaitOnFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d03c      	beq.n	8009bfc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e6      	bne.n	8009b82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	69b9      	ldr	r1, [r7, #24]
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	617b      	str	r3, [r7, #20]
   return(result);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e5      	bne.n	8009bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e011      	b.n	8009c20 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3758      	adds	r7, #88	@ 0x58
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c38:	e04f      	b.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d04b      	beq.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c42:	f7f9 ffff 	bl	8003c44 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d302      	bcc.n	8009c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e04e      	b.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0304 	and.w	r3, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d037      	beq.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b80      	cmp	r3, #128	@ 0x80
 8009c6e:	d034      	beq.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d031      	beq.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d110      	bne.n	8009ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2208      	movs	r2, #8
 8009c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f838 	bl	8009d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2208      	movs	r2, #8
 8009c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e029      	b.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cb4:	d111      	bne.n	8009cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f81e 	bl	8009d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e00f      	b.n	8009cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	bf0c      	ite	eq
 8009cea:	2301      	moveq	r3, #1
 8009cec:	2300      	movne	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d0a0      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b095      	sub	sp, #84	@ 0x54
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d12:	e853 3f00 	ldrex	r3, [r3]
 8009d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d30:	e841 2300 	strex	r3, r2, [r1]
 8009d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e6      	bne.n	8009d0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f023 0301 	bic.w	r3, r3, #1
 8009d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e5      	bne.n	8009d3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d118      	bne.n	8009daa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f023 0310 	bic.w	r3, r3, #16
 8009d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d96:	61bb      	str	r3, [r7, #24]
 8009d98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6979      	ldr	r1, [r7, #20]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	613b      	str	r3, [r7, #16]
   return(result);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009dbe:	bf00      	nop
 8009dc0:	3754      	adds	r7, #84	@ 0x54
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009dcc:	b084      	sub	sp, #16
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	f107 001c 	add.w	r0, r7, #28
 8009dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009de2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009de4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009de6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009dea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009dee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009df2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009df6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	4b07      	ldr	r3, [pc, #28]	@ (8009e20 <SDMMC_Init+0x54>)
 8009e04:	4013      	ands	r3, r2
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	b004      	add	sp, #16
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	ffff8100 	.word	0xffff8100

08009e24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0303 	and.w	r3, r3, #3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009eb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009ebc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009ec2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	4b06      	ldr	r3, [pc, #24]	@ (8009ee8 <SDMMC_SendCommand+0x50>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	fffff000 	.word	0xfffff000

08009eec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	b2db      	uxtb	r3, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3314      	adds	r3, #20
 8009f14:	461a      	mov	r2, r3
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	4413      	add	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
}  
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0

}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f92:	2310      	movs	r3, #16
 8009f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f96:	2340      	movs	r3, #64	@ 0x40
 8009f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fa4:	f107 0308 	add.w	r3, r7, #8
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff ff74 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb4:	2110      	movs	r1, #16
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9d6 	bl	800a368 <SDMMC_GetCmdResp1>
 8009fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fbe:	69fb      	ldr	r3, [r7, #28]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3720      	adds	r7, #32
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009fd6:	2311      	movs	r3, #17
 8009fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fda:	2340      	movs	r3, #64	@ 0x40
 8009fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff ff52 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff8:	2111      	movs	r1, #17
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f9b4 	bl	800a368 <SDMMC_GetCmdResp1>
 800a000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a002:	69fb      	ldr	r3, [r7, #28]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a01a:	2312      	movs	r3, #18
 800a01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a01e:	2340      	movs	r3, #64	@ 0x40
 800a020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a02c:	f107 0308 	add.w	r3, r7, #8
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff ff30 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a03c:	2112      	movs	r1, #18
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f992 	bl	800a368 <SDMMC_GetCmdResp1>
 800a044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a046:	69fb      	ldr	r3, [r7, #28]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3720      	adds	r7, #32
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a05e:	2318      	movs	r3, #24
 800a060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a062:	2340      	movs	r3, #64	@ 0x40
 800a064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a06a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a06e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ff0e 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a07c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a080:	2118      	movs	r1, #24
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f970 	bl	800a368 <SDMMC_GetCmdResp1>
 800a088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a08a:	69fb      	ldr	r3, [r7, #28]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3720      	adds	r7, #32
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a0a2:	2319      	movs	r3, #25
 800a0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0a6:	2340      	movs	r3, #64	@ 0x40
 800a0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff feec 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a0c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0c4:	2119      	movs	r1, #25
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f94e 	bl	800a368 <SDMMC_GetCmdResp1>
 800a0cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3720      	adds	r7, #32
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0e8:	2340      	movs	r3, #64	@ 0x40
 800a0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff fecb 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a102:	4a05      	ldr	r2, [pc, #20]	@ (800a118 <SDMMC_CmdStopTransfer+0x40>)
 800a104:	210c      	movs	r1, #12
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f92e 	bl	800a368 <SDMMC_GetCmdResp1>
 800a10c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a10e:	69fb      	ldr	r3, [r7, #28]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	05f5e100 	.word	0x05f5e100

0800a11c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	@ 0x28
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a12c:	2307      	movs	r3, #7
 800a12e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a130:	2340      	movs	r3, #64	@ 0x40
 800a132:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a134:	2300      	movs	r3, #0
 800a136:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a13c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a13e:	f107 0310 	add.w	r3, r7, #16
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fea7 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a14a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a14e:	2107      	movs	r1, #7
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f909 	bl	800a368 <SDMMC_GetCmdResp1>
 800a156:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3728      	adds	r7, #40	@ 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b088      	sub	sp, #32
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a172:	2300      	movs	r3, #0
 800a174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a17e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a180:	f107 0308 	add.w	r3, r7, #8
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff fe86 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fb23 	bl	800a7d8 <SDMMC_GetCmdError>
 800a192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a194:	69fb      	ldr	r3, [r7, #28]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3720      	adds	r7, #32
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b088      	sub	sp, #32
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a1a6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a1aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1b0:	2340      	movs	r3, #64	@ 0x40
 800a1b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff fe67 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fab6 	bl	800a73c <SDMMC_GetCmdResp7>
 800a1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a1ea:	2337      	movs	r3, #55	@ 0x37
 800a1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1ee:	2340      	movs	r3, #64	@ 0x40
 800a1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff fe48 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a20c:	2137      	movs	r1, #55	@ 0x37
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f8aa 	bl	800a368 <SDMMC_GetCmdResp1>
 800a214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a216:	69fb      	ldr	r3, [r7, #28]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <SDMMC_CmdAppOperCommand+0x44>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a232:	2329      	movs	r3, #41	@ 0x29
 800a234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a236:	2340      	movs	r3, #64	@ 0x40
 800a238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a244:	f107 0308 	add.w	r3, r7, #8
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff fe24 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9bf 	bl	800a5d4 <SDMMC_GetCmdResp3>
 800a256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a258:	69fb      	ldr	r3, [r7, #28]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	80100000 	.word	0x80100000

0800a268 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a274:	2302      	movs	r3, #2
 800a276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a278:	23c0      	movs	r3, #192	@ 0xc0
 800a27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a286:	f107 0308 	add.w	r3, r7, #8
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff fe03 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f956 	bl	800a544 <SDMMC_GetCmdResp2>
 800a298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a29a:	69fb      	ldr	r3, [r7, #28]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a2b2:	2309      	movs	r3, #9
 800a2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a2b6:	23c0      	movs	r3, #192	@ 0xc0
 800a2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff fde4 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f937 	bl	800a544 <SDMMC_GetCmdResp2>
 800a2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3720      	adds	r7, #32
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b088      	sub	sp, #32
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2f4:	2340      	movs	r3, #64	@ 0x40
 800a2f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a302:	f107 0308 	add.w	r3, r7, #8
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff fdc5 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	2103      	movs	r1, #3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f99c 	bl	800a650 <SDMMC_GetCmdResp6>
 800a318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a31a:	69fb      	ldr	r3, [r7, #28]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a332:	230d      	movs	r3, #13
 800a334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a336:	2340      	movs	r3, #64	@ 0x40
 800a338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a33e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a344:	f107 0308 	add.w	r3, r7, #8
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fda4 	bl	8009e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a350:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a354:	210d      	movs	r1, #13
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f806 	bl	800a368 <SDMMC_GetCmdResp1>
 800a35c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a35e:	69fb      	ldr	r3, [r7, #28]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	460b      	mov	r3, r1
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a376:	4b70      	ldr	r3, [pc, #448]	@ (800a538 <SDMMC_GetCmdResp1+0x1d0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a70      	ldr	r2, [pc, #448]	@ (800a53c <SDMMC_GetCmdResp1+0x1d4>)
 800a37c:	fba2 2303 	umull	r2, r3, r2, r3
 800a380:	0a5a      	lsrs	r2, r3, #9
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	61fa      	str	r2, [r7, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a394:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a398:	e0c9      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ef      	beq.n	800a38a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1ea      	bne.n	800a38a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3c6:	2304      	movs	r3, #4
 800a3c8:	e0b1      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e0a6      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	22c5      	movs	r2, #197	@ 0xc5
 800a3e4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7ff fd80 	bl	8009eec <SDMMC_GetCommandResponse>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d001      	beq.n	800a3fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e099      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fd82 	bl	8009f06 <SDMMC_GetResponse>
 800a402:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	4b4e      	ldr	r3, [pc, #312]	@ (800a540 <SDMMC_GetCmdResp1+0x1d8>)
 800a408:	4013      	ands	r3, r2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a40e:	2300      	movs	r3, #0
 800a410:	e08d      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	da02      	bge.n	800a41e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a41c:	e087      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a428:	2340      	movs	r3, #64	@ 0x40
 800a42a:	e080      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a436:	2380      	movs	r3, #128	@ 0x80
 800a438:	e079      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a448:	e071      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a458:	e069      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a468:	e061      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a474:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a478:	e059      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a488:	e051      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a498:	e049      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a4a8:	e041      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4b8:	e039      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a4c8:	e031      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a4d8:	e029      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a4e8:	e021      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a4f8:	e019      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a504:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a508:	e011      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a514:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a518:	e009      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f003 0308 	and.w	r3, r3, #8
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a524:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a528:	e001      	b.n	800a52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a52a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3720      	adds	r7, #32
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000008 	.word	0x20000008
 800a53c:	10624dd3 	.word	0x10624dd3
 800a540:	fdffe008 	.word	0xfdffe008

0800a544 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a54c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5cc <SDMMC_GetCmdResp2+0x88>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d0 <SDMMC_GetCmdResp2+0x8c>)
 800a552:	fba2 2303 	umull	r2, r3, r2, r3
 800a556:	0a5b      	lsrs	r3, r3, #9
 800a558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a55c:	fb02 f303 	mul.w	r3, r2, r3
 800a560:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1e5a      	subs	r2, r3, #1
 800a566:	60fa      	str	r2, [r7, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a56c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a570:	e026      	b.n	800a5c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a576:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0ef      	beq.n	800a562 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1ea      	bne.n	800a562 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d004      	beq.n	800a5a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2204      	movs	r2, #4
 800a59c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a59e:	2304      	movs	r3, #4
 800a5a0:	e00e      	b.n	800a5c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e003      	b.n	800a5c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	22c5      	movs	r2, #197	@ 0xc5
 800a5bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	20000008 	.word	0x20000008
 800a5d0:	10624dd3 	.word	0x10624dd3

0800a5d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a648 <SDMMC_GetCmdResp3+0x74>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1a      	ldr	r2, [pc, #104]	@ (800a64c <SDMMC_GetCmdResp3+0x78>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	0a5b      	lsrs	r3, r3, #9
 800a5e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ec:	fb02 f303 	mul.w	r3, r2, r3
 800a5f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	1e5a      	subs	r2, r3, #1
 800a5f6:	60fa      	str	r2, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a600:	e01b      	b.n	800a63a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a606:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0ef      	beq.n	800a5f2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1ea      	bne.n	800a5f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d004      	beq.n	800a632 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2204      	movs	r2, #4
 800a62c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a62e:	2304      	movs	r3, #4
 800a630:	e003      	b.n	800a63a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	22c5      	movs	r2, #197	@ 0xc5
 800a636:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000008 	.word	0x20000008
 800a64c:	10624dd3 	.word	0x10624dd3

0800a650 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	460b      	mov	r3, r1
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a65e:	4b35      	ldr	r3, [pc, #212]	@ (800a734 <SDMMC_GetCmdResp6+0xe4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a35      	ldr	r2, [pc, #212]	@ (800a738 <SDMMC_GetCmdResp6+0xe8>)
 800a664:	fba2 2303 	umull	r2, r3, r2, r3
 800a668:	0a5b      	lsrs	r3, r3, #9
 800a66a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66e:	fb02 f303 	mul.w	r3, r2, r3
 800a672:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	1e5a      	subs	r2, r3, #1
 800a678:	61fa      	str	r2, [r7, #28]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a67e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a682:	e052      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a688:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0ef      	beq.n	800a674 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1ea      	bne.n	800a674 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d004      	beq.n	800a6b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	e03a      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d004      	beq.n	800a6ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e02f      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff fc0e 	bl	8009eec <SDMMC_GetCommandResponse>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d001      	beq.n	800a6de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e025      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	22c5      	movs	r2, #197	@ 0xc5
 800a6e2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fc0d 	bl	8009f06 <SDMMC_GetResponse>
 800a6ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d106      	bne.n	800a706 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a702:	2300      	movs	r3, #0
 800a704:	e011      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a714:	e009      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a724:	e001      	b.n	800a72a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a726:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3720      	adds	r7, #32
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000008 	.word	0x20000008
 800a738:	10624dd3 	.word	0x10624dd3

0800a73c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a744:	4b22      	ldr	r3, [pc, #136]	@ (800a7d0 <SDMMC_GetCmdResp7+0x94>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a22      	ldr	r2, [pc, #136]	@ (800a7d4 <SDMMC_GetCmdResp7+0x98>)
 800a74a:	fba2 2303 	umull	r2, r3, r2, r3
 800a74e:	0a5b      	lsrs	r3, r3, #9
 800a750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a754:	fb02 f303 	mul.w	r3, r2, r3
 800a758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	1e5a      	subs	r2, r3, #1
 800a75e:	60fa      	str	r2, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a768:	e02c      	b.n	800a7c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a76e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0ef      	beq.n	800a75a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1ea      	bne.n	800a75a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d004      	beq.n	800a79a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2204      	movs	r2, #4
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a796:	2304      	movs	r3, #4
 800a798:	e014      	b.n	800a7c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d004      	beq.n	800a7b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e009      	b.n	800a7c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2240      	movs	r2, #64	@ 0x40
 800a7c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7c2:	2300      	movs	r3, #0
  
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	20000008 	.word	0x20000008
 800a7d4:	10624dd3 	.word	0x10624dd3

0800a7d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7e0:	4b11      	ldr	r3, [pc, #68]	@ (800a828 <SDMMC_GetCmdError+0x50>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a11      	ldr	r2, [pc, #68]	@ (800a82c <SDMMC_GetCmdError+0x54>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	0a5b      	lsrs	r3, r3, #9
 800a7ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
 800a7f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	1e5a      	subs	r2, r3, #1
 800a7fa:	60fa      	str	r2, [r7, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a800:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a804:	e009      	b.n	800a81a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0f1      	beq.n	800a7f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	22c5      	movs	r2, #197	@ 0xc5
 800a816:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	20000008 	.word	0x20000008
 800a82c:	10624dd3 	.word	0x10624dd3

0800a830 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a834:	4904      	ldr	r1, [pc, #16]	@ (800a848 <MX_FATFS_Init+0x18>)
 800a836:	4805      	ldr	r0, [pc, #20]	@ (800a84c <MX_FATFS_Init+0x1c>)
 800a838:	f002 ffb4 	bl	800d7a4 <FATFS_LinkDriver>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <MX_FATFS_Init+0x20>)
 800a842:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a844:	bf00      	nop
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20005a28 	.word	0x20005a28
 800a84c:	08011544 	.word	0x08011544
 800a850:	20005a24 	.word	0x20005a24

0800a854 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a858:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a86e:	f000 f888 	bl	800a982 <BSP_SD_IsDetected>
 800a872:	4603      	mov	r3, r0
 800a874:	2b01      	cmp	r3, #1
 800a876:	d001      	beq.n	800a87c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a878:	2302      	movs	r3, #2
 800a87a:	e005      	b.n	800a888 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800a87c:	4804      	ldr	r0, [pc, #16]	@ (800a890 <BSP_SD_Init+0x2c>)
 800a87e:	f7fd fcae 	bl	80081de <HAL_SD_Init>
 800a882:	4603      	mov	r3, r0
 800a884:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a886:	79fb      	ldrb	r3, [r7, #7]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	200057a8 	.word	0x200057a8

0800a894 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	4806      	ldr	r0, [pc, #24]	@ (800a8c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a8ac:	f7fd fd50 	bl	8008350 <HAL_SD_ReadBlocks_DMA>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200057a8 	.word	0x200057a8

0800a8c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	68f9      	ldr	r1, [r7, #12]
 800a8de:	4806      	ldr	r0, [pc, #24]	@ (800a8f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a8e0:	f7fd fe18 	bl	8008514 <HAL_SD_WriteBlocks_DMA>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	200057a8 	.word	0x200057a8

0800a8fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a900:	4805      	ldr	r0, [pc, #20]	@ (800a918 <BSP_SD_GetCardState+0x1c>)
 800a902:	f7fe fa3d 	bl	8008d80 <HAL_SD_GetCardState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b04      	cmp	r3, #4
 800a90a:	bf14      	ite	ne
 800a90c:	2301      	movne	r3, #1
 800a90e:	2300      	moveq	r3, #0
 800a910:	b2db      	uxtb	r3, r3
}
 800a912:	4618      	mov	r0, r3
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200057a8 	.word	0x200057a8

0800a91c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	4803      	ldr	r0, [pc, #12]	@ (800a934 <BSP_SD_GetCardInfo+0x18>)
 800a928:	f7fe f9fe 	bl	8008d28 <HAL_SD_GetCardInfo>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200057a8 	.word	0x200057a8

0800a938 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a940:	f000 f818 	bl	800a974 <BSP_SD_AbortCallback>
}
 800a944:	bf00      	nop
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a954:	f000 f9c4 	bl	800ace0 <BSP_SD_WriteCpltCallback>
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a968:	f000 f9c8 	bl	800acfc <BSP_SD_ReadCpltCallback>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0

}
 800a978:	bf00      	nop
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a988:	2301      	movs	r3, #1
 800a98a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a98c:	f000 f80c 	bl	800a9a8 <BSP_PlatformIsDetected>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a996:	2300      	movs	r3, #0
 800a998:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	b2db      	uxtb	r3, r3
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a9b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a9b6:	4806      	ldr	r0, [pc, #24]	@ (800a9d0 <BSP_PlatformIsDetected+0x28>)
 800a9b8:	f7fa fdb0 	bl	800551c <HAL_GPIO_ReadPin>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	40022000 	.word	0x40022000

0800a9d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a9dc:	f002 ff7a 	bl	800d8d4 <osKernelSysTick>
 800a9e0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a9e2:	e006      	b.n	800a9f2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9e4:	f7ff ff8a 	bl	800a8fc <BSP_SD_GetCardState>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e009      	b.n	800aa06 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a9f2:	f002 ff6f 	bl	800d8d4 <osKernelSysTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d8f0      	bhi.n	800a9e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <SD_CheckStatus+0x38>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa20:	f7ff ff6c 	bl	800a8fc <BSP_SD_GetCardState>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d107      	bne.n	800aa3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	@ (800aa48 <SD_CheckStatus+0x38>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	4b04      	ldr	r3, [pc, #16]	@ (800aa48 <SD_CheckStatus+0x38>)
 800aa38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aa3a:	4b03      	ldr	r3, [pc, #12]	@ (800aa48 <SD_CheckStatus+0x38>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b2db      	uxtb	r3, r3
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20000041 	.word	0x20000041

0800aa4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aa4c:	b590      	push	{r4, r7, lr}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aa56:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <SD_initialize+0x8c>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800aa5c:	f002 ff2e 	bl	800d8bc <osKernelRunning>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d030      	beq.n	800aac8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800aa66:	f7ff fefd 	bl	800a864 <BSP_SD_Init>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d107      	bne.n	800aa80 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff ffcc 	bl	800aa10 <SD_CheckStatus>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4b16      	ldr	r3, [pc, #88]	@ (800aad8 <SD_initialize+0x8c>)
 800aa7e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800aa80:	4b15      	ldr	r3, [pc, #84]	@ (800aad8 <SD_initialize+0x8c>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d01e      	beq.n	800aac8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800aa8a:	4b14      	ldr	r3, [pc, #80]	@ (800aadc <SD_initialize+0x90>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10e      	bne.n	800aab0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800aa92:	4b13      	ldr	r3, [pc, #76]	@ (800aae0 <SD_initialize+0x94>)
 800aa94:	f107 0408 	add.w	r4, r7, #8
 800aa98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f003 f85c 	bl	800db62 <osMessageCreate>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4a0b      	ldr	r2, [pc, #44]	@ (800aadc <SD_initialize+0x90>)
 800aaae:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800aab0:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <SD_initialize+0x90>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d107      	bne.n	800aac8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800aab8:	4b07      	ldr	r3, [pc, #28]	@ (800aad8 <SD_initialize+0x8c>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	4b04      	ldr	r3, [pc, #16]	@ (800aad8 <SD_initialize+0x8c>)
 800aac6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800aac8:	4b03      	ldr	r3, [pc, #12]	@ (800aad8 <SD_initialize+0x8c>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000041 	.word	0x20000041
 800aadc:	20005e90 	.word	0x20005e90
 800aae0:	080114c8 	.word	0x080114c8

0800aae4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff ff8d 	bl	800aa10 <SD_CheckStatus>
 800aaf6:	4603      	mov	r3, r0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08a      	sub	sp, #40	@ 0x28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60b9      	str	r1, [r7, #8]
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab16:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ab1a:	f7ff ff5b 	bl	800a9d4 <SD_CheckStatusWithTimeout>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da02      	bge.n	800ab2a <SD_read+0x2a>
  {
    return res;
 800ab24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab28:	e032      	b.n	800ab90 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	68b8      	ldr	r0, [r7, #8]
 800ab30:	f7ff feb0 	bl	800a894 <BSP_SD_ReadBlocks_DMA>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800ab3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d124      	bne.n	800ab8c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ab42:	4b15      	ldr	r3, [pc, #84]	@ (800ab98 <SD_read+0x98>)
 800ab44:	6819      	ldr	r1, [r3, #0]
 800ab46:	f107 0314 	add.w	r3, r7, #20
 800ab4a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f003 f870 	bl	800dc34 <osMessageGet>

    if (event.status == osEventMessage)
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b10      	cmp	r3, #16
 800ab58:	d118      	bne.n	800ab8c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d115      	bne.n	800ab8c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ab60:	f002 feb8 	bl	800d8d4 <osKernelSysTick>
 800ab64:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ab66:	e008      	b.n	800ab7a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab68:	f7ff fec8 	bl	800a8fc <BSP_SD_GetCardState>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <SD_read+0x7a>
              {
                res = RES_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ab78:	e008      	b.n	800ab8c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ab7a:	f002 feab 	bl	800d8d4 <osKernelSysTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d9ed      	bls.n	800ab68 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ab8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3728      	adds	r7, #40	@ 0x28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	20005e90 	.word	0x20005e90

0800ab9c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	@ 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800abb2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800abb6:	f7ff ff0d 	bl	800a9d4 <SD_CheckStatusWithTimeout>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da02      	bge.n	800abc6 <SD_write+0x2a>
  {
    return res;
 800abc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abc4:	e02e      	b.n	800ac24 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	68b8      	ldr	r0, [r7, #8]
 800abcc:	f7ff fe7c 	bl	800a8c8 <BSP_SD_WriteBlocks_DMA>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d124      	bne.n	800ac20 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800abd6:	4b15      	ldr	r3, [pc, #84]	@ (800ac2c <SD_write+0x90>)
 800abd8:	6819      	ldr	r1, [r3, #0]
 800abda:	f107 0314 	add.w	r3, r7, #20
 800abde:	f247 5230 	movw	r2, #30000	@ 0x7530
 800abe2:	4618      	mov	r0, r3
 800abe4:	f003 f826 	bl	800dc34 <osMessageGet>

    if (event.status == osEventMessage)
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2b10      	cmp	r3, #16
 800abec:	d118      	bne.n	800ac20 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d115      	bne.n	800ac20 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800abf4:	f002 fe6e 	bl	800d8d4 <osKernelSysTick>
 800abf8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800abfa:	e008      	b.n	800ac0e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800abfc:	f7ff fe7e 	bl	800a8fc <BSP_SD_GetCardState>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <SD_write+0x72>
          {
            res = RES_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ac0c:	e008      	b.n	800ac20 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ac0e:	f002 fe61 	bl	800d8d4 <osKernelSysTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d9ed      	bls.n	800abfc <SD_write+0x60>
    }

  }
#endif

  return res;
 800ac20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3728      	adds	r7, #40	@ 0x28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20005e90 	.word	0x20005e90

0800ac30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	@ 0x30
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	603a      	str	r2, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac46:	4b25      	ldr	r3, [pc, #148]	@ (800acdc <SD_ioctl+0xac>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <SD_ioctl+0x28>
 800ac54:	2303      	movs	r3, #3
 800ac56:	e03c      	b.n	800acd2 <SD_ioctl+0xa2>

  switch (cmd)
 800ac58:	79bb      	ldrb	r3, [r7, #6]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d834      	bhi.n	800acc8 <SD_ioctl+0x98>
 800ac5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <SD_ioctl+0x34>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac7d 	.word	0x0800ac7d
 800ac6c:	0800ac95 	.word	0x0800ac95
 800ac70:	0800acaf 	.word	0x0800acaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ac7a:	e028      	b.n	800acce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac7c:	f107 030c 	add.w	r3, r7, #12
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fe4b 	bl	800a91c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ac92:	e01c      	b.n	800acce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac94:	f107 030c 	add.w	r3, r7, #12
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fe3f 	bl	800a91c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800acac:	e00f      	b.n	800acce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800acae:	f107 030c 	add.w	r3, r7, #12
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff fe32 	bl	800a91c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acba:	0a5a      	lsrs	r2, r3, #9
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800acc6:	e002      	b.n	800acce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800acc8:	2304      	movs	r3, #4
 800acca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800acce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3730      	adds	r7, #48	@ 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000041 	.word	0x20000041

0800ace0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800ace4:	4b04      	ldr	r3, [pc, #16]	@ (800acf8 <BSP_SD_WriteCpltCallback+0x18>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	2102      	movs	r1, #2
 800acec:	4618      	mov	r0, r3
 800acee:	f002 ff61 	bl	800dbb4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800acf2:	bf00      	nop
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20005e90 	.word	0x20005e90

0800acfc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ad00:	4b04      	ldr	r3, [pc, #16]	@ (800ad14 <BSP_SD_ReadCpltCallback+0x18>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2200      	movs	r2, #0
 800ad06:	2101      	movs	r1, #1
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 ff53 	bl	800dbb4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ad0e:	bf00      	nop
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20005e90 	.word	0x20005e90

0800ad18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	4a08      	ldr	r2, [pc, #32]	@ (800ad48 <disk_status+0x30>)
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	79fa      	ldrb	r2, [r7, #7]
 800ad30:	4905      	ldr	r1, [pc, #20]	@ (800ad48 <disk_status+0x30>)
 800ad32:	440a      	add	r2, r1
 800ad34:	7a12      	ldrb	r2, [r2, #8]
 800ad36:	4610      	mov	r0, r2
 800ad38:	4798      	blx	r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20005ebc 	.word	0x20005ebc

0800ad4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	4a0d      	ldr	r2, [pc, #52]	@ (800ad94 <disk_initialize+0x48>)
 800ad5e:	5cd3      	ldrb	r3, [r2, r3]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d111      	bne.n	800ad88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	4a0b      	ldr	r2, [pc, #44]	@ (800ad94 <disk_initialize+0x48>)
 800ad68:	2101      	movs	r1, #1
 800ad6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	4a09      	ldr	r2, [pc, #36]	@ (800ad94 <disk_initialize+0x48>)
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	79fa      	ldrb	r2, [r7, #7]
 800ad7a:	4906      	ldr	r1, [pc, #24]	@ (800ad94 <disk_initialize+0x48>)
 800ad7c:	440a      	add	r2, r1
 800ad7e:	7a12      	ldrb	r2, [r2, #8]
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20005ebc 	.word	0x20005ebc

0800ad98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4a0a      	ldr	r2, [pc, #40]	@ (800add4 <disk_read+0x3c>)
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	689c      	ldr	r4, [r3, #8]
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	4a07      	ldr	r2, [pc, #28]	@ (800add4 <disk_read+0x3c>)
 800adb8:	4413      	add	r3, r2
 800adba:	7a18      	ldrb	r0, [r3, #8]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	68b9      	ldr	r1, [r7, #8]
 800adc2:	47a0      	blx	r4
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]
  return res;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	bd90      	pop	{r4, r7, pc}
 800add2:	bf00      	nop
 800add4:	20005ebc 	.word	0x20005ebc

0800add8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	607a      	str	r2, [r7, #4]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4a0a      	ldr	r2, [pc, #40]	@ (800ae14 <disk_write+0x3c>)
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68dc      	ldr	r4, [r3, #12]
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	4a07      	ldr	r2, [pc, #28]	@ (800ae14 <disk_write+0x3c>)
 800adf8:	4413      	add	r3, r2
 800adfa:	7a18      	ldrb	r0, [r3, #8]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	47a0      	blx	r4
 800ae04:	4603      	mov	r3, r0
 800ae06:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd90      	pop	{r4, r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20005ebc 	.word	0x20005ebc

0800ae18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	603a      	str	r2, [r7, #0]
 800ae22:	71fb      	strb	r3, [r7, #7]
 800ae24:	460b      	mov	r3, r1
 800ae26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae28:	79fb      	ldrb	r3, [r7, #7]
 800ae2a:	4a09      	ldr	r2, [pc, #36]	@ (800ae50 <disk_ioctl+0x38>)
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	4906      	ldr	r1, [pc, #24]	@ (800ae50 <disk_ioctl+0x38>)
 800ae38:	440a      	add	r2, r1
 800ae3a:	7a10      	ldrb	r0, [r2, #8]
 800ae3c:	79b9      	ldrb	r1, [r7, #6]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20005ebc 	.word	0x20005ebc

0800ae54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae68:	021b      	lsls	r3, r3, #8
 800ae6a:	b21a      	sxth	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	b21b      	sxth	r3, r3
 800ae72:	4313      	orrs	r3, r2
 800ae74:	b21b      	sxth	r3, r3
 800ae76:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ae78:	89fb      	ldrh	r3, [r7, #14]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ae86:	b480      	push	{r7}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3303      	adds	r3, #3
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	021b      	lsls	r3, r3, #8
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	7812      	ldrb	r2, [r2, #0]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	021b      	lsls	r3, r3, #8
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	3201      	adds	r2, #1
 800aeac:	7812      	ldrb	r2, [r2, #0]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	021b      	lsls	r3, r3, #8
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	7812      	ldrb	r2, [r2, #0]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
	return rv;
 800aebe:	68fb      	ldr	r3, [r7, #12]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	887a      	ldrh	r2, [r7, #2]
 800aee0:	b2d2      	uxtb	r2, r2
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	887b      	ldrh	r3, [r7, #2]
 800aee6:	0a1b      	lsrs	r3, r3, #8
 800aee8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	887a      	ldrh	r2, [r7, #2]
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	701a      	strb	r2, [r3, #0]
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	607a      	str	r2, [r7, #4]
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	b2d2      	uxtb	r2, r2
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	0a1b      	lsrs	r3, r3, #8
 800af2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	b2d2      	uxtb	r2, r2
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800af5a:	b480      	push	{r7}
 800af5c:	b087      	sub	sp, #28
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00d      	beq.n	800af90 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	1c53      	adds	r3, r2, #1
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	1c59      	adds	r1, r3, #1
 800af7e:	6179      	str	r1, [r7, #20]
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3b01      	subs	r3, #1
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f1      	bne.n	800af74 <mem_cpy+0x1a>
	}
}
 800af90:	bf00      	nop
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	617a      	str	r2, [r7, #20]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	b2d2      	uxtb	r2, r2
 800afb6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3b01      	subs	r3, #1
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1f3      	bne.n	800afac <mem_set+0x10>
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800afd2:	b480      	push	{r7}
 800afd4:	b089      	sub	sp, #36	@ 0x24
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	61fb      	str	r3, [r7, #28]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	61fa      	str	r2, [r7, #28]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	4619      	mov	r1, r3
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	61ba      	str	r2, [r7, #24]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	1acb      	subs	r3, r1, r3
 800affe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3b01      	subs	r3, #1
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <mem_cmp+0x40>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0eb      	beq.n	800afea <mem_cmp+0x18>

	return r;
 800b012:	697b      	ldr	r3, [r7, #20]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3724      	adds	r7, #36	@ 0x24
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b02a:	e002      	b.n	800b032 <chk_chr+0x12>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3301      	adds	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <chk_chr+0x26>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4293      	cmp	r3, r2
 800b044:	d1f2      	bne.n	800b02c <chk_chr+0xc>
	return *str;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	781b      	ldrb	r3, [r3, #0]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <lock_fs+0x22>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 fbd6 	bl	800d81a <ff_req_grant>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <lock_fs+0x22>
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <lock_fs+0x24>
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00d      	beq.n	800b0b0 <unlock_fs+0x2e>
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	2b0c      	cmp	r3, #12
 800b098:	d00a      	beq.n	800b0b0 <unlock_fs+0x2e>
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	2b0b      	cmp	r3, #11
 800b09e:	d007      	beq.n	800b0b0 <unlock_fs+0x2e>
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b0f      	cmp	r3, #15
 800b0a4:	d004      	beq.n	800b0b0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 fbca 	bl	800d844 <ff_rel_grant>
	}
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60bb      	str	r3, [r7, #8]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e029      	b.n	800b120 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b0cc:	4a27      	ldr	r2, [pc, #156]	@ (800b16c <chk_lock+0xb4>)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	4413      	add	r3, r2
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d01d      	beq.n	800b116 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0da:	4a24      	ldr	r2, [pc, #144]	@ (800b16c <chk_lock+0xb4>)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	4413      	add	r3, r2
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d116      	bne.n	800b11a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b0ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b16c <chk_lock+0xb4>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	4413      	add	r3, r2
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d10c      	bne.n	800b11a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b100:	4a1a      	ldr	r2, [pc, #104]	@ (800b16c <chk_lock+0xb4>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	4413      	add	r3, r2
 800b108:	3308      	adds	r3, #8
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b110:	429a      	cmp	r2, r3
 800b112:	d102      	bne.n	800b11a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b114:	e007      	b.n	800b126 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3301      	adds	r3, #1
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d9d2      	bls.n	800b0cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d109      	bne.n	800b140 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <chk_lock+0x80>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d101      	bne.n	800b13c <chk_lock+0x84>
 800b138:	2300      	movs	r3, #0
 800b13a:	e010      	b.n	800b15e <chk_lock+0xa6>
 800b13c:	2312      	movs	r3, #18
 800b13e:	e00e      	b.n	800b15e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d108      	bne.n	800b158 <chk_lock+0xa0>
 800b146:	4a09      	ldr	r2, [pc, #36]	@ (800b16c <chk_lock+0xb4>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	4413      	add	r3, r2
 800b14e:	330c      	adds	r3, #12
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b156:	d101      	bne.n	800b15c <chk_lock+0xa4>
 800b158:	2310      	movs	r3, #16
 800b15a:	e000      	b.n	800b15e <chk_lock+0xa6>
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	20005e9c 	.word	0x20005e9c

0800b170 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b176:	2300      	movs	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	e002      	b.n	800b182 <enq_lock+0x12>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3301      	adds	r3, #1
 800b180:	607b      	str	r3, [r7, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d806      	bhi.n	800b196 <enq_lock+0x26>
 800b188:	4a09      	ldr	r2, [pc, #36]	@ (800b1b0 <enq_lock+0x40>)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	4413      	add	r3, r2
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1f2      	bne.n	800b17c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	bf14      	ite	ne
 800b19c:	2301      	movne	r3, #1
 800b19e:	2300      	moveq	r3, #0
 800b1a0:	b2db      	uxtb	r3, r3
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20005e9c 	.word	0x20005e9c

0800b1b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	e01f      	b.n	800b204 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b1c4:	4a41      	ldr	r2, [pc, #260]	@ (800b2cc <inc_lock+0x118>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	011b      	lsls	r3, r3, #4
 800b1ca:	4413      	add	r3, r2
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d113      	bne.n	800b1fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b1d6:	4a3d      	ldr	r2, [pc, #244]	@ (800b2cc <inc_lock+0x118>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	4413      	add	r3, r2
 800b1de:	3304      	adds	r3, #4
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d109      	bne.n	800b1fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b1ea:	4a38      	ldr	r2, [pc, #224]	@ (800b2cc <inc_lock+0x118>)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	4413      	add	r3, r2
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d006      	beq.n	800b20c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3301      	adds	r3, #1
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d9dc      	bls.n	800b1c4 <inc_lock+0x10>
 800b20a:	e000      	b.n	800b20e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b20c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d132      	bne.n	800b27a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e002      	b.n	800b220 <inc_lock+0x6c>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d806      	bhi.n	800b234 <inc_lock+0x80>
 800b226:	4a29      	ldr	r2, [pc, #164]	@ (800b2cc <inc_lock+0x118>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	4413      	add	r3, r2
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1f2      	bne.n	800b21a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d101      	bne.n	800b23e <inc_lock+0x8a>
 800b23a:	2300      	movs	r3, #0
 800b23c:	e040      	b.n	800b2c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	4922      	ldr	r1, [pc, #136]	@ (800b2cc <inc_lock+0x118>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	440b      	add	r3, r1
 800b24a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	491e      	ldr	r1, [pc, #120]	@ (800b2cc <inc_lock+0x118>)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	011b      	lsls	r3, r3, #4
 800b256:	440b      	add	r3, r1
 800b258:	3304      	adds	r3, #4
 800b25a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	695a      	ldr	r2, [r3, #20]
 800b260:	491a      	ldr	r1, [pc, #104]	@ (800b2cc <inc_lock+0x118>)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	011b      	lsls	r3, r3, #4
 800b266:	440b      	add	r3, r1
 800b268:	3308      	adds	r3, #8
 800b26a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b26c:	4a17      	ldr	r2, [pc, #92]	@ (800b2cc <inc_lock+0x118>)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	4413      	add	r3, r2
 800b274:	330c      	adds	r3, #12
 800b276:	2200      	movs	r2, #0
 800b278:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <inc_lock+0xe0>
 800b280:	4a12      	ldr	r2, [pc, #72]	@ (800b2cc <inc_lock+0x118>)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	4413      	add	r3, r2
 800b288:	330c      	adds	r3, #12
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <inc_lock+0xe0>
 800b290:	2300      	movs	r3, #0
 800b292:	e015      	b.n	800b2c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d108      	bne.n	800b2ac <inc_lock+0xf8>
 800b29a:	4a0c      	ldr	r2, [pc, #48]	@ (800b2cc <inc_lock+0x118>)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	4413      	add	r3, r2
 800b2a2:	330c      	adds	r3, #12
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	e001      	b.n	800b2b0 <inc_lock+0xfc>
 800b2ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2b0:	4906      	ldr	r1, [pc, #24]	@ (800b2cc <inc_lock+0x118>)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	440b      	add	r3, r1
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	20005e9c 	.word	0x20005e9c

0800b2d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d825      	bhi.n	800b330 <dec_lock+0x60>
		n = Files[i].ctr;
 800b2e4:	4a17      	ldr	r2, [pc, #92]	@ (800b344 <dec_lock+0x74>)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	4413      	add	r3, r2
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b2f2:	89fb      	ldrh	r3, [r7, #14]
 800b2f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2f8:	d101      	bne.n	800b2fe <dec_lock+0x2e>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b2fe:	89fb      	ldrh	r3, [r7, #14]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <dec_lock+0x3a>
 800b304:	89fb      	ldrh	r3, [r7, #14]
 800b306:	3b01      	subs	r3, #1
 800b308:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b30a:	4a0e      	ldr	r2, [pc, #56]	@ (800b344 <dec_lock+0x74>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	4413      	add	r3, r2
 800b312:	330c      	adds	r3, #12
 800b314:	89fa      	ldrh	r2, [r7, #14]
 800b316:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b318:	89fb      	ldrh	r3, [r7, #14]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <dec_lock+0x5a>
 800b31e:	4a09      	ldr	r2, [pc, #36]	@ (800b344 <dec_lock+0x74>)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	4413      	add	r3, r2
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	737b      	strb	r3, [r7, #13]
 800b32e:	e001      	b.n	800b334 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b330:	2302      	movs	r3, #2
 800b332:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b334:	7b7b      	ldrb	r3, [r7, #13]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20005e9c 	.word	0x20005e9c

0800b348 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b350:	2300      	movs	r3, #0
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e010      	b.n	800b378 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b356:	4a0d      	ldr	r2, [pc, #52]	@ (800b38c <clear_lock+0x44>)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	4413      	add	r3, r2
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d105      	bne.n	800b372 <clear_lock+0x2a>
 800b366:	4a09      	ldr	r2, [pc, #36]	@ (800b38c <clear_lock+0x44>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	4413      	add	r3, r2
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3301      	adds	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d9eb      	bls.n	800b356 <clear_lock+0xe>
	}
}
 800b37e:	bf00      	nop
 800b380:	bf00      	nop
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	20005e9c 	.word	0x20005e9c

0800b390 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	78db      	ldrb	r3, [r3, #3]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d034      	beq.n	800b40e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7858      	ldrb	r0, [r3, #1]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	f7ff fd0e 	bl	800add8 <disk_write>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	73fb      	strb	r3, [r7, #15]
 800b3c6:	e022      	b.n	800b40e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	1ad2      	subs	r2, r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d217      	bcs.n	800b40e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	789b      	ldrb	r3, [r3, #2]
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	e010      	b.n	800b408 <sync_window+0x78>
					wsect += fs->fsize;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7858      	ldrb	r0, [r3, #1]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	f7ff fceb 	bl	800add8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3b01      	subs	r3, #1
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d8eb      	bhi.n	800b3e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d01b      	beq.n	800b468 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff ffad 	bl	800b390 <sync_window>
 800b436:	4603      	mov	r3, r0
 800b438:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d113      	bne.n	800b468 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	7858      	ldrb	r0, [r3, #1]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b44a:	2301      	movs	r3, #1
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	f7ff fca3 	bl	800ad98 <disk_read>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b45e:	2301      	movs	r3, #1
 800b460:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff87 	bl	800b390 <sync_window>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d158      	bne.n	800b53e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b03      	cmp	r3, #3
 800b492:	d148      	bne.n	800b526 <sync_fs+0xb2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	791b      	ldrb	r3, [r3, #4]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d144      	bne.n	800b526 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3334      	adds	r3, #52	@ 0x34
 800b4a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fd78 	bl	800af9c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3334      	adds	r3, #52	@ 0x34
 800b4b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b4b4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fd07 	bl	800aecc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3334      	adds	r3, #52	@ 0x34
 800b4c2:	4921      	ldr	r1, [pc, #132]	@ (800b548 <sync_fs+0xd4>)
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fd1c 	bl	800af02 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3334      	adds	r3, #52	@ 0x34
 800b4ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b4d2:	491e      	ldr	r1, [pc, #120]	@ (800b54c <sync_fs+0xd8>)
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff fd14 	bl	800af02 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3334      	adds	r3, #52	@ 0x34
 800b4de:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f7ff fd0a 	bl	800af02 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3334      	adds	r3, #52	@ 0x34
 800b4f2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff fd00 	bl	800af02 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7858      	ldrb	r0, [r3, #1]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b51a:	2301      	movs	r3, #1
 800b51c:	f7ff fc5c 	bl	800add8 <disk_write>
			fs->fsi_flag = 0;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	2200      	movs	r2, #0
 800b52c:	2100      	movs	r1, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff fc72 	bl	800ae18 <disk_ioctl>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <sync_fs+0xca>
 800b53a:	2301      	movs	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	41615252 	.word	0x41615252
 800b54c:	61417272 	.word	0x61417272

0800b550 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	3b02      	subs	r3, #2
 800b55e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	3b02      	subs	r3, #2
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d301      	bcc.n	800b570 <clust2sect+0x20>
 800b56c:	2300      	movs	r3, #0
 800b56e:	e008      	b.n	800b582 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	895b      	ldrh	r3, [r3, #10]
 800b574:	461a      	mov	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	fb03 f202 	mul.w	r2, r3, r2
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b580:	4413      	add	r3, r2
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d904      	bls.n	800b5ae <get_fat+0x20>
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d302      	bcc.n	800b5b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	e08e      	b.n	800b6d2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d061      	beq.n	800b686 <get_fat+0xf8>
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	dc7b      	bgt.n	800b6be <get_fat+0x130>
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d002      	beq.n	800b5d0 <get_fat+0x42>
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d041      	beq.n	800b652 <get_fat+0xc4>
 800b5ce:	e076      	b.n	800b6be <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	0a5b      	lsrs	r3, r3, #9
 800b5e6:	4413      	add	r3, r2
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6938      	ldr	r0, [r7, #16]
 800b5ec:	f7ff ff14 	bl	800b418 <move_window>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d166      	bne.n	800b6c4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	60fa      	str	r2, [r7, #12]
 800b5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4413      	add	r3, r2
 800b604:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b608:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	0a5b      	lsrs	r3, r3, #9
 800b612:	4413      	add	r3, r2
 800b614:	4619      	mov	r1, r3
 800b616:	6938      	ldr	r0, [r7, #16]
 800b618:	f7ff fefe 	bl	800b418 <move_window>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d152      	bne.n	800b6c8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	4413      	add	r3, r2
 800b62c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b630:	021b      	lsls	r3, r3, #8
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	4313      	orrs	r3, r2
 800b636:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <get_fat+0xba>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	091b      	lsrs	r3, r3, #4
 800b646:	e002      	b.n	800b64e <get_fat+0xc0>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b64e:	617b      	str	r3, [r7, #20]
			break;
 800b650:	e03f      	b.n	800b6d2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	0a1b      	lsrs	r3, r3, #8
 800b65a:	4413      	add	r3, r2
 800b65c:	4619      	mov	r1, r3
 800b65e:	6938      	ldr	r0, [r7, #16]
 800b660:	f7ff feda 	bl	800b418 <move_window>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d130      	bne.n	800b6cc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b678:	4413      	add	r3, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff fbea 	bl	800ae54 <ld_word>
 800b680:	4603      	mov	r3, r0
 800b682:	617b      	str	r3, [r7, #20]
			break;
 800b684:	e025      	b.n	800b6d2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	09db      	lsrs	r3, r3, #7
 800b68e:	4413      	add	r3, r2
 800b690:	4619      	mov	r1, r3
 800b692:	6938      	ldr	r0, [r7, #16]
 800b694:	f7ff fec0 	bl	800b418 <move_window>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d118      	bne.n	800b6d0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fbe9 	bl	800ae86 <ld_dword>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b6ba:	617b      	str	r3, [r7, #20]
			break;
 800b6bc:	e009      	b.n	800b6d2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b6be:	2301      	movs	r3, #1
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	e006      	b.n	800b6d2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6c4:	bf00      	nop
 800b6c6:	e004      	b.n	800b6d2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6c8:	bf00      	nop
 800b6ca:	e002      	b.n	800b6d2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6cc:	bf00      	nop
 800b6ce:	e000      	b.n	800b6d2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6d0:	bf00      	nop
		}
	}

	return val;
 800b6d2:	697b      	ldr	r3, [r7, #20]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b6dc:	b590      	push	{r4, r7, lr}
 800b6de:	b089      	sub	sp, #36	@ 0x24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	f240 80d9 	bls.w	800b8a6 <put_fat+0x1ca>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f080 80d3 	bcs.w	800b8a6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b03      	cmp	r3, #3
 800b706:	f000 8096 	beq.w	800b836 <put_fat+0x15a>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	f300 80cb 	bgt.w	800b8a6 <put_fat+0x1ca>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d002      	beq.n	800b71a <put_fat+0x3e>
 800b714:	2b02      	cmp	r3, #2
 800b716:	d06e      	beq.n	800b7f6 <put_fat+0x11a>
 800b718:	e0c5      	b.n	800b8a6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	61bb      	str	r3, [r7, #24]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	4413      	add	r3, r2
 800b726:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	0a5b      	lsrs	r3, r3, #9
 800b730:	4413      	add	r3, r2
 800b732:	4619      	mov	r1, r3
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fe6f 	bl	800b418 <move_window>
 800b73a:	4603      	mov	r3, r0
 800b73c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 80a9 	bne.w	800b898 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	1c59      	adds	r1, r3, #1
 800b750:	61b9      	str	r1, [r7, #24]
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	4413      	add	r3, r2
 800b758:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00d      	beq.n	800b780 <put_fat+0xa4>
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	b25a      	sxtb	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	b25b      	sxtb	r3, r3
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	b25b      	sxtb	r3, r3
 800b778:	4313      	orrs	r3, r2
 800b77a:	b25b      	sxtb	r3, r3
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	e001      	b.n	800b784 <put_fat+0xa8>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	0a5b      	lsrs	r3, r3, #9
 800b796:	4413      	add	r3, r2
 800b798:	4619      	mov	r1, r3
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff fe3c 	bl	800b418 <move_window>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7a4:	7ffb      	ldrb	r3, [r7, #31]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d178      	bne.n	800b89c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b6:	4413      	add	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <put_fat+0xf0>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	091b      	lsrs	r3, r3, #4
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	e00e      	b.n	800b7ea <put_fat+0x10e>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	b25b      	sxtb	r3, r3
 800b7d2:	f023 030f 	bic.w	r3, r3, #15
 800b7d6:	b25a      	sxtb	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	0a1b      	lsrs	r3, r3, #8
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	f003 030f 	and.w	r3, r3, #15
 800b7e2:	b25b      	sxtb	r3, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	b25b      	sxtb	r3, r3
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	70da      	strb	r2, [r3, #3]
			break;
 800b7f4:	e057      	b.n	800b8a6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	0a1b      	lsrs	r3, r3, #8
 800b7fe:	4413      	add	r3, r2
 800b800:	4619      	mov	r1, r3
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff fe08 	bl	800b418 <move_window>
 800b808:	4603      	mov	r3, r0
 800b80a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b80c:	7ffb      	ldrb	r3, [r7, #31]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d146      	bne.n	800b8a0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b820:	4413      	add	r3, r2
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	b292      	uxth	r2, r2
 800b826:	4611      	mov	r1, r2
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fb4f 	bl	800aecc <st_word>
			fs->wflag = 1;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	70da      	strb	r2, [r3, #3]
			break;
 800b834:	e037      	b.n	800b8a6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	09db      	lsrs	r3, r3, #7
 800b83e:	4413      	add	r3, r2
 800b840:	4619      	mov	r1, r3
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fde8 	bl	800b418 <move_window>
 800b848:	4603      	mov	r3, r0
 800b84a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b84c:	7ffb      	ldrb	r3, [r7, #31]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d128      	bne.n	800b8a4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b866:	4413      	add	r3, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff fb0c 	bl	800ae86 <ld_dword>
 800b86e:	4603      	mov	r3, r0
 800b870:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b874:	4323      	orrs	r3, r4
 800b876:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b886:	4413      	add	r3, r2
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fb39 	bl	800af02 <st_dword>
			fs->wflag = 1;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	70da      	strb	r2, [r3, #3]
			break;
 800b896:	e006      	b.n	800b8a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b898:	bf00      	nop
 800b89a:	e004      	b.n	800b8a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b89c:	bf00      	nop
 800b89e:	e002      	b.n	800b8a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8a0:	bf00      	nop
 800b8a2:	e000      	b.n	800b8a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8a4:	bf00      	nop
		}
	}
	return res;
 800b8a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3724      	adds	r7, #36	@ 0x24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd90      	pop	{r4, r7, pc}

0800b8b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d904      	bls.n	800b8d6 <remove_chain+0x26>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d301      	bcc.n	800b8da <remove_chain+0x2a>
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e04b      	b.n	800b972 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00c      	beq.n	800b8fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	69b8      	ldr	r0, [r7, #24]
 800b8e8:	f7ff fef8 	bl	800b6dc <put_fat>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b8f0:	7ffb      	ldrb	r3, [r7, #31]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <remove_chain+0x4a>
 800b8f6:	7ffb      	ldrb	r3, [r7, #31]
 800b8f8:	e03b      	b.n	800b972 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fe46 	bl	800b58e <get_fat>
 800b902:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d031      	beq.n	800b96e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d101      	bne.n	800b914 <remove_chain+0x64>
 800b910:	2302      	movs	r3, #2
 800b912:	e02e      	b.n	800b972 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d101      	bne.n	800b920 <remove_chain+0x70>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e028      	b.n	800b972 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b920:	2200      	movs	r2, #0
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	69b8      	ldr	r0, [r7, #24]
 800b926:	f7ff fed9 	bl	800b6dc <put_fat>
 800b92a:	4603      	mov	r3, r0
 800b92c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b92e:	7ffb      	ldrb	r3, [r7, #31]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <remove_chain+0x88>
 800b934:	7ffb      	ldrb	r3, [r7, #31]
 800b936:	e01c      	b.n	800b972 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	695a      	ldr	r2, [r3, #20]
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	3b02      	subs	r3, #2
 800b942:	429a      	cmp	r2, r3
 800b944:	d20b      	bcs.n	800b95e <remove_chain+0xae>
			fs->free_clst++;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	791b      	ldrb	r3, [r3, #4]
 800b954:	f043 0301 	orr.w	r3, r3, #1
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d3c6      	bcc.n	800b8fa <remove_chain+0x4a>
 800b96c:	e000      	b.n	800b970 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b96e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3720      	adds	r7, #32
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b088      	sub	sp, #32
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <create_chain+0x2c>
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	69ba      	ldr	r2, [r7, #24]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d31b      	bcc.n	800b9de <create_chain+0x64>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	61bb      	str	r3, [r7, #24]
 800b9aa:	e018      	b.n	800b9de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fded 	bl	800b58e <get_fat>
 800b9b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d801      	bhi.n	800b9c0 <create_chain+0x46>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e070      	b.n	800baa2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c6:	d101      	bne.n	800b9cc <create_chain+0x52>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	e06a      	b.n	800baa2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d201      	bcs.n	800b9da <create_chain+0x60>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	e063      	b.n	800baa2 <create_chain+0x128>
		scl = clst;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d307      	bcc.n	800ba02 <create_chain+0x88>
				ncl = 2;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d901      	bls.n	800ba02 <create_chain+0x88>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e04f      	b.n	800baa2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ba02:	69f9      	ldr	r1, [r7, #28]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fdc2 	bl	800b58e <get_fat>
 800ba0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00e      	beq.n	800ba30 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d003      	beq.n	800ba20 <create_chain+0xa6>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1e:	d101      	bne.n	800ba24 <create_chain+0xaa>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	e03e      	b.n	800baa2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d1da      	bne.n	800b9e2 <create_chain+0x68>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e038      	b.n	800baa2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ba30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ba32:	f04f 32ff 	mov.w	r2, #4294967295
 800ba36:	69f9      	ldr	r1, [r7, #28]
 800ba38:	6938      	ldr	r0, [r7, #16]
 800ba3a:	f7ff fe4f 	bl	800b6dc <put_fat>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d109      	bne.n	800ba5c <create_chain+0xe2>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6938      	ldr	r0, [r7, #16]
 800ba54:	f7ff fe42 	bl	800b6dc <put_fat>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d116      	bne.n	800ba90 <create_chain+0x116>
		fs->last_clst = ncl;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	69fa      	ldr	r2, [r7, #28]
 800ba66:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	695a      	ldr	r2, [r3, #20]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	3b02      	subs	r3, #2
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d804      	bhi.n	800ba80 <create_chain+0x106>
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	1e5a      	subs	r2, r3, #1
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	791b      	ldrb	r3, [r3, #4]
 800ba84:	f043 0301 	orr.w	r3, r3, #1
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	711a      	strb	r2, [r3, #4]
 800ba8e:	e007      	b.n	800baa0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d102      	bne.n	800ba9c <create_chain+0x122>
 800ba96:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9a:	e000      	b.n	800ba9e <create_chain+0x124>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800baa0:	69fb      	ldr	r3, [r7, #28]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3720      	adds	r7, #32
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800baaa:	b480      	push	{r7}
 800baac:	b087      	sub	sp, #28
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babe:	3304      	adds	r3, #4
 800bac0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	0a5b      	lsrs	r3, r3, #9
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	8952      	ldrh	r2, [r2, #10]
 800baca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bace:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	613a      	str	r2, [r7, #16]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <clmt_clust+0x3a>
 800bae0:	2300      	movs	r3, #0
 800bae2:	e010      	b.n	800bb06 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d307      	bcc.n	800bafc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	3304      	adds	r3, #4
 800baf8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bafa:	e7e9      	b.n	800bad0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bafc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	4413      	add	r3, r2
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb28:	d204      	bcs.n	800bb34 <dir_sdi+0x22>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	f003 031f 	and.w	r3, r3, #31
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bb34:	2302      	movs	r3, #2
 800bb36:	e063      	b.n	800bc00 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <dir_sdi+0x46>
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d902      	bls.n	800bb58 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	095b      	lsrs	r3, r3, #5
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	8912      	ldrh	r2, [r2, #8]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d301      	bcc.n	800bb6e <dir_sdi+0x5c>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e048      	b.n	800bc00 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	61da      	str	r2, [r3, #28]
 800bb76:	e029      	b.n	800bbcc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	895b      	ldrh	r3, [r3, #10]
 800bb7c:	025b      	lsls	r3, r3, #9
 800bb7e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bb80:	e019      	b.n	800bbb6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6979      	ldr	r1, [r7, #20]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fd01 	bl	800b58e <get_fat>
 800bb8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d101      	bne.n	800bb9a <dir_sdi+0x88>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e032      	b.n	800bc00 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d904      	bls.n	800bbaa <dir_sdi+0x98>
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d301      	bcc.n	800bbae <dir_sdi+0x9c>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	e028      	b.n	800bc00 <dir_sdi+0xee>
			ofs -= csz;
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d2e1      	bcs.n	800bb82 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bbbe:	6979      	ldr	r1, [r7, #20]
 800bbc0:	6938      	ldr	r0, [r7, #16]
 800bbc2:	f7ff fcc5 	bl	800b550 <clust2sect>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <dir_sdi+0xcc>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e010      	b.n	800bc00 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69da      	ldr	r2, [r3, #28]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	0a5b      	lsrs	r3, r3, #9
 800bbe6:	441a      	add	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf8:	441a      	add	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	3320      	adds	r3, #32
 800bc1e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <dir_next+0x28>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc2e:	d301      	bcc.n	800bc34 <dir_next+0x2c>
 800bc30:	2304      	movs	r3, #4
 800bc32:	e0aa      	b.n	800bd8a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f040 8098 	bne.w	800bd70 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10b      	bne.n	800bc6a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	095b      	lsrs	r3, r3, #5
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	8912      	ldrh	r2, [r2, #8]
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	f0c0 8088 	bcc.w	800bd70 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	61da      	str	r2, [r3, #28]
 800bc66:	2304      	movs	r3, #4
 800bc68:	e08f      	b.n	800bd8a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	0a5b      	lsrs	r3, r3, #9
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	8952      	ldrh	r2, [r2, #10]
 800bc72:	3a01      	subs	r2, #1
 800bc74:	4013      	ands	r3, r2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d17a      	bne.n	800bd70 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7ff fc83 	bl	800b58e <get_fat>
 800bc88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d801      	bhi.n	800bc94 <dir_next+0x8c>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e07a      	b.n	800bd8a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d101      	bne.n	800bca0 <dir_next+0x98>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e074      	b.n	800bd8a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d358      	bcc.n	800bd5c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	61da      	str	r2, [r3, #28]
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	e067      	b.n	800bd8a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f7ff fe59 	bl	800b97a <create_chain>
 800bcc8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <dir_next+0xcc>
 800bcd0:	2307      	movs	r3, #7
 800bcd2:	e05a      	b.n	800bd8a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d101      	bne.n	800bcde <dir_next+0xd6>
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e055      	b.n	800bd8a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d101      	bne.n	800bcea <dir_next+0xe2>
 800bce6:	2301      	movs	r3, #1
 800bce8:	e04f      	b.n	800bd8a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fb50 	bl	800b390 <sync_window>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <dir_next+0xf2>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e047      	b.n	800bd8a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3334      	adds	r3, #52	@ 0x34
 800bcfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd02:	2100      	movs	r1, #0
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff f949 	bl	800af9c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	613b      	str	r3, [r7, #16]
 800bd0e:	6979      	ldr	r1, [r7, #20]
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7ff fc1d 	bl	800b550 <clust2sect>
 800bd16:	4602      	mov	r2, r0
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd1c:	e012      	b.n	800bd44 <dir_next+0x13c>
						fs->wflag = 1;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f7ff fb33 	bl	800b390 <sync_window>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <dir_next+0x12c>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e02a      	b.n	800bd8a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	3301      	adds	r3, #1
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	895b      	ldrh	r3, [r3, #10]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d3e6      	bcc.n	800bd1e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	1ad2      	subs	r2, r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bd62:	6979      	ldr	r1, [r7, #20]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7ff fbf3 	bl	800b550 <clust2sect>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd82:	441a      	add	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b086      	sub	sp, #24
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bda2:	2100      	movs	r1, #0
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff feb4 	bl	800bb12 <dir_sdi>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d12b      	bne.n	800be0c <dir_alloc+0x7a>
		n = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff fb2a 	bl	800b418 <move_window>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d11d      	bne.n	800be0a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	2be5      	cmp	r3, #229	@ 0xe5
 800bdd6:	d004      	beq.n	800bde2 <dir_alloc+0x50>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d107      	bne.n	800bdf2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3301      	adds	r3, #1
 800bde6:	613b      	str	r3, [r7, #16]
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d102      	bne.n	800bdf6 <dir_alloc+0x64>
 800bdf0:	e00c      	b.n	800be0c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff ff05 	bl	800bc08 <dir_next>
 800bdfe:	4603      	mov	r3, r0
 800be00:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0d7      	beq.n	800bdb8 <dir_alloc+0x26>
 800be08:	e000      	b.n	800be0c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800be0a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d101      	bne.n	800be16 <dir_alloc+0x84>
 800be12:	2307      	movs	r3, #7
 800be14:	75fb      	strb	r3, [r7, #23]
	return res;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	331a      	adds	r3, #26
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff f810 	bl	800ae54 <ld_word>
 800be34:	4603      	mov	r3, r0
 800be36:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d109      	bne.n	800be54 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	3314      	adds	r3, #20
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff f805 	bl	800ae54 <ld_word>
 800be4a:	4603      	mov	r3, r0
 800be4c:	041b      	lsls	r3, r3, #16
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4313      	orrs	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800be54:	68fb      	ldr	r3, [r7, #12]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b084      	sub	sp, #16
 800be62:	af00      	add	r7, sp, #0
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	331a      	adds	r3, #26
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	b292      	uxth	r2, r2
 800be72:	4611      	mov	r1, r2
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff f829 	bl	800aecc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b03      	cmp	r3, #3
 800be80:	d109      	bne.n	800be96 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	f103 0214 	add.w	r2, r3, #20
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	0c1b      	lsrs	r3, r3, #16
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7ff f81b 	bl	800aecc <st_word>
	}
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b086      	sub	sp, #24
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800beac:	2100      	movs	r1, #0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fe2f 	bl	800bb12 <dir_sdi>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <dir_find+0x24>
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	e03e      	b.n	800bf40 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	69db      	ldr	r3, [r3, #28]
 800bec6:	4619      	mov	r1, r3
 800bec8:	6938      	ldr	r0, [r7, #16]
 800beca:	f7ff faa5 	bl	800b418 <move_window>
 800bece:	4603      	mov	r3, r0
 800bed0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d12f      	bne.n	800bf38 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <dir_find+0x4e>
 800bee6:	2304      	movs	r3, #4
 800bee8:	75fb      	strb	r3, [r7, #23]
 800beea:	e028      	b.n	800bf3e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a1b      	ldr	r3, [r3, #32]
 800bef0:	330b      	adds	r3, #11
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	330b      	adds	r3, #11
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	f003 0308 	and.w	r3, r3, #8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <dir_find+0x86>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a18      	ldr	r0, [r3, #32]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3324      	adds	r3, #36	@ 0x24
 800bf16:	220b      	movs	r2, #11
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f7ff f85a 	bl	800afd2 <mem_cmp>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bf24:	2100      	movs	r1, #0
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fe6e 	bl	800bc08 <dir_next>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0c5      	beq.n	800bec2 <dir_find+0x24>
 800bf36:	e002      	b.n	800bf3e <dir_find+0xa0>
		if (res != FR_OK) break;
 800bf38:	bf00      	nop
 800bf3a:	e000      	b.n	800bf3e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bf3c:	bf00      	nop

	return res;
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bf56:	2101      	movs	r1, #1
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff ff1a 	bl	800bd92 <dir_alloc>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d11c      	bne.n	800bfa2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	68b8      	ldr	r0, [r7, #8]
 800bf70:	f7ff fa52 	bl	800b418 <move_window>
 800bf74:	4603      	mov	r3, r0
 800bf76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d111      	bne.n	800bfa2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	2220      	movs	r2, #32
 800bf84:	2100      	movs	r1, #0
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff f808 	bl	800af9c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a18      	ldr	r0, [r3, #32]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3324      	adds	r3, #36	@ 0x24
 800bf94:	220b      	movs	r2, #11
 800bf96:	4619      	mov	r1, r3
 800bf98:	f7fe ffdf 	bl	800af5a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d04f      	beq.n	800c064 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bfcc:	e022      	b.n	800c014 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1a      	ldr	r2, [r3, #32]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	1c59      	adds	r1, r3, #1
 800bfd6:	6179      	str	r1, [r7, #20]
 800bfd8:	4413      	add	r3, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d016      	beq.n	800c012 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	d101      	bne.n	800bfee <get_fileinfo+0x42>
 800bfea:	23e5      	movs	r3, #229	@ 0xe5
 800bfec:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	d106      	bne.n	800c002 <get_fileinfo+0x56>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	613a      	str	r2, [r7, #16]
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	4413      	add	r3, r2
 800bffe:	222e      	movs	r2, #46	@ 0x2e
 800c000:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	613a      	str	r2, [r7, #16]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	4413      	add	r3, r2
 800c00c:	7bfa      	ldrb	r2, [r7, #15]
 800c00e:	725a      	strb	r2, [r3, #9]
 800c010:	e000      	b.n	800c014 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c012:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2b0a      	cmp	r3, #10
 800c018:	d9d9      	bls.n	800bfce <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	4413      	add	r3, r2
 800c020:	3309      	adds	r3, #9
 800c022:	2200      	movs	r2, #0
 800c024:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	7ada      	ldrb	r2, [r3, #11]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	331c      	adds	r3, #28
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe ff25 	bl	800ae86 <ld_dword>
 800c03c:	4602      	mov	r2, r0
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	3316      	adds	r3, #22
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe ff1c 	bl	800ae86 <ld_dword>
 800c04e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	b29a      	uxth	r2, r3
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	80da      	strh	r2, [r3, #6]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	0c1b      	lsrs	r3, r3, #16
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	809a      	strh	r2, [r3, #4]
 800c062:	e000      	b.n	800c066 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c064:	bf00      	nop
}
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3324      	adds	r3, #36	@ 0x24
 800c080:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c082:	220b      	movs	r2, #11
 800c084:	2120      	movs	r1, #32
 800c086:	68b8      	ldr	r0, [r7, #8]
 800c088:	f7fe ff88 	bl	800af9c <mem_set>
	si = i = 0; ni = 8;
 800c08c:	2300      	movs	r3, #0
 800c08e:	613b      	str	r3, [r7, #16]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	2308      	movs	r3, #8
 800c096:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	61fa      	str	r2, [r7, #28]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0a6:	7efb      	ldrb	r3, [r7, #27]
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	d94e      	bls.n	800c14a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c0ac:	7efb      	ldrb	r3, [r7, #27]
 800c0ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800c0b0:	d006      	beq.n	800c0c0 <create_name+0x54>
 800c0b2:	7efb      	ldrb	r3, [r7, #27]
 800c0b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c0b6:	d110      	bne.n	800c0da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c0b8:	e002      	b.n	800c0c0 <create_name+0x54>
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	61fb      	str	r3, [r7, #28]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c0ca:	d0f6      	beq.n	800c0ba <create_name+0x4e>
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c0d6:	d0f0      	beq.n	800c0ba <create_name+0x4e>
			break;
 800c0d8:	e038      	b.n	800c14c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c0da:	7efb      	ldrb	r3, [r7, #27]
 800c0dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0de:	d003      	beq.n	800c0e8 <create_name+0x7c>
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d30c      	bcc.n	800c102 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b0b      	cmp	r3, #11
 800c0ec:	d002      	beq.n	800c0f4 <create_name+0x88>
 800c0ee:	7efb      	ldrb	r3, [r7, #27]
 800c0f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0f2:	d001      	beq.n	800c0f8 <create_name+0x8c>
 800c0f4:	2306      	movs	r3, #6
 800c0f6:	e044      	b.n	800c182 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c0f8:	2308      	movs	r3, #8
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	230b      	movs	r3, #11
 800c0fe:	617b      	str	r3, [r7, #20]
			continue;
 800c100:	e022      	b.n	800c148 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c102:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c106:	2b00      	cmp	r3, #0
 800c108:	da04      	bge.n	800c114 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c10a:	7efb      	ldrb	r3, [r7, #27]
 800c10c:	3b80      	subs	r3, #128	@ 0x80
 800c10e:	4a1f      	ldr	r2, [pc, #124]	@ (800c18c <create_name+0x120>)
 800c110:	5cd3      	ldrb	r3, [r2, r3]
 800c112:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c114:	7efb      	ldrb	r3, [r7, #27]
 800c116:	4619      	mov	r1, r3
 800c118:	481d      	ldr	r0, [pc, #116]	@ (800c190 <create_name+0x124>)
 800c11a:	f7fe ff81 	bl	800b020 <chk_chr>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <create_name+0xbc>
 800c124:	2306      	movs	r3, #6
 800c126:	e02c      	b.n	800c182 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c128:	7efb      	ldrb	r3, [r7, #27]
 800c12a:	2b60      	cmp	r3, #96	@ 0x60
 800c12c:	d905      	bls.n	800c13a <create_name+0xce>
 800c12e:	7efb      	ldrb	r3, [r7, #27]
 800c130:	2b7a      	cmp	r3, #122	@ 0x7a
 800c132:	d802      	bhi.n	800c13a <create_name+0xce>
 800c134:	7efb      	ldrb	r3, [r7, #27]
 800c136:	3b20      	subs	r3, #32
 800c138:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	613a      	str	r2, [r7, #16]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	4413      	add	r3, r2
 800c144:	7efa      	ldrb	r2, [r7, #27]
 800c146:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c148:	e7a6      	b.n	800c098 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c14a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	441a      	add	r2, r3
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <create_name+0xf4>
 800c15c:	2306      	movs	r3, #6
 800c15e:	e010      	b.n	800c182 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2be5      	cmp	r3, #229	@ 0xe5
 800c166:	d102      	bne.n	800c16e <create_name+0x102>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2205      	movs	r2, #5
 800c16c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c16e:	7efb      	ldrb	r3, [r7, #27]
 800c170:	2b20      	cmp	r3, #32
 800c172:	d801      	bhi.n	800c178 <create_name+0x10c>
 800c174:	2204      	movs	r2, #4
 800c176:	e000      	b.n	800c17a <create_name+0x10e>
 800c178:	2200      	movs	r2, #0
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	330b      	adds	r3, #11
 800c17e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c180:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c182:	4618      	mov	r0, r3
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	08011558 	.word	0x08011558
 800c190:	080114d8 	.word	0x080114d8

0800c194 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1a8:	e002      	b.n	800c1b0 <follow_path+0x1c>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1b6:	d0f8      	beq.n	800c1aa <follow_path+0x16>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1be:	d0f4      	beq.n	800c1aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	2b1f      	cmp	r3, #31
 800c1cc:	d80a      	bhi.n	800c1e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2280      	movs	r2, #128	@ 0x80
 800c1d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff fc9a 	bl	800bb12 <dir_sdi>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	75fb      	strb	r3, [r7, #23]
 800c1e2:	e043      	b.n	800c26c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1e4:	463b      	mov	r3, r7
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff ff3f 	bl	800c06c <create_name>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d134      	bne.n	800c262 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff fe50 	bl	800be9e <dir_find>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c208:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00a      	beq.n	800c226 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c210:	7dfb      	ldrb	r3, [r7, #23]
 800c212:	2b04      	cmp	r3, #4
 800c214:	d127      	bne.n	800c266 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c216:	7afb      	ldrb	r3, [r7, #11]
 800c218:	f003 0304 	and.w	r3, r3, #4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d122      	bne.n	800c266 <follow_path+0xd2>
 800c220:	2305      	movs	r3, #5
 800c222:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c224:	e01f      	b.n	800c266 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c226:	7afb      	ldrb	r3, [r7, #11]
 800c228:	f003 0304 	and.w	r3, r3, #4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11c      	bne.n	800c26a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	799b      	ldrb	r3, [r3, #6]
 800c234:	f003 0310 	and.w	r3, r3, #16
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c23c:	2305      	movs	r3, #5
 800c23e:	75fb      	strb	r3, [r7, #23]
 800c240:	e014      	b.n	800c26c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c250:	4413      	add	r3, r2
 800c252:	4619      	mov	r1, r3
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7ff fde3 	bl	800be20 <ld_clust>
 800c25a:	4602      	mov	r2, r0
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c260:	e7c0      	b.n	800c1e4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c262:	bf00      	nop
 800c264:	e002      	b.n	800c26c <follow_path+0xd8>
				break;
 800c266:	bf00      	nop
 800c268:	e000      	b.n	800c26c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c26a:	bf00      	nop
			}
		}
	}

	return res;
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c276:	b480      	push	{r7}
 800c278:	b087      	sub	sp, #28
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c27e:	f04f 33ff 	mov.w	r3, #4294967295
 800c282:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d031      	beq.n	800c2f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	617b      	str	r3, [r7, #20]
 800c292:	e002      	b.n	800c29a <get_ldnumber+0x24>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	3301      	adds	r3, #1
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d903      	bls.n	800c2aa <get_ldnumber+0x34>
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2a8:	d1f4      	bne.n	800c294 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2b0:	d11c      	bne.n	800c2ec <get_ldnumber+0x76>
			tp = *path;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	60fa      	str	r2, [r7, #12]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	3b30      	subs	r3, #48	@ 0x30
 800c2c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b09      	cmp	r3, #9
 800c2c8:	d80e      	bhi.n	800c2e8 <get_ldnumber+0x72>
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d10a      	bne.n	800c2e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d107      	bne.n	800c2e8 <get_ldnumber+0x72>
					vol = (int)i;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	e002      	b.n	800c2f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c2f0:	693b      	ldr	r3, [r7, #16]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	371c      	adds	r7, #28
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
	...

0800c300 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	70da      	strb	r2, [r3, #3]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f04f 32ff 	mov.w	r2, #4294967295
 800c316:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff f87c 	bl	800b418 <move_window>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <check_fs+0x2a>
 800c326:	2304      	movs	r3, #4
 800c328:	e038      	b.n	800c39c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3334      	adds	r3, #52	@ 0x34
 800c32e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe fd8e 	bl	800ae54 <ld_word>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c340:	429a      	cmp	r2, r3
 800c342:	d001      	beq.n	800c348 <check_fs+0x48>
 800c344:	2303      	movs	r3, #3
 800c346:	e029      	b.n	800c39c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c34e:	2be9      	cmp	r3, #233	@ 0xe9
 800c350:	d009      	beq.n	800c366 <check_fs+0x66>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c358:	2beb      	cmp	r3, #235	@ 0xeb
 800c35a:	d11e      	bne.n	800c39a <check_fs+0x9a>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c362:	2b90      	cmp	r3, #144	@ 0x90
 800c364:	d119      	bne.n	800c39a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3334      	adds	r3, #52	@ 0x34
 800c36a:	3336      	adds	r3, #54	@ 0x36
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe fd8a 	bl	800ae86 <ld_dword>
 800c372:	4603      	mov	r3, r0
 800c374:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c378:	4a0a      	ldr	r2, [pc, #40]	@ (800c3a4 <check_fs+0xa4>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d101      	bne.n	800c382 <check_fs+0x82>
 800c37e:	2300      	movs	r3, #0
 800c380:	e00c      	b.n	800c39c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3334      	adds	r3, #52	@ 0x34
 800c386:	3352      	adds	r3, #82	@ 0x52
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe fd7c 	bl	800ae86 <ld_dword>
 800c38e:	4603      	mov	r3, r0
 800c390:	4a05      	ldr	r2, [pc, #20]	@ (800c3a8 <check_fs+0xa8>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d101      	bne.n	800c39a <check_fs+0x9a>
 800c396:	2300      	movs	r3, #0
 800c398:	e000      	b.n	800c39c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c39a:	2302      	movs	r3, #2
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	00544146 	.word	0x00544146
 800c3a8:	33544146 	.word	0x33544146

0800c3ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b096      	sub	sp, #88	@ 0x58
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff ff58 	bl	800c276 <get_ldnumber>
 800c3c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	da01      	bge.n	800c3d2 <find_volume+0x26>
 800c3ce:	230b      	movs	r3, #11
 800c3d0:	e235      	b.n	800c83e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c3d2:	4aa5      	ldr	r2, [pc, #660]	@ (800c668 <find_volume+0x2bc>)
 800c3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <find_volume+0x3a>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	e22b      	b.n	800c83e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800c3e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3e8:	f7fe fe35 	bl	800b056 <lock_fs>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <find_volume+0x4a>
 800c3f2:	230f      	movs	r3, #15
 800c3f4:	e223      	b.n	800c83e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c3fc:	79fb      	ldrb	r3, [r7, #7]
 800c3fe:	f023 0301 	bic.w	r3, r3, #1
 800c402:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d01a      	beq.n	800c442 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40e:	785b      	ldrb	r3, [r3, #1]
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fc81 	bl	800ad18 <disk_status>
 800c416:	4603      	mov	r3, r0
 800c418:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c41c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10c      	bne.n	800c442 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c428:	79fb      	ldrb	r3, [r7, #7]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d007      	beq.n	800c43e <find_volume+0x92>
 800c42e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c432:	f003 0304 	and.w	r3, r3, #4
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c43a:	230a      	movs	r3, #10
 800c43c:	e1ff      	b.n	800c83e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800c43e:	2300      	movs	r3, #0
 800c440:	e1fd      	b.n	800c83e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c444:	2200      	movs	r2, #0
 800c446:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c452:	785b      	ldrb	r3, [r3, #1]
 800c454:	4618      	mov	r0, r3
 800c456:	f7fe fc79 	bl	800ad4c <disk_initialize>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c460:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c46c:	2303      	movs	r3, #3
 800c46e:	e1e6      	b.n	800c83e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <find_volume+0xda>
 800c476:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c47a:	f003 0304 	and.w	r3, r3, #4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c482:	230a      	movs	r3, #10
 800c484:	e1db      	b.n	800c83e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c48a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c48c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c48e:	f7ff ff37 	bl	800c300 <check_fs>
 800c492:	4603      	mov	r3, r0
 800c494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d149      	bne.n	800c534 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4a4:	e01e      	b.n	800c4e4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ae:	011b      	lsls	r3, r3, #4
 800c4b0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c4b4:	4413      	add	r3, r2
 800c4b6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d006      	beq.n	800c4d0 <find_volume+0x124>
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fcdd 	bl	800ae86 <ld_dword>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	e000      	b.n	800c4d2 <find_volume+0x126>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	3358      	adds	r3, #88	@ 0x58
 800c4d8:	443b      	add	r3, r7
 800c4da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d9dd      	bls.n	800c4a6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c4ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <find_volume+0x14e>
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c4fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	3358      	adds	r3, #88	@ 0x58
 800c500:	443b      	add	r3, r7
 800c502:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c506:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <find_volume+0x16e>
 800c50e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c510:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c512:	f7ff fef5 	bl	800c300 <check_fs>
 800c516:	4603      	mov	r3, r0
 800c518:	e000      	b.n	800c51c <find_volume+0x170>
 800c51a:	2303      	movs	r3, #3
 800c51c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c524:	2b01      	cmp	r3, #1
 800c526:	d905      	bls.n	800c534 <find_volume+0x188>
 800c528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c52a:	3301      	adds	r3, #1
 800c52c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c530:	2b03      	cmp	r3, #3
 800c532:	d9e2      	bls.n	800c4fa <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c534:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d101      	bne.n	800c540 <find_volume+0x194>
 800c53c:	2301      	movs	r3, #1
 800c53e:	e17e      	b.n	800c83e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c540:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c544:	2b01      	cmp	r3, #1
 800c546:	d901      	bls.n	800c54c <find_volume+0x1a0>
 800c548:	230d      	movs	r3, #13
 800c54a:	e178      	b.n	800c83e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	3334      	adds	r3, #52	@ 0x34
 800c550:	330b      	adds	r3, #11
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fc7e 	bl	800ae54 <ld_word>
 800c558:	4603      	mov	r3, r0
 800c55a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c55e:	d001      	beq.n	800c564 <find_volume+0x1b8>
 800c560:	230d      	movs	r3, #13
 800c562:	e16c      	b.n	800c83e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c566:	3334      	adds	r3, #52	@ 0x34
 800c568:	3316      	adds	r3, #22
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fc72 	bl	800ae54 <ld_word>
 800c570:	4603      	mov	r3, r0
 800c572:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <find_volume+0x1dc>
 800c57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57c:	3334      	adds	r3, #52	@ 0x34
 800c57e:	3324      	adds	r3, #36	@ 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe fc80 	bl	800ae86 <ld_dword>
 800c586:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c58c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c596:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59a:	789b      	ldrb	r3, [r3, #2]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d005      	beq.n	800c5ac <find_volume+0x200>
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a2:	789b      	ldrb	r3, [r3, #2]
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d001      	beq.n	800c5ac <find_volume+0x200>
 800c5a8:	230d      	movs	r3, #13
 800c5aa:	e148      	b.n	800c83e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ae:	789b      	ldrb	r3, [r3, #2]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5b4:	fb02 f303 	mul.w	r3, r2, r3
 800c5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c8:	895b      	ldrh	r3, [r3, #10]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d008      	beq.n	800c5e0 <find_volume+0x234>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d0:	895b      	ldrh	r3, [r3, #10]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	895b      	ldrh	r3, [r3, #10]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <find_volume+0x238>
 800c5e0:	230d      	movs	r3, #13
 800c5e2:	e12c      	b.n	800c83e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e6:	3334      	adds	r3, #52	@ 0x34
 800c5e8:	3311      	adds	r3, #17
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fc32 	bl	800ae54 <ld_word>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fa:	891b      	ldrh	r3, [r3, #8]
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	b29b      	uxth	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <find_volume+0x25e>
 800c606:	230d      	movs	r3, #13
 800c608:	e119      	b.n	800c83e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60c:	3334      	adds	r3, #52	@ 0x34
 800c60e:	3313      	adds	r3, #19
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe fc1f 	bl	800ae54 <ld_word>
 800c616:	4603      	mov	r3, r0
 800c618:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c61a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d106      	bne.n	800c62e <find_volume+0x282>
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	3334      	adds	r3, #52	@ 0x34
 800c624:	3320      	adds	r3, #32
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe fc2d 	bl	800ae86 <ld_dword>
 800c62c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	3334      	adds	r3, #52	@ 0x34
 800c632:	330e      	adds	r3, #14
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fc0d 	bl	800ae54 <ld_word>
 800c63a:	4603      	mov	r3, r0
 800c63c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c63e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <find_volume+0x29c>
 800c644:	230d      	movs	r3, #13
 800c646:	e0fa      	b.n	800c83e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c648:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c64c:	4413      	add	r3, r2
 800c64e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c650:	8912      	ldrh	r2, [r2, #8]
 800c652:	0912      	lsrs	r2, r2, #4
 800c654:	b292      	uxth	r2, r2
 800c656:	4413      	add	r3, r2
 800c658:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c65a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65e:	429a      	cmp	r2, r3
 800c660:	d204      	bcs.n	800c66c <find_volume+0x2c0>
 800c662:	230d      	movs	r3, #13
 800c664:	e0eb      	b.n	800c83e <find_volume+0x492>
 800c666:	bf00      	nop
 800c668:	20005e94 	.word	0x20005e94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c66c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c674:	8952      	ldrh	r2, [r2, #10]
 800c676:	fbb3 f3f2 	udiv	r3, r3, r2
 800c67a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <find_volume+0x2da>
 800c682:	230d      	movs	r3, #13
 800c684:	e0db      	b.n	800c83e <find_volume+0x492>
		fmt = FS_FAT32;
 800c686:	2303      	movs	r3, #3
 800c688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c692:	4293      	cmp	r3, r2
 800c694:	d802      	bhi.n	800c69c <find_volume+0x2f0>
 800c696:	2302      	movs	r3, #2
 800c698:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d802      	bhi.n	800c6ac <find_volume+0x300>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	1c9a      	adds	r2, r3, #2
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6be:	441a      	add	r2, r3
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c6c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	441a      	add	r2, r3
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6cc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d11e      	bne.n	800c714 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d8:	3334      	adds	r3, #52	@ 0x34
 800c6da:	332a      	adds	r3, #42	@ 0x2a
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fe fbb9 	bl	800ae54 <ld_word>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <find_volume+0x340>
 800c6e8:	230d      	movs	r3, #13
 800c6ea:	e0a8      	b.n	800c83e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ee:	891b      	ldrh	r3, [r3, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <find_volume+0x34c>
 800c6f4:	230d      	movs	r3, #13
 800c6f6:	e0a2      	b.n	800c83e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fa:	3334      	adds	r3, #52	@ 0x34
 800c6fc:	332c      	adds	r3, #44	@ 0x2c
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fbc1 	bl	800ae86 <ld_dword>
 800c704:	4602      	mov	r2, r0
 800c706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c708:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	647b      	str	r3, [r7, #68]	@ 0x44
 800c712:	e01f      	b.n	800c754 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c716:	891b      	ldrh	r3, [r3, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <find_volume+0x374>
 800c71c:	230d      	movs	r3, #13
 800c71e:	e08e      	b.n	800c83e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c722:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c726:	441a      	add	r2, r3
 800c728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c72c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c730:	2b02      	cmp	r3, #2
 800c732:	d103      	bne.n	800c73c <find_volume+0x390>
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	e00a      	b.n	800c752 <find_volume+0x3a6>
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	699a      	ldr	r2, [r3, #24]
 800c740:	4613      	mov	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	4413      	add	r3, r2
 800c746:	085a      	lsrs	r2, r3, #1
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c752:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	69da      	ldr	r2, [r3, #28]
 800c758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c75a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c75e:	0a5b      	lsrs	r3, r3, #9
 800c760:	429a      	cmp	r2, r3
 800c762:	d201      	bcs.n	800c768 <find_volume+0x3bc>
 800c764:	230d      	movs	r3, #13
 800c766:	e06a      	b.n	800c83e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295
 800c76e:	615a      	str	r2, [r3, #20]
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	695a      	ldr	r2, [r3, #20]
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	2280      	movs	r2, #128	@ 0x80
 800c77c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c77e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c782:	2b03      	cmp	r3, #3
 800c784:	d149      	bne.n	800c81a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	3334      	adds	r3, #52	@ 0x34
 800c78a:	3330      	adds	r3, #48	@ 0x30
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe fb61 	bl	800ae54 <ld_word>
 800c792:	4603      	mov	r3, r0
 800c794:	2b01      	cmp	r3, #1
 800c796:	d140      	bne.n	800c81a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c79a:	3301      	adds	r3, #1
 800c79c:	4619      	mov	r1, r3
 800c79e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7a0:	f7fe fe3a 	bl	800b418 <move_window>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d137      	bne.n	800c81a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b2:	3334      	adds	r3, #52	@ 0x34
 800c7b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fb4b 	bl	800ae54 <ld_word>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d127      	bne.n	800c81a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	3334      	adds	r3, #52	@ 0x34
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fe fb59 	bl	800ae86 <ld_dword>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c848 <find_volume+0x49c>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d11e      	bne.n	800c81a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7de:	3334      	adds	r3, #52	@ 0x34
 800c7e0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe fb4e 	bl	800ae86 <ld_dword>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4a17      	ldr	r2, [pc, #92]	@ (800c84c <find_volume+0x4a0>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d113      	bne.n	800c81a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f4:	3334      	adds	r3, #52	@ 0x34
 800c7f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fb43 	bl	800ae86 <ld_dword>
 800c800:	4602      	mov	r2, r0
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c808:	3334      	adds	r3, #52	@ 0x34
 800c80a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fe fb39 	bl	800ae86 <ld_dword>
 800c814:	4602      	mov	r2, r0
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c820:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c822:	4b0b      	ldr	r3, [pc, #44]	@ (800c850 <find_volume+0x4a4>)
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	3301      	adds	r3, #1
 800c828:	b29a      	uxth	r2, r3
 800c82a:	4b09      	ldr	r3, [pc, #36]	@ (800c850 <find_volume+0x4a4>)
 800c82c:	801a      	strh	r2, [r3, #0]
 800c82e:	4b08      	ldr	r3, [pc, #32]	@ (800c850 <find_volume+0x4a4>)
 800c830:	881a      	ldrh	r2, [r3, #0]
 800c832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c834:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c836:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c838:	f7fe fd86 	bl	800b348 <clear_lock>
#endif
	return FR_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3758      	adds	r7, #88	@ 0x58
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	41615252 	.word	0x41615252
 800c84c:	61417272 	.word	0x61417272
 800c850:	20005e98 	.word	0x20005e98

0800c854 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c85e:	2309      	movs	r3, #9
 800c860:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d02e      	beq.n	800c8c6 <validate+0x72>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d02a      	beq.n	800c8c6 <validate+0x72>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d025      	beq.n	800c8c6 <validate+0x72>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	889a      	ldrh	r2, [r3, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	88db      	ldrh	r3, [r3, #6]
 800c884:	429a      	cmp	r2, r3
 800c886:	d11e      	bne.n	800c8c6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe fbe2 	bl	800b056 <lock_fs>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d014      	beq.n	800c8c2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	785b      	ldrb	r3, [r3, #1]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fa3a 	bl	800ad18 <disk_status>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <validate+0x60>
				res = FR_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	73fb      	strb	r3, [r7, #15]
 800c8b2:	e008      	b.n	800c8c6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fbe1 	bl	800b082 <unlock_fs>
 800c8c0:	e001      	b.n	800c8c6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c8c2:	230f      	movs	r3, #15
 800c8c4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d102      	bne.n	800c8d2 <validate+0x7e>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	e000      	b.n	800c8d4 <validate+0x80>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	6013      	str	r3, [r2, #0]
	return res;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c8f6:	f107 0310 	add.w	r3, r7, #16
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff fcbb 	bl	800c276 <get_ldnumber>
 800c900:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	2b00      	cmp	r3, #0
 800c906:	da01      	bge.n	800c90c <f_mount+0x28>
 800c908:	230b      	movs	r3, #11
 800c90a:	e048      	b.n	800c99e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c90c:	4a26      	ldr	r2, [pc, #152]	@ (800c9a8 <f_mount+0xc4>)
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c914:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00f      	beq.n	800c93c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c91c:	69b8      	ldr	r0, [r7, #24]
 800c91e:	f7fe fd13 	bl	800b348 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 ff6b 	bl	800d802 <ff_del_syncobj>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <f_mount+0x52>
 800c932:	2302      	movs	r3, #2
 800c934:	e033      	b.n	800c99e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00f      	beq.n	800c962 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	330c      	adds	r3, #12
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f000 ff35 	bl	800d7c2 <ff_cre_syncobj>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <f_mount+0x7e>
 800c95e:	2302      	movs	r3, #2
 800c960:	e01d      	b.n	800c99e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	4910      	ldr	r1, [pc, #64]	@ (800c9a8 <f_mount+0xc4>)
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <f_mount+0x94>
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d001      	beq.n	800c97c <f_mount+0x98>
 800c978:	2300      	movs	r3, #0
 800c97a:	e010      	b.n	800c99e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c97c:	f107 010c 	add.w	r1, r7, #12
 800c980:	f107 0308 	add.w	r3, r7, #8
 800c984:	2200      	movs	r2, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fd10 	bl	800c3ac <find_volume>
 800c98c:	4603      	mov	r3, r0
 800c98e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	7dfa      	ldrb	r2, [r7, #23]
 800c994:	4611      	mov	r1, r2
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fb73 	bl	800b082 <unlock_fs>
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	20005e94 	.word	0x20005e94

0800c9ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b098      	sub	sp, #96	@ 0x60
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <f_open+0x18>
 800c9c0:	2309      	movs	r3, #9
 800c9c2:	e1b0      	b.n	800cd26 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c9cc:	79fa      	ldrb	r2, [r7, #7]
 800c9ce:	f107 0110 	add.w	r1, r7, #16
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff fce8 	bl	800c3ac <find_volume>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c9e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f040 818d 	bne.w	800cd06 <f_open+0x35a>
		dj.obj.fs = fs;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	f107 0314 	add.w	r3, r7, #20
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7ff fbcb 	bl	800c194 <follow_path>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d118      	bne.n	800ca3e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca10:	b25b      	sxtb	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da03      	bge.n	800ca1e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca16:	2306      	movs	r3, #6
 800ca18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca1c:	e00f      	b.n	800ca3e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	bf8c      	ite	hi
 800ca24:	2301      	movhi	r3, #1
 800ca26:	2300      	movls	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f107 0314 	add.w	r3, r7, #20
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fe fb40 	bl	800b0b8 <chk_lock>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca3e:	79fb      	ldrb	r3, [r7, #7]
 800ca40:	f003 031c 	and.w	r3, r3, #28
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d07f      	beq.n	800cb48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ca48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d017      	beq.n	800ca80 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d10e      	bne.n	800ca76 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca58:	f7fe fb8a 	bl	800b170 <enq_lock>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d006      	beq.n	800ca70 <f_open+0xc4>
 800ca62:	f107 0314 	add.w	r3, r7, #20
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff fa6e 	bl	800bf48 <dir_register>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	e000      	b.n	800ca72 <f_open+0xc6>
 800ca70:	2312      	movs	r3, #18
 800ca72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	f043 0308 	orr.w	r3, r3, #8
 800ca7c:	71fb      	strb	r3, [r7, #7]
 800ca7e:	e010      	b.n	800caa2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca80:	7ebb      	ldrb	r3, [r7, #26]
 800ca82:	f003 0311 	and.w	r3, r3, #17
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <f_open+0xe6>
					res = FR_DENIED;
 800ca8a:	2307      	movs	r3, #7
 800ca8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca90:	e007      	b.n	800caa2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <f_open+0xf6>
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800caa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d168      	bne.n	800cb7c <f_open+0x1d0>
 800caaa:	79fb      	ldrb	r3, [r7, #7]
 800caac:	f003 0308 	and.w	r3, r3, #8
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d063      	beq.n	800cb7c <f_open+0x1d0>
				dw = GET_FATTIME();
 800cab4:	f7fd fece 	bl	800a854 <get_fattime>
 800cab8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800caba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cabc:	330e      	adds	r3, #14
 800cabe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fa1e 	bl	800af02 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac8:	3316      	adds	r3, #22
 800caca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fa18 	bl	800af02 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad4:	330b      	adds	r3, #11
 800cad6:	2220      	movs	r2, #32
 800cad8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cade:	4611      	mov	r1, r2
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff f99d 	bl	800be20 <ld_clust>
 800cae6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800caec:	2200      	movs	r2, #0
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff f9b5 	bl	800be5e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	331c      	adds	r3, #28
 800caf8:	2100      	movs	r1, #0
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe fa01 	bl	800af02 <st_dword>
					fs->wflag = 1;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	2201      	movs	r2, #1
 800cb04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d037      	beq.n	800cb7c <f_open+0x1d0>
						dw = fs->winsect;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb10:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	2200      	movs	r2, #0
 800cb18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe fec8 	bl	800b8b0 <remove_chain>
 800cb20:	4603      	mov	r3, r0
 800cb22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cb26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d126      	bne.n	800cb7c <f_open+0x1d0>
							res = move_window(fs, dw);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe fc70 	bl	800b418 <move_window>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb42:	3a01      	subs	r2, #1
 800cb44:	611a      	str	r2, [r3, #16]
 800cb46:	e019      	b.n	800cb7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d115      	bne.n	800cb7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb50:	7ebb      	ldrb	r3, [r7, #26]
 800cb52:	f003 0310 	and.w	r3, r3, #16
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb5a:	2304      	movs	r3, #4
 800cb5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb60:	e00c      	b.n	800cb7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb62:	79fb      	ldrb	r3, [r7, #7]
 800cb64:	f003 0302 	and.w	r3, r3, #2
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <f_open+0x1d0>
 800cb6c:	7ebb      	ldrb	r3, [r7, #26]
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <f_open+0x1d0>
						res = FR_DENIED;
 800cb76:	2307      	movs	r3, #7
 800cb78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d126      	bne.n	800cbd2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	f003 0308 	and.w	r3, r3, #8
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d003      	beq.n	800cb96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cb9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cba4:	79fb      	ldrb	r3, [r7, #7]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	bf8c      	ite	hi
 800cbaa:	2301      	movhi	r3, #1
 800cbac:	2300      	movls	r3, #0
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	f107 0314 	add.w	r3, r7, #20
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fe fafb 	bl	800b1b4 <inc_lock>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <f_open+0x226>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f040 8095 	bne.w	800cd06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7ff f91c 	bl	800be20 <ld_clust>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf0:	331c      	adds	r3, #28
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe f947 	bl	800ae86 <ld_dword>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	88da      	ldrh	r2, [r3, #6]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	79fa      	ldrb	r2, [r7, #7]
 800cc16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3330      	adds	r3, #48	@ 0x30
 800cc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe f9b1 	bl	800af9c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	f003 0320 	and.w	r3, r3, #32
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d060      	beq.n	800cd06 <f_open+0x35a>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d05c      	beq.n	800cd06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	895b      	ldrh	r3, [r3, #10]
 800cc58:	025b      	lsls	r3, r3, #9
 800cc5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc68:	e016      	b.n	800cc98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fc8d 	bl	800b58e <get_fat>
 800cc74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cc76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d802      	bhi.n	800cc82 <f_open+0x2d6>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc88:	d102      	bne.n	800cc90 <f_open+0x2e4>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <f_open+0x2fc>
 800cca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d8e0      	bhi.n	800cc6a <f_open+0x2be>
				}
				fp->clust = clst;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ccae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d127      	bne.n	800cd06 <f_open+0x35a>
 800ccb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d022      	beq.n	800cd06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fe fc43 	bl	800b550 <clust2sect>
 800ccca:	6478      	str	r0, [r7, #68]	@ 0x44
 800cccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d103      	bne.n	800ccda <f_open+0x32e>
						res = FR_INT_ERR;
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ccd8:	e015      	b.n	800cd06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ccda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccdc:	0a5a      	lsrs	r2, r3, #9
 800ccde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	7858      	ldrb	r0, [r3, #1]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6a1a      	ldr	r2, [r3, #32]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	f7fe f84f 	bl	800ad98 <disk_read>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <f_open+0x35a>
 800cd00:	2301      	movs	r3, #1
 800cd02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <f_open+0x368>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe f9b0 	bl	800b082 <unlock_fs>
 800cd22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3760      	adds	r7, #96	@ 0x60
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b08c      	sub	sp, #48	@ 0x30
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	607a      	str	r2, [r7, #4]
 800cd3a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f107 0210 	add.w	r2, r7, #16
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff fd80 	bl	800c854 <validate>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d107      	bne.n	800cd72 <f_write+0x44>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	7d5b      	ldrb	r3, [r3, #21]
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d009      	beq.n	800cd86 <f_write+0x58>
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f981 	bl	800b082 <unlock_fs>
 800cd80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd84:	e173      	b.n	800d06e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	7d1b      	ldrb	r3, [r3, #20]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <f_write+0x72>
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	2107      	movs	r1, #7
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe f973 	bl	800b082 <unlock_fs>
 800cd9c:	2307      	movs	r3, #7
 800cd9e:	e166      	b.n	800d06e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	699a      	ldr	r2, [r3, #24]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	441a      	add	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	f080 814b 	bcs.w	800d048 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	43db      	mvns	r3, r3
 800cdb8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cdba:	e145      	b.n	800d048 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 8101 	bne.w	800cfcc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	0a5b      	lsrs	r3, r3, #9
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	8952      	ldrh	r2, [r2, #10]
 800cdd4:	3a01      	subs	r2, #1
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d14d      	bne.n	800ce7c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10c      	bne.n	800ce02 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d11a      	bne.n	800ce2a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe fdbe 	bl	800b97a <create_chain>
 800cdfe:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce00:	e013      	b.n	800ce2a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d007      	beq.n	800ce1a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7fe fe4a 	bl	800baaa <clmt_clust>
 800ce16:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce18:	e007      	b.n	800ce2a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f7fe fda9 	bl	800b97a <create_chain>
 800ce28:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 8110 	beq.w	800d052 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d109      	bne.n	800ce4c <f_write+0x11e>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	755a      	strb	r2, [r3, #21]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2102      	movs	r1, #2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe f91d 	bl	800b082 <unlock_fs>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	e110      	b.n	800d06e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d109      	bne.n	800ce68 <f_write+0x13a>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2201      	movs	r2, #1
 800ce58:	755a      	strb	r2, [r3, #21]
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe f90f 	bl	800b082 <unlock_fs>
 800ce64:	2301      	movs	r3, #1
 800ce66:	e102      	b.n	800d06e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <f_write+0x14e>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	7d1b      	ldrb	r3, [r3, #20]
 800ce80:	b25b      	sxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	da1d      	bge.n	800cec2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	7858      	ldrb	r0, [r3, #1]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6a1a      	ldr	r2, [r3, #32]
 800ce94:	2301      	movs	r3, #1
 800ce96:	f7fd ff9f 	bl	800add8 <disk_write>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d009      	beq.n	800ceb4 <f_write+0x186>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2201      	movs	r2, #1
 800cea4:	755a      	strb	r2, [r3, #21]
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2101      	movs	r1, #1
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fe f8e9 	bl	800b082 <unlock_fs>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e0dc      	b.n	800d06e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
 800ceb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fe fb40 	bl	800b550 <clust2sect>
 800ced0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d109      	bne.n	800ceec <f_write+0x1be>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2202      	movs	r2, #2
 800cedc:	755a      	strb	r2, [r3, #21]
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2102      	movs	r1, #2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe f8cd 	bl	800b082 <unlock_fs>
 800cee8:	2302      	movs	r3, #2
 800ceea:	e0c0      	b.n	800d06e <f_write+0x340>
			sect += csect;
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	4413      	add	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	0a5b      	lsrs	r3, r3, #9
 800cef8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d041      	beq.n	800cf84 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf00:	69ba      	ldr	r2, [r7, #24]
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	4413      	add	r3, r2
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	8952      	ldrh	r2, [r2, #10]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d905      	bls.n	800cf1a <f_write+0x1ec>
					cc = fs->csize - csect;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	461a      	mov	r2, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	7858      	ldrb	r0, [r3, #1]
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	69f9      	ldr	r1, [r7, #28]
 800cf24:	f7fd ff58 	bl	800add8 <disk_write>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d009      	beq.n	800cf42 <f_write+0x214>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2201      	movs	r2, #1
 800cf32:	755a      	strb	r2, [r3, #21]
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	2101      	movs	r1, #1
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe f8a2 	bl	800b082 <unlock_fs>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e095      	b.n	800d06e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a1a      	ldr	r2, [r3, #32]
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	6a3a      	ldr	r2, [r7, #32]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d915      	bls.n	800cf7c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a1a      	ldr	r2, [r3, #32]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	025b      	lsls	r3, r3, #9
 800cf60:	69fa      	ldr	r2, [r7, #28]
 800cf62:	4413      	add	r3, r2
 800cf64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f7fd fff6 	bl	800af5a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	7d1b      	ldrb	r3, [r3, #20]
 800cf72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	025b      	lsls	r3, r3, #9
 800cf80:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf82:	e044      	b.n	800d00e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6a1b      	ldr	r3, [r3, #32]
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d01b      	beq.n	800cfc6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d215      	bcs.n	800cfc6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	7858      	ldrb	r0, [r3, #1]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	f7fd fef6 	bl	800ad98 <disk_read>
 800cfac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	755a      	strb	r2, [r3, #21]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	2101      	movs	r1, #1
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe f860 	bl	800b082 <unlock_fs>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e053      	b.n	800d06e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cfd8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cfda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d901      	bls.n	800cfe6 <f_write+0x2b8>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff4:	4413      	add	r3, r2
 800cff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff8:	69f9      	ldr	r1, [r7, #28]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fd ffad 	bl	800af5a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	7d1b      	ldrb	r3, [r3, #20]
 800d004:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	4413      	add	r3, r2
 800d014:	61fb      	str	r3, [r7, #28]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	441a      	add	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	619a      	str	r2, [r3, #24]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	68da      	ldr	r2, [r3, #12]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	bf38      	it	cc
 800d02e:	461a      	movcc	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	60da      	str	r2, [r3, #12]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03a:	441a      	add	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f47f aeb6 	bne.w	800cdbc <f_write+0x8e>
 800d050:	e000      	b.n	800d054 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d052:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	7d1b      	ldrb	r3, [r3, #20]
 800d058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe f80b 	bl	800b082 <unlock_fs>
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3730      	adds	r7, #48	@ 0x30
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b086      	sub	sp, #24
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f107 0208 	add.w	r2, r7, #8
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fbe4 	bl	800c854 <validate>
 800d08c:	4603      	mov	r3, r0
 800d08e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d090:	7dfb      	ldrb	r3, [r7, #23]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d16d      	bne.n	800d172 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7d1b      	ldrb	r3, [r3, #20]
 800d09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d067      	beq.n	800d172 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	b25b      	sxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	da1a      	bge.n	800d0e2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	7858      	ldrb	r0, [r3, #1]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1a      	ldr	r2, [r3, #32]
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	f7fd fe8c 	bl	800add8 <disk_write>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d006      	beq.n	800d0d4 <f_sync+0x5e>
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fd ffd9 	bl	800b082 <unlock_fs>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e055      	b.n	800d180 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7d1b      	ldrb	r3, [r3, #20]
 800d0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0e2:	f7fd fbb7 	bl	800a854 <get_fattime>
 800d0e6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7fe f991 	bl	800b418 <move_window>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d138      	bne.n	800d172 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d104:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	330b      	adds	r3, #11
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	330b      	adds	r3, #11
 800d110:	f042 0220 	orr.w	r2, r2, #32
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	461a      	mov	r2, r3
 800d122:	68f9      	ldr	r1, [r7, #12]
 800d124:	f7fe fe9b 	bl	800be5e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f103 021c 	add.w	r2, r3, #28
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fd fee4 	bl	800af02 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3316      	adds	r3, #22
 800d13e:	6939      	ldr	r1, [r7, #16]
 800d140:	4618      	mov	r0, r3
 800d142:	f7fd fede 	bl	800af02 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3312      	adds	r3, #18
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fd febd 	bl	800aecc <st_word>
					fs->wflag = 1;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	2201      	movs	r2, #1
 800d156:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe f98a 	bl	800b474 <sync_fs>
 800d160:	4603      	mov	r3, r0
 800d162:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	7dfa      	ldrb	r2, [r7, #23]
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fd ff82 	bl	800b082 <unlock_fs>
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ff70 	bl	800d076 <f_sync>
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d11d      	bne.n	800d1dc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f107 0208 	add.w	r2, r7, #8
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff fb53 	bl	800c854 <validate>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d111      	bne.n	800d1dc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe f887 	bl	800b2d0 <dec_lock>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d102      	bne.n	800d1d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fd ff53 	bl	800b082 <unlock_fs>
#endif
		}
	}
	return res;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b090      	sub	sp, #64	@ 0x40
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f107 0208 	add.w	r2, r7, #8
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff fb2b 	bl	800c854 <validate>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d204:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <f_lseek+0x2e>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	7d5b      	ldrb	r3, [r3, #21]
 800d210:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d214:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d009      	beq.n	800d230 <f_lseek+0x4a>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d222:	4611      	mov	r1, r2
 800d224:	4618      	mov	r0, r3
 800d226:	f7fd ff2c 	bl	800b082 <unlock_fs>
 800d22a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d22e:	e229      	b.n	800d684 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80ea 	beq.w	800d40e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d240:	d164      	bne.n	800d30c <f_lseek+0x126>
			tbl = fp->cltbl;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d246:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	1d1a      	adds	r2, r3, #4
 800d24c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	617b      	str	r3, [r7, #20]
 800d252:	2302      	movs	r3, #2
 800d254:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d044      	beq.n	800d2ec <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	613b      	str	r3, [r7, #16]
 800d266:	2300      	movs	r3, #0
 800d268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26c:	3302      	adds	r3, #2
 800d26e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d276:	3301      	adds	r3, #1
 800d278:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe f985 	bl	800b58e <get_fat>
 800d284:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d809      	bhi.n	800d2a0 <f_lseek+0xba>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2202      	movs	r2, #2
 800d290:	755a      	strb	r2, [r3, #21]
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2102      	movs	r1, #2
 800d296:	4618      	mov	r0, r3
 800d298:	f7fd fef3 	bl	800b082 <unlock_fs>
 800d29c:	2302      	movs	r3, #2
 800d29e:	e1f1      	b.n	800d684 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d109      	bne.n	800d2bc <f_lseek+0xd6>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	755a      	strb	r2, [r3, #21]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fd fee5 	bl	800b082 <unlock_fs>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e1e3      	b.n	800d684 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d0d4      	beq.n	800d270 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d2c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d809      	bhi.n	800d2e2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	1d1a      	adds	r2, r3, #4
 800d2d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	1d1a      	adds	r2, r3, #4
 800d2dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d3ba      	bcc.n	800d262 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d2f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d803      	bhi.n	800d304 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	e1b6      	b.n	800d672 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d304:	2311      	movs	r3, #17
 800d306:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d30a:	e1b2      	b.n	800d672 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	429a      	cmp	r2, r3
 800d314:	d902      	bls.n	800d31c <f_lseek+0x136>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 81a4 	beq.w	800d672 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7fe fbba 	bl	800baaa <clmt_clust>
 800d336:	4602      	mov	r2, r0
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7fe f903 	bl	800b550 <clust2sect>
 800d34a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d109      	bne.n	800d366 <f_lseek+0x180>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2202      	movs	r2, #2
 800d356:	755a      	strb	r2, [r3, #21]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2102      	movs	r1, #2
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd fe90 	bl	800b082 <unlock_fs>
 800d362:	2302      	movs	r3, #2
 800d364:	e18e      	b.n	800d684 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	3b01      	subs	r3, #1
 800d36a:	0a5b      	lsrs	r3, r3, #9
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	8952      	ldrh	r2, [r2, #10]
 800d370:	3a01      	subs	r2, #1
 800d372:	4013      	ands	r3, r2
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	4413      	add	r3, r2
 800d378:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 8175 	beq.w	800d672 <f_lseek+0x48c>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a1b      	ldr	r3, [r3, #32]
 800d38c:	69ba      	ldr	r2, [r7, #24]
 800d38e:	429a      	cmp	r2, r3
 800d390:	f000 816f 	beq.w	800d672 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7d1b      	ldrb	r3, [r3, #20]
 800d398:	b25b      	sxtb	r3, r3
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	da1d      	bge.n	800d3da <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	7858      	ldrb	r0, [r3, #1]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a1a      	ldr	r2, [r3, #32]
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	f7fd fd13 	bl	800add8 <disk_write>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d009      	beq.n	800d3cc <f_lseek+0x1e6>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	755a      	strb	r2, [r3, #21]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fe5d 	bl	800b082 <unlock_fs>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e15b      	b.n	800d684 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	7858      	ldrb	r0, [r3, #1]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	f7fd fcd6 	bl	800ad98 <disk_read>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d009      	beq.n	800d406 <f_lseek+0x220>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	755a      	strb	r2, [r3, #21]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fd fe40 	bl	800b082 <unlock_fs>
 800d402:	2301      	movs	r3, #1
 800d404:	e13e      	b.n	800d684 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	621a      	str	r2, [r3, #32]
 800d40c:	e131      	b.n	800d672 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d908      	bls.n	800d42a <f_lseek+0x244>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	f003 0302 	and.w	r3, r3, #2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	637b      	str	r3, [r7, #52]	@ 0x34
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d438:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 80c0 	beq.w	800d5c2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	895b      	ldrh	r3, [r3, #10]
 800d446:	025b      	lsls	r3, r3, #9
 800d448:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01b      	beq.n	800d488 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	1e5a      	subs	r2, r3, #1
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	fbb2 f2f3 	udiv	r2, r2, r3
 800d45a:	6a3b      	ldr	r3, [r7, #32]
 800d45c:	1e59      	subs	r1, r3, #1
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d464:	429a      	cmp	r2, r3
 800d466:	d30f      	bcc.n	800d488 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	1e5a      	subs	r2, r3, #1
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	425b      	negs	r3, r3
 800d470:	401a      	ands	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d486:	e02c      	b.n	800d4e2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	2b00      	cmp	r3, #0
 800d492:	d123      	bne.n	800d4dc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2100      	movs	r1, #0
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe fa6e 	bl	800b97a <create_chain>
 800d49e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d109      	bne.n	800d4ba <f_lseek+0x2d4>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	755a      	strb	r2, [r3, #21]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2102      	movs	r1, #2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fd fde6 	bl	800b082 <unlock_fs>
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	e0e4      	b.n	800d684 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c0:	d109      	bne.n	800d4d6 <f_lseek+0x2f0>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	755a      	strb	r2, [r3, #21]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fd fdd8 	bl	800b082 <unlock_fs>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e0d6      	b.n	800d684 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4da:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4e0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d06c      	beq.n	800d5c2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800d4e8:	e044      	b.n	800d574 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	603b      	str	r3, [r7, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	699a      	ldr	r2, [r3, #24]
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	441a      	add	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	7d1b      	ldrb	r3, [r3, #20]
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00b      	beq.n	800d522 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe fa33 	bl	800b97a <create_chain>
 800d514:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d108      	bne.n	800d52e <f_lseek+0x348>
							ofs = 0; break;
 800d51c:	2300      	movs	r3, #0
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	e02c      	b.n	800d57c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe f831 	bl	800b58e <get_fat>
 800d52c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d534:	d109      	bne.n	800d54a <f_lseek+0x364>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	755a      	strb	r2, [r3, #21]
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2101      	movs	r1, #1
 800d540:	4618      	mov	r0, r3
 800d542:	f7fd fd9e 	bl	800b082 <unlock_fs>
 800d546:	2301      	movs	r3, #1
 800d548:	e09c      	b.n	800d684 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d904      	bls.n	800d55a <f_lseek+0x374>
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d556:	429a      	cmp	r2, r3
 800d558:	d309      	bcc.n	800d56e <f_lseek+0x388>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2202      	movs	r2, #2
 800d55e:	755a      	strb	r2, [r3, #21]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2102      	movs	r1, #2
 800d564:	4618      	mov	r0, r3
 800d566:	f7fd fd8c 	bl	800b082 <unlock_fs>
 800d56a:	2302      	movs	r3, #2
 800d56c:	e08a      	b.n	800d684 <f_lseek+0x49e>
					fp->clust = clst;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d572:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d8b6      	bhi.n	800d4ea <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	699a      	ldr	r2, [r3, #24]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	441a      	add	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d017      	beq.n	800d5c2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d596:	4618      	mov	r0, r3
 800d598:	f7fd ffda 	bl	800b550 <clust2sect>
 800d59c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d109      	bne.n	800d5b8 <f_lseek+0x3d2>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	755a      	strb	r2, [r3, #21]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2102      	movs	r1, #2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fd fd67 	bl	800b082 <unlock_fs>
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e065      	b.n	800d684 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	0a5b      	lsrs	r3, r3, #9
 800d5bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5be:	4413      	add	r3, r2
 800d5c0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	699a      	ldr	r2, [r3, #24]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d90a      	bls.n	800d5e4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	699a      	ldr	r2, [r3, #24]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7d1b      	ldrb	r3, [r3, #20]
 800d5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d040      	beq.n	800d672 <f_lseek+0x48c>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a1b      	ldr	r3, [r3, #32]
 800d5f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d03b      	beq.n	800d672 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d1b      	ldrb	r3, [r3, #20]
 800d5fe:	b25b      	sxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	da1d      	bge.n	800d640 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	7858      	ldrb	r0, [r3, #1]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1a      	ldr	r2, [r3, #32]
 800d612:	2301      	movs	r3, #1
 800d614:	f7fd fbe0 	bl	800add8 <disk_write>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d009      	beq.n	800d632 <f_lseek+0x44c>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	755a      	strb	r2, [r3, #21]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2101      	movs	r1, #1
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fd fd2a 	bl	800b082 <unlock_fs>
 800d62e:	2301      	movs	r3, #1
 800d630:	e028      	b.n	800d684 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7d1b      	ldrb	r3, [r3, #20]
 800d636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	7858      	ldrb	r0, [r3, #1]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d64a:	2301      	movs	r3, #1
 800d64c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d64e:	f7fd fba3 	bl	800ad98 <disk_read>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d009      	beq.n	800d66c <f_lseek+0x486>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	755a      	strb	r2, [r3, #21]
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f7fd fd0d 	bl	800b082 <unlock_fs>
 800d668:	2301      	movs	r3, #1
 800d66a:	e00b      	b.n	800d684 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d670:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fd fd01 	bl	800b082 <unlock_fs>
 800d680:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d684:	4618      	mov	r0, r3
 800d686:	3740      	adds	r7, #64	@ 0x40
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b090      	sub	sp, #64	@ 0x40
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d696:	f107 010c 	add.w	r1, r7, #12
 800d69a:	1d3b      	adds	r3, r7, #4
 800d69c:	2200      	movs	r2, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fe84 	bl	800c3ac <find_volume>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800d6aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d11f      	bne.n	800d6f2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	f107 030c 	add.w	r3, r7, #12
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fd6a 	bl	800c194 <follow_path>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d6c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d111      	bne.n	800d6f2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d6ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	da03      	bge.n	800d6e0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d6d8:	2306      	movs	r3, #6
 800d6da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d6de:	e008      	b.n	800d6f2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <f_stat+0x66>
 800d6e6:	f107 030c 	add.w	r3, r7, #12
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fc5d 	bl	800bfac <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fd fcc1 	bl	800b082 <unlock_fs>
 800d700:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d704:	4618      	mov	r0, r3
 800d706:	3740      	adds	r7, #64	@ 0x40
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b087      	sub	sp, #28
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	4613      	mov	r3, r2
 800d718:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d71a:	2301      	movs	r3, #1
 800d71c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d722:	4b1f      	ldr	r3, [pc, #124]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d724:	7a5b      	ldrb	r3, [r3, #9]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d131      	bne.n	800d790 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d72c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d72e:	7a5b      	ldrb	r3, [r3, #9]
 800d730:	b2db      	uxtb	r3, r3
 800d732:	461a      	mov	r2, r3
 800d734:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d736:	2100      	movs	r1, #0
 800d738:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d73a:	4b19      	ldr	r3, [pc, #100]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d73c:	7a5b      	ldrb	r3, [r3, #9]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	4a17      	ldr	r2, [pc, #92]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d74a:	4b15      	ldr	r3, [pc, #84]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d74c:	7a5b      	ldrb	r3, [r3, #9]
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	461a      	mov	r2, r3
 800d752:	4b13      	ldr	r3, [pc, #76]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d754:	4413      	add	r3, r2
 800d756:	79fa      	ldrb	r2, [r7, #7]
 800d758:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d75a:	4b11      	ldr	r3, [pc, #68]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d75c:	7a5b      	ldrb	r3, [r3, #9]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	b2d1      	uxtb	r1, r2
 800d764:	4a0e      	ldr	r2, [pc, #56]	@ (800d7a0 <FATFS_LinkDriverEx+0x94>)
 800d766:	7251      	strb	r1, [r2, #9]
 800d768:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d76a:	7dbb      	ldrb	r3, [r7, #22]
 800d76c:	3330      	adds	r3, #48	@ 0x30
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	3301      	adds	r3, #1
 800d778:	223a      	movs	r2, #58	@ 0x3a
 800d77a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	3302      	adds	r3, #2
 800d780:	222f      	movs	r2, #47	@ 0x2f
 800d782:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	3303      	adds	r3, #3
 800d788:	2200      	movs	r2, #0
 800d78a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d790:	7dfb      	ldrb	r3, [r7, #23]
}
 800d792:	4618      	mov	r0, r3
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	20005ebc 	.word	0x20005ebc

0800d7a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ffaa 	bl	800d70c <FATFS_LinkDriverEx>
 800d7b8:	4603      	mov	r3, r0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b086      	sub	sp, #24
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	6039      	str	r1, [r7, #0]
 800d7cc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d7d6:	f107 030c 	add.w	r3, r7, #12
 800d7da:	2101      	movs	r1, #1
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f8e9 	bl	800d9b4 <osSemaphoreCreate>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	bf14      	ite	ne
 800d7f0:	2301      	movne	r3, #1
 800d7f2:	2300      	moveq	r3, #0
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	617b      	str	r3, [r7, #20]

    return ret;
 800d7f8:	697b      	ldr	r3, [r7, #20]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f996 	bl	800db3c <osSemaphoreDelete>
#endif
    return 1;
 800d810:	2301      	movs	r3, #1
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800d826:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 f902 	bl	800da34 <osSemaphoreWait>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d836:	2301      	movs	r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d83a:	68fb      	ldr	r3, [r7, #12]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f93f 	bl	800dad0 <osSemaphoreRelease>
#endif
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b085      	sub	sp, #20
 800d85e:	af00      	add	r7, sp, #0
 800d860:	4603      	mov	r3, r0
 800d862:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d86c:	2b84      	cmp	r3, #132	@ 0x84
 800d86e:	d005      	beq.n	800d87c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d870:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	4413      	add	r3, r2
 800d878:	3303      	adds	r3, #3
 800d87a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d87c:	68fb      	ldr	r3, [r7, #12]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d88a:	b480      	push	{r7}
 800d88c:	b083      	sub	sp, #12
 800d88e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d890:	f3ef 8305 	mrs	r3, IPSR
 800d894:	607b      	str	r3, [r7, #4]
  return(result);
 800d896:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d898:	2b00      	cmp	r3, #0
 800d89a:	bf14      	ite	ne
 800d89c:	2301      	movne	r3, #1
 800d89e:	2300      	moveq	r3, #0
 800d8a0:	b2db      	uxtb	r3, r3
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d8b2:	f001 fce9 	bl	800f288 <vTaskStartScheduler>
  
  return osOK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d8c0:	f002 f948 	bl	800fb54 <xTaskGetSchedulerState>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d101      	bne.n	800d8ce <osKernelRunning+0x12>
    return 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e000      	b.n	800d8d0 <osKernelRunning+0x14>
  else
    return 1;
 800d8ce:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d8d8:	f7ff ffd7 	bl	800d88a <inHandlerMode>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d8e2:	f001 fdfd 	bl	800f4e0 <xTaskGetTickCountFromISR>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	e002      	b.n	800d8f0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d8ea:	f001 fde9 	bl	800f4c0 <xTaskGetTickCount>
 800d8ee:	4603      	mov	r3, r0
  }
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8f6:	b089      	sub	sp, #36	@ 0x24
 800d8f8:	af04      	add	r7, sp, #16
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d020      	beq.n	800d948 <osThreadCreate+0x54>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01c      	beq.n	800d948 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685c      	ldr	r4, [r3, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691e      	ldr	r6, [r3, #16]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff ff9a 	bl	800d85a <makeFreeRtosPriority>
 800d926:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d930:	9202      	str	r2, [sp, #8]
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	9100      	str	r1, [sp, #0]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	4632      	mov	r2, r6
 800d93a:	4629      	mov	r1, r5
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 fab3 	bl	800eea8 <xTaskCreateStatic>
 800d942:	4603      	mov	r3, r0
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	e01c      	b.n	800d982 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685c      	ldr	r4, [r3, #4]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d954:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff ff7c 	bl	800d85a <makeFreeRtosPriority>
 800d962:	4602      	mov	r2, r0
 800d964:	f107 030c 	add.w	r3, r7, #12
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	9200      	str	r2, [sp, #0]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	4632      	mov	r2, r6
 800d970:	4629      	mov	r1, r5
 800d972:	4620      	mov	r0, r4
 800d974:	f001 fafe 	bl	800ef74 <xTaskCreate>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d001      	beq.n	800d982 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	e000      	b.n	800d984 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d982:	68fb      	ldr	r3, [r7, #12]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d98c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <osDelay+0x16>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	e000      	b.n	800d9a4 <osDelay+0x18>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f001 fc37 	bl	800f218 <vTaskDelay>
  
  return osOK;
 800d9aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af02      	add	r7, sp, #8
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d016      	beq.n	800d9f4 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d10a      	bne.n	800d9e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	9200      	str	r2, [sp, #0]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	2001      	movs	r0, #1
 800d9da:	f000 fabf 	bl	800df5c <xQueueGenericCreateStatic>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	e023      	b.n	800da2a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800d9e2:	6838      	ldr	r0, [r7, #0]
 800d9e4:	6839      	ldr	r1, [r7, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f000 fb9f 	bl	800e12e <xQueueCreateCountingSemaphoreStatic>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	e01a      	b.n	800da2a <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d110      	bne.n	800da1c <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	2001      	movs	r0, #1
 800da00:	f000 fb33 	bl	800e06a <xQueueGenericCreate>
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d005      	beq.n	800da18 <osSemaphoreCreate+0x64>
 800da0c:	2300      	movs	r3, #0
 800da0e:	2200      	movs	r2, #0
 800da10:	2100      	movs	r1, #0
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 fc02 	bl	800e21c <xQueueGenericSend>
      return sema;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e006      	b.n	800da2a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	4611      	mov	r1, r2
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fbc0 	bl	800e1a8 <xQueueCreateCountingSemaphore>
 800da28:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800da3e:	2300      	movs	r3, #0
 800da40:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d101      	bne.n	800da4c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800da48:	2380      	movs	r3, #128	@ 0x80
 800da4a:	e03a      	b.n	800dac2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da56:	d103      	bne.n	800da60 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800da58:	f04f 33ff 	mov.w	r3, #4294967295
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	e009      	b.n	800da74 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d006      	beq.n	800da74 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <osSemaphoreWait+0x40>
      ticks = 1;
 800da70:	2301      	movs	r3, #1
 800da72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800da74:	f7ff ff09 	bl	800d88a <inHandlerMode>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d017      	beq.n	800daae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800da7e:	f107 0308 	add.w	r3, r7, #8
 800da82:	461a      	mov	r2, r3
 800da84:	2100      	movs	r1, #0
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f001 f80e 	bl	800eaa8 <xQueueReceiveFromISR>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d001      	beq.n	800da96 <osSemaphoreWait+0x62>
      return osErrorOS;
 800da92:	23ff      	movs	r3, #255	@ 0xff
 800da94:	e015      	b.n	800dac2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d011      	beq.n	800dac0 <osSemaphoreWait+0x8c>
 800da9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <osSemaphoreWait+0x98>)
 800da9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	e008      	b.n	800dac0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fee1 	bl	800e878 <xQueueSemaphoreTake>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d001      	beq.n	800dac0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dabc:	23ff      	movs	r3, #255	@ 0xff
 800dabe:	e000      	b.n	800dac2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	e000ed04 	.word	0xe000ed04

0800dad0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dadc:	2300      	movs	r3, #0
 800dade:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dae0:	f7ff fed3 	bl	800d88a <inHandlerMode>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d016      	beq.n	800db18 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fd40 	bl	800e576 <xQueueGiveFromISR>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d001      	beq.n	800db00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dafc:	23ff      	movs	r3, #255	@ 0xff
 800dafe:	e017      	b.n	800db30 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d013      	beq.n	800db2e <osSemaphoreRelease+0x5e>
 800db06:	4b0c      	ldr	r3, [pc, #48]	@ (800db38 <osSemaphoreRelease+0x68>)
 800db08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	e00a      	b.n	800db2e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800db18:	2300      	movs	r3, #0
 800db1a:	2200      	movs	r2, #0
 800db1c:	2100      	movs	r1, #0
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fb7c 	bl	800e21c <xQueueGenericSend>
 800db24:	4603      	mov	r3, r0
 800db26:	2b01      	cmp	r3, #1
 800db28:	d001      	beq.n	800db2e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800db2a:	23ff      	movs	r3, #255	@ 0xff
 800db2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800db2e:	68fb      	ldr	r3, [r7, #12]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800db44:	f7ff fea1 	bl	800d88a <inHandlerMode>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800db4e:	2382      	movs	r3, #130	@ 0x82
 800db50:	e003      	b.n	800db5a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f001 f830 	bl	800ebb8 <vQueueDelete>

  return osOK; 
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800db62:	b590      	push	{r4, r7, lr}
 800db64:	b085      	sub	sp, #20
 800db66:	af02      	add	r7, sp, #8
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d011      	beq.n	800db98 <osMessageCreate+0x36>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00d      	beq.n	800db98 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6859      	ldr	r1, [r3, #4]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689a      	ldr	r2, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2400      	movs	r4, #0
 800db8e:	9400      	str	r4, [sp, #0]
 800db90:	f000 f9e4 	bl	800df5c <xQueueGenericCreateStatic>
 800db94:	4603      	mov	r3, r0
 800db96:	e008      	b.n	800dbaa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	4619      	mov	r1, r3
 800dba4:	f000 fa61 	bl	800e06a <xQueueGenericCreate>
 800dba8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	370c      	adds	r7, #12
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd90      	pop	{r4, r7, pc}
	...

0800dbb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <osMessagePut+0x1e>
    ticks = 1;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dbd2:	f7ff fe5a 	bl	800d88a <inHandlerMode>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d018      	beq.n	800dc0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800dbdc:	f107 0210 	add.w	r2, r7, #16
 800dbe0:	f107 0108 	add.w	r1, r7, #8
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 fc22 	bl	800e430 <xQueueGenericSendFromISR>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d001      	beq.n	800dbf6 <osMessagePut+0x42>
      return osErrorOS;
 800dbf2:	23ff      	movs	r3, #255	@ 0xff
 800dbf4:	e018      	b.n	800dc28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d014      	beq.n	800dc26 <osMessagePut+0x72>
 800dbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800dc30 <osMessagePut+0x7c>)
 800dbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	e00b      	b.n	800dc26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800dc0e:	f107 0108 	add.w	r1, r7, #8
 800dc12:	2300      	movs	r3, #0
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 fb00 	bl	800e21c <xQueueGenericSend>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d001      	beq.n	800dc26 <osMessagePut+0x72>
      return osErrorOS;
 800dc22:	23ff      	movs	r3, #255	@ 0xff
 800dc24:	e000      	b.n	800dc28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	e000ed04 	.word	0xe000ed04

0800dc34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b08b      	sub	sp, #44	@ 0x2c
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10a      	bne.n	800dc64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800dc4e:	2380      	movs	r3, #128	@ 0x80
 800dc50:	617b      	str	r3, [r7, #20]
    return event;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	461c      	mov	r4, r3
 800dc56:	f107 0314 	add.w	r3, r7, #20
 800dc5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc62:	e054      	b.n	800dd0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800dc64:	2300      	movs	r3, #0
 800dc66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc72:	d103      	bne.n	800dc7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800dc74:	f04f 33ff 	mov.w	r3, #4294967295
 800dc78:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc7a:	e009      	b.n	800dc90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d006      	beq.n	800dc90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <osMessageGet+0x5c>
      ticks = 1;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dc90:	f7ff fdfb 	bl	800d88a <inHandlerMode>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d01c      	beq.n	800dcd4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800dc9a:	f107 0220 	add.w	r2, r7, #32
 800dc9e:	f107 0314 	add.w	r3, r7, #20
 800dca2:	3304      	adds	r3, #4
 800dca4:	4619      	mov	r1, r3
 800dca6:	68b8      	ldr	r0, [r7, #8]
 800dca8:	f000 fefe 	bl	800eaa8 <xQueueReceiveFromISR>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d102      	bne.n	800dcb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800dcb2:	2310      	movs	r3, #16
 800dcb4:	617b      	str	r3, [r7, #20]
 800dcb6:	e001      	b.n	800dcbc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01d      	beq.n	800dcfe <osMessageGet+0xca>
 800dcc2:	4b15      	ldr	r3, [pc, #84]	@ (800dd18 <osMessageGet+0xe4>)
 800dcc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	e014      	b.n	800dcfe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dcd4:	f107 0314 	add.w	r3, r7, #20
 800dcd8:	3304      	adds	r3, #4
 800dcda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcdc:	4619      	mov	r1, r3
 800dcde:	68b8      	ldr	r0, [r7, #8]
 800dce0:	f000 fce2 	bl	800e6a8 <xQueueReceive>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d102      	bne.n	800dcf0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800dcea:	2310      	movs	r3, #16
 800dcec:	617b      	str	r3, [r7, #20]
 800dcee:	e006      	b.n	800dcfe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d101      	bne.n	800dcfa <osMessageGet+0xc6>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e000      	b.n	800dcfc <osMessageGet+0xc8>
 800dcfa:	2340      	movs	r3, #64	@ 0x40
 800dcfc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	461c      	mov	r4, r3
 800dd02:	f107 0314 	add.w	r3, r7, #20
 800dd06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	372c      	adds	r7, #44	@ 0x2c
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd90      	pop	{r4, r7, pc}
 800dd16:	bf00      	nop
 800dd18:	e000ed04 	.word	0xe000ed04

0800dd1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f103 0208 	add.w	r2, r3, #8
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f103 0208 	add.w	r2, r3, #8
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f103 0208 	add.w	r2, r3, #8
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd76:	b480      	push	{r7}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	689a      	ldr	r2, [r3, #8]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	1c5a      	adds	r2, r3, #1
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	601a      	str	r2, [r3, #0]
}
 800ddb2:	bf00      	nop
 800ddb4:	3714      	adds	r7, #20
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddbe:	b480      	push	{r7}
 800ddc0:	b085      	sub	sp, #20
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd4:	d103      	bne.n	800ddde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	e00c      	b.n	800ddf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3308      	adds	r3, #8
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	e002      	b.n	800ddec <vListInsert+0x2e>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	60fb      	str	r3, [r7, #12]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d2f6      	bcs.n	800dde6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	1c5a      	adds	r2, r3, #1
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	601a      	str	r2, [r3, #0]
}
 800de24:	bf00      	nop
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	6892      	ldr	r2, [r2, #8]
 800de46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	6852      	ldr	r2, [r2, #4]
 800de50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d103      	bne.n	800de64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	689a      	ldr	r2, [r3, #8]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	1e5a      	subs	r2, r3, #1
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10d      	bne.n	800deb4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9c:	b672      	cpsid	i
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	b662      	cpsie	i
 800deac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800deae:	bf00      	nop
 800deb0:	bf00      	nop
 800deb2:	e7fd      	b.n	800deb0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800deb4:	f002 fa8a 	bl	80103cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dec0:	68f9      	ldr	r1, [r7, #12]
 800dec2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dec4:	fb01 f303 	mul.w	r3, r1, r3
 800dec8:	441a      	add	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dee4:	3b01      	subs	r3, #1
 800dee6:	68f9      	ldr	r1, [r7, #12]
 800dee8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800deea:	fb01 f303 	mul.w	r3, r1, r3
 800deee:	441a      	add	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	22ff      	movs	r2, #255	@ 0xff
 800def8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	22ff      	movs	r2, #255	@ 0xff
 800df00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d114      	bne.n	800df34 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d01a      	beq.n	800df48 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3310      	adds	r3, #16
 800df16:	4618      	mov	r0, r3
 800df18:	f001 fc3e 	bl	800f798 <xTaskRemoveFromEventList>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d012      	beq.n	800df48 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df22:	4b0d      	ldr	r3, [pc, #52]	@ (800df58 <xQueueGenericReset+0xd4>)
 800df24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df28:	601a      	str	r2, [r3, #0]
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	e009      	b.n	800df48 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3310      	adds	r3, #16
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff feef 	bl	800dd1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3324      	adds	r3, #36	@ 0x24
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff feea 	bl	800dd1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df48:	f002 fa76 	bl	8010438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df4c:	2301      	movs	r3, #1
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	e000ed04 	.word	0xe000ed04

0800df5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08e      	sub	sp, #56	@ 0x38
 800df60:	af02      	add	r7, sp, #8
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10d      	bne.n	800df8c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df74:	b672      	cpsid	i
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	b662      	cpsie	i
 800df84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800df86:	bf00      	nop
 800df88:	bf00      	nop
 800df8a:	e7fd      	b.n	800df88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10d      	bne.n	800dfae <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	b672      	cpsid	i
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	b662      	cpsie	i
 800dfa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	e7fd      	b.n	800dfaa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <xQueueGenericCreateStatic+0x5e>
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <xQueueGenericCreateStatic+0x62>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e000      	b.n	800dfc0 <xQueueGenericCreateStatic+0x64>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10d      	bne.n	800dfe0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc8:	b672      	cpsid	i
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	b662      	cpsie	i
 800dfd8:	623b      	str	r3, [r7, #32]
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	e7fd      	b.n	800dfdc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d102      	bne.n	800dfec <xQueueGenericCreateStatic+0x90>
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <xQueueGenericCreateStatic+0x94>
 800dfec:	2301      	movs	r3, #1
 800dfee:	e000      	b.n	800dff2 <xQueueGenericCreateStatic+0x96>
 800dff0:	2300      	movs	r3, #0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10d      	bne.n	800e012 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	b672      	cpsid	i
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	b662      	cpsie	i
 800e00a:	61fb      	str	r3, [r7, #28]
}
 800e00c:	bf00      	nop
 800e00e:	bf00      	nop
 800e010:	e7fd      	b.n	800e00e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e012:	2348      	movs	r3, #72	@ 0x48
 800e014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b48      	cmp	r3, #72	@ 0x48
 800e01a:	d00d      	beq.n	800e038 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	b672      	cpsid	i
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	b662      	cpsie	i
 800e030:	61bb      	str	r3, [r7, #24]
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	e7fd      	b.n	800e034 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e038:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00d      	beq.n	800e060 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e04c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	4613      	mov	r3, r2
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f000 f848 	bl	800e0f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e062:	4618      	mov	r0, r3
 800e064:	3730      	adds	r7, #48	@ 0x30
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b08a      	sub	sp, #40	@ 0x28
 800e06e:	af02      	add	r7, sp, #8
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	4613      	mov	r3, r2
 800e076:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10d      	bne.n	800e09a <xQueueGenericCreate+0x30>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	b672      	cpsid	i
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	b662      	cpsie	i
 800e092:	613b      	str	r3, [r7, #16]
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop
 800e098:	e7fd      	b.n	800e096 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	e004      	b.n	800e0b0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	fb02 f303 	mul.w	r3, r2, r3
 800e0ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	3348      	adds	r3, #72	@ 0x48
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f002 fab7 	bl	8010628 <pvPortMalloc>
 800e0ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d011      	beq.n	800e0e6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	3348      	adds	r3, #72	@ 0x48
 800e0ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0d4:	79fa      	ldrb	r2, [r7, #7]
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 f805 	bl	800e0f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0e6:	69bb      	ldr	r3, [r7, #24]
	}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3720      	adds	r7, #32
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d103      	bne.n	800e10c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	69ba      	ldr	r2, [r7, #24]
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	e002      	b.n	800e112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e11e:	2101      	movs	r1, #1
 800e120:	69b8      	ldr	r0, [r7, #24]
 800e122:	f7ff feaf 	bl	800de84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b08a      	sub	sp, #40	@ 0x28
 800e132:	af02      	add	r7, sp, #8
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10d      	bne.n	800e15c <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e144:	b672      	cpsid	i
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	b662      	cpsie	i
 800e154:	61bb      	str	r3, [r7, #24]
}
 800e156:	bf00      	nop
 800e158:	bf00      	nop
 800e15a:	e7fd      	b.n	800e158 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	429a      	cmp	r2, r3
 800e162:	d90d      	bls.n	800e180 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e168:	b672      	cpsid	i
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	b662      	cpsie	i
 800e178:	617b      	str	r3, [r7, #20]
}
 800e17a:	bf00      	nop
 800e17c:	bf00      	nop
 800e17e:	e7fd      	b.n	800e17c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e180:	2302      	movs	r3, #2
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	2100      	movs	r1, #0
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7ff fee6 	bl	800df5c <xQueueGenericCreateStatic>
 800e190:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e19e:	69fb      	ldr	r3, [r7, #28]
	}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10d      	bne.n	800e1d4 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1bc:	b672      	cpsid	i
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	b662      	cpsie	i
 800e1cc:	613b      	str	r3, [r7, #16]
}
 800e1ce:	bf00      	nop
 800e1d0:	bf00      	nop
 800e1d2:	e7fd      	b.n	800e1d0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e1d4:	683a      	ldr	r2, [r7, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d90d      	bls.n	800e1f8 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	b672      	cpsid	i
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	b662      	cpsie	i
 800e1f0:	60fb      	str	r3, [r7, #12]
}
 800e1f2:	bf00      	nop
 800e1f4:	bf00      	nop
 800e1f6:	e7fd      	b.n	800e1f4 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e1f8:	2202      	movs	r2, #2
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ff34 	bl	800e06a <xQueueGenericCreate>
 800e202:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e210:	697b      	ldr	r3, [r7, #20]
	}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
	...

0800e21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08e      	sub	sp, #56	@ 0x38
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e22a:	2300      	movs	r3, #0
 800e22c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10d      	bne.n	800e254 <xQueueGenericSend+0x38>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23c:	b672      	cpsid	i
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	b662      	cpsie	i
 800e24c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e24e:	bf00      	nop
 800e250:	bf00      	nop
 800e252:	e7fd      	b.n	800e250 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d103      	bne.n	800e262 <xQueueGenericSend+0x46>
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <xQueueGenericSend+0x4a>
 800e262:	2301      	movs	r3, #1
 800e264:	e000      	b.n	800e268 <xQueueGenericSend+0x4c>
 800e266:	2300      	movs	r3, #0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10d      	bne.n	800e288 <xQueueGenericSend+0x6c>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e270:	b672      	cpsid	i
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	b662      	cpsie	i
 800e280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e282:	bf00      	nop
 800e284:	bf00      	nop
 800e286:	e7fd      	b.n	800e284 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d103      	bne.n	800e296 <xQueueGenericSend+0x7a>
 800e28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e292:	2b01      	cmp	r3, #1
 800e294:	d101      	bne.n	800e29a <xQueueGenericSend+0x7e>
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <xQueueGenericSend+0x80>
 800e29a:	2300      	movs	r3, #0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10d      	bne.n	800e2bc <xQueueGenericSend+0xa0>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	b672      	cpsid	i
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	b662      	cpsie	i
 800e2b4:	623b      	str	r3, [r7, #32]
}
 800e2b6:	bf00      	nop
 800e2b8:	bf00      	nop
 800e2ba:	e7fd      	b.n	800e2b8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2bc:	f001 fc4a 	bl	800fb54 <xTaskGetSchedulerState>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <xQueueGenericSend+0xb0>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <xQueueGenericSend+0xb4>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e000      	b.n	800e2d2 <xQueueGenericSend+0xb6>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10d      	bne.n	800e2f2 <xQueueGenericSend+0xd6>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2da:	b672      	cpsid	i
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	b662      	cpsie	i
 800e2ea:	61fb      	str	r3, [r7, #28]
}
 800e2ec:	bf00      	nop
 800e2ee:	bf00      	nop
 800e2f0:	e7fd      	b.n	800e2ee <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2f2:	f002 f86b 	bl	80103cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d302      	bcc.n	800e308 <xQueueGenericSend+0xec>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d129      	bne.n	800e35c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	68b9      	ldr	r1, [r7, #8]
 800e30c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e30e:	f000 fc91 	bl	800ec34 <prvCopyDataToQueue>
 800e312:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d010      	beq.n	800e33e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	3324      	adds	r3, #36	@ 0x24
 800e320:	4618      	mov	r0, r3
 800e322:	f001 fa39 	bl	800f798 <xTaskRemoveFromEventList>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d013      	beq.n	800e354 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e32c:	4b3f      	ldr	r3, [pc, #252]	@ (800e42c <xQueueGenericSend+0x210>)
 800e32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e332:	601a      	str	r2, [r3, #0]
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	e00a      	b.n	800e354 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e344:	4b39      	ldr	r3, [pc, #228]	@ (800e42c <xQueueGenericSend+0x210>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e354:	f002 f870 	bl	8010438 <vPortExitCritical>
				return pdPASS;
 800e358:	2301      	movs	r3, #1
 800e35a:	e063      	b.n	800e424 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d103      	bne.n	800e36a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e362:	f002 f869 	bl	8010438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e366:	2300      	movs	r3, #0
 800e368:	e05c      	b.n	800e424 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d106      	bne.n	800e37e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e370:	f107 0314 	add.w	r3, r7, #20
 800e374:	4618      	mov	r0, r3
 800e376:	f001 fa75 	bl	800f864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e37a:	2301      	movs	r3, #1
 800e37c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e37e:	f002 f85b 	bl	8010438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e382:	f000 ffef 	bl	800f364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e386:	f002 f821 	bl	80103cc <vPortEnterCritical>
 800e38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e390:	b25b      	sxtb	r3, r3
 800e392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e396:	d103      	bne.n	800e3a0 <xQueueGenericSend+0x184>
 800e398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3a6:	b25b      	sxtb	r3, r3
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d103      	bne.n	800e3b6 <xQueueGenericSend+0x19a>
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3b6:	f002 f83f 	bl	8010438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3ba:	1d3a      	adds	r2, r7, #4
 800e3bc:	f107 0314 	add.w	r3, r7, #20
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f001 fa64 	bl	800f890 <xTaskCheckForTimeOut>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d124      	bne.n	800e418 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3d0:	f000 fd28 	bl	800ee24 <prvIsQueueFull>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d018      	beq.n	800e40c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	3310      	adds	r3, #16
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f001 f9b0 	bl	800f748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3ea:	f000 fcb3 	bl	800ed54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3ee:	f000 ffc7 	bl	800f380 <xTaskResumeAll>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f47f af7c 	bne.w	800e2f2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e42c <xQueueGenericSend+0x210>)
 800e3fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	e772      	b.n	800e2f2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e40c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e40e:	f000 fca1 	bl	800ed54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e412:	f000 ffb5 	bl	800f380 <xTaskResumeAll>
 800e416:	e76c      	b.n	800e2f2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e41a:	f000 fc9b 	bl	800ed54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e41e:	f000 ffaf 	bl	800f380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e422:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e424:	4618      	mov	r0, r3
 800e426:	3738      	adds	r7, #56	@ 0x38
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	e000ed04 	.word	0xe000ed04

0800e430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08e      	sub	sp, #56	@ 0x38
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10d      	bne.n	800e464 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	b672      	cpsid	i
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	b662      	cpsie	i
 800e45c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d103      	bne.n	800e472 <xQueueGenericSendFromISR+0x42>
 800e46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <xQueueGenericSendFromISR+0x46>
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <xQueueGenericSendFromISR+0x48>
 800e476:	2300      	movs	r3, #0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d10d      	bne.n	800e498 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e480:	b672      	cpsid	i
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	b662      	cpsie	i
 800e490:	623b      	str	r3, [r7, #32]
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	e7fd      	b.n	800e494 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d103      	bne.n	800e4a6 <xQueueGenericSendFromISR+0x76>
 800e49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d101      	bne.n	800e4aa <xQueueGenericSendFromISR+0x7a>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e000      	b.n	800e4ac <xQueueGenericSendFromISR+0x7c>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10d      	bne.n	800e4cc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b4:	b672      	cpsid	i
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	b662      	cpsie	i
 800e4c4:	61fb      	str	r3, [r7, #28]
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	e7fd      	b.n	800e4c8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4cc:	f002 f866 	bl	801059c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4d0:	f3ef 8211 	mrs	r2, BASEPRI
 800e4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d8:	b672      	cpsid	i
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	b662      	cpsie	i
 800e4e8:	61ba      	str	r2, [r7, #24]
 800e4ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d302      	bcc.n	800e502 <xQueueGenericSendFromISR+0xd2>
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d12c      	bne.n	800e55c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e512:	f000 fb8f 	bl	800ec34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e516:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51e:	d112      	bne.n	800e546 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e524:	2b00      	cmp	r3, #0
 800e526:	d016      	beq.n	800e556 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52a:	3324      	adds	r3, #36	@ 0x24
 800e52c:	4618      	mov	r0, r3
 800e52e:	f001 f933 	bl	800f798 <xTaskRemoveFromEventList>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00e      	beq.n	800e556 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00b      	beq.n	800e556 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	e007      	b.n	800e556 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e546:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e54a:	3301      	adds	r3, #1
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	b25a      	sxtb	r2, r3
 800e550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e556:	2301      	movs	r3, #1
 800e558:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e55a:	e001      	b.n	800e560 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e56a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3738      	adds	r7, #56	@ 0x38
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b08e      	sub	sp, #56	@ 0x38
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e586:	2b00      	cmp	r3, #0
 800e588:	d10d      	bne.n	800e5a6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	b672      	cpsid	i
 800e590:	f383 8811 	msr	BASEPRI, r3
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	b662      	cpsie	i
 800e59e:	623b      	str	r3, [r7, #32]
}
 800e5a0:	bf00      	nop
 800e5a2:	bf00      	nop
 800e5a4:	e7fd      	b.n	800e5a2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00d      	beq.n	800e5ca <xQueueGiveFromISR+0x54>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b2:	b672      	cpsid	i
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	b662      	cpsie	i
 800e5c2:	61fb      	str	r3, [r7, #28]
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop
 800e5c8:	e7fd      	b.n	800e5c6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <xQueueGiveFromISR+0x64>
 800e5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <xQueueGiveFromISR+0x68>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <xQueueGiveFromISR+0x6a>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10d      	bne.n	800e600 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e8:	b672      	cpsid	i
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	b662      	cpsie	i
 800e5f8:	61bb      	str	r3, [r7, #24]
}
 800e5fa:	bf00      	nop
 800e5fc:	bf00      	nop
 800e5fe:	e7fd      	b.n	800e5fc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e600:	f001 ffcc 	bl	801059c <vPortValidateInterruptPriority>
	__asm volatile
 800e604:	f3ef 8211 	mrs	r2, BASEPRI
 800e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60c:	b672      	cpsid	i
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	b662      	cpsie	i
 800e61c:	617a      	str	r2, [r7, #20]
 800e61e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e620:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e622:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e628:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e630:	429a      	cmp	r2, r3
 800e632:	d22b      	bcs.n	800e68c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e644:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e646:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64e:	d112      	bne.n	800e676 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e654:	2b00      	cmp	r3, #0
 800e656:	d016      	beq.n	800e686 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65a:	3324      	adds	r3, #36	@ 0x24
 800e65c:	4618      	mov	r0, r3
 800e65e:	f001 f89b 	bl	800f798 <xTaskRemoveFromEventList>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00e      	beq.n	800e686 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00b      	beq.n	800e686 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	2201      	movs	r2, #1
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	e007      	b.n	800e686 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e67a:	3301      	adds	r3, #1
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	b25a      	sxtb	r2, r3
 800e680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e682:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e686:	2301      	movs	r3, #1
 800e688:	637b      	str	r3, [r7, #52]	@ 0x34
 800e68a:	e001      	b.n	800e690 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e68c:	2300      	movs	r3, #0
 800e68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e692:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f383 8811 	msr	BASEPRI, r3
}
 800e69a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3738      	adds	r7, #56	@ 0x38
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08c      	sub	sp, #48	@ 0x30
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10d      	bne.n	800e6de <xQueueReceive+0x36>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	b672      	cpsid	i
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	b662      	cpsie	i
 800e6d6:	623b      	str	r3, [r7, #32]
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	e7fd      	b.n	800e6da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d103      	bne.n	800e6ec <xQueueReceive+0x44>
 800e6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d101      	bne.n	800e6f0 <xQueueReceive+0x48>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e000      	b.n	800e6f2 <xQueueReceive+0x4a>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10d      	bne.n	800e712 <xQueueReceive+0x6a>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fa:	b672      	cpsid	i
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	b662      	cpsie	i
 800e70a:	61fb      	str	r3, [r7, #28]
}
 800e70c:	bf00      	nop
 800e70e:	bf00      	nop
 800e710:	e7fd      	b.n	800e70e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e712:	f001 fa1f 	bl	800fb54 <xTaskGetSchedulerState>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d102      	bne.n	800e722 <xQueueReceive+0x7a>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d101      	bne.n	800e726 <xQueueReceive+0x7e>
 800e722:	2301      	movs	r3, #1
 800e724:	e000      	b.n	800e728 <xQueueReceive+0x80>
 800e726:	2300      	movs	r3, #0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10d      	bne.n	800e748 <xQueueReceive+0xa0>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	b672      	cpsid	i
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	b662      	cpsie	i
 800e740:	61bb      	str	r3, [r7, #24]
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	e7fd      	b.n	800e744 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e748:	f001 fe40 	bl	80103cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e750:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	2b00      	cmp	r3, #0
 800e756:	d01f      	beq.n	800e798 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e758:	68b9      	ldr	r1, [r7, #8]
 800e75a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e75c:	f000 fad4 	bl	800ed08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e762:	1e5a      	subs	r2, r3, #1
 800e764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e766:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00f      	beq.n	800e790 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e772:	3310      	adds	r3, #16
 800e774:	4618      	mov	r0, r3
 800e776:	f001 f80f 	bl	800f798 <xTaskRemoveFromEventList>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d007      	beq.n	800e790 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e780:	4b3c      	ldr	r3, [pc, #240]	@ (800e874 <xQueueReceive+0x1cc>)
 800e782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e786:	601a      	str	r2, [r3, #0]
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e790:	f001 fe52 	bl	8010438 <vPortExitCritical>
				return pdPASS;
 800e794:	2301      	movs	r3, #1
 800e796:	e069      	b.n	800e86c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e79e:	f001 fe4b 	bl	8010438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e062      	b.n	800e86c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7ac:	f107 0310 	add.w	r3, r7, #16
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f001 f857 	bl	800f864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7ba:	f001 fe3d 	bl	8010438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7be:	f000 fdd1 	bl	800f364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7c2:	f001 fe03 	bl	80103cc <vPortEnterCritical>
 800e7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e7cc:	b25b      	sxtb	r3, r3
 800e7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d2:	d103      	bne.n	800e7dc <xQueueReceive+0x134>
 800e7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7e2:	b25b      	sxtb	r3, r3
 800e7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e8:	d103      	bne.n	800e7f2 <xQueueReceive+0x14a>
 800e7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7f2:	f001 fe21 	bl	8010438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7f6:	1d3a      	adds	r2, r7, #4
 800e7f8:	f107 0310 	add.w	r3, r7, #16
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4618      	mov	r0, r3
 800e800:	f001 f846 	bl	800f890 <xTaskCheckForTimeOut>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d123      	bne.n	800e852 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e80a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e80c:	f000 faf4 	bl	800edf8 <prvIsQueueEmpty>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d017      	beq.n	800e846 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e818:	3324      	adds	r3, #36	@ 0x24
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 ff92 	bl	800f748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e826:	f000 fa95 	bl	800ed54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e82a:	f000 fda9 	bl	800f380 <xTaskResumeAll>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d189      	bne.n	800e748 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e834:	4b0f      	ldr	r3, [pc, #60]	@ (800e874 <xQueueReceive+0x1cc>)
 800e836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	e780      	b.n	800e748 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e848:	f000 fa84 	bl	800ed54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e84c:	f000 fd98 	bl	800f380 <xTaskResumeAll>
 800e850:	e77a      	b.n	800e748 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e854:	f000 fa7e 	bl	800ed54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e858:	f000 fd92 	bl	800f380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e85c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e85e:	f000 facb 	bl	800edf8 <prvIsQueueEmpty>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	f43f af6f 	beq.w	800e748 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e86a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3730      	adds	r7, #48	@ 0x30
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	e000ed04 	.word	0xe000ed04

0800e878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08e      	sub	sp, #56	@ 0x38
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e88a:	2300      	movs	r3, #0
 800e88c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10d      	bne.n	800e8b0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e898:	b672      	cpsid	i
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	b662      	cpsie	i
 800e8a8:	623b      	str	r3, [r7, #32]
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	e7fd      	b.n	800e8ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00d      	beq.n	800e8d4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8bc:	b672      	cpsid	i
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	b662      	cpsie	i
 800e8cc:	61fb      	str	r3, [r7, #28]
}
 800e8ce:	bf00      	nop
 800e8d0:	bf00      	nop
 800e8d2:	e7fd      	b.n	800e8d0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8d4:	f001 f93e 	bl	800fb54 <xTaskGetSchedulerState>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d102      	bne.n	800e8e4 <xQueueSemaphoreTake+0x6c>
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <xQueueSemaphoreTake+0x70>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e000      	b.n	800e8ea <xQueueSemaphoreTake+0x72>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10d      	bne.n	800e90a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f2:	b672      	cpsid	i
 800e8f4:	f383 8811 	msr	BASEPRI, r3
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	b662      	cpsie	i
 800e902:	61bb      	str	r3, [r7, #24]
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	e7fd      	b.n	800e906 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e90a:	f001 fd5f 	bl	80103cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e912:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e916:	2b00      	cmp	r3, #0
 800e918:	d024      	beq.n	800e964 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91c:	1e5a      	subs	r2, r3, #1
 800e91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e920:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d104      	bne.n	800e934 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e92a:	f001 fadd 	bl	800fee8 <pvTaskIncrementMutexHeldCount>
 800e92e:	4602      	mov	r2, r0
 800e930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e932:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e936:	691b      	ldr	r3, [r3, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00f      	beq.n	800e95c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93e:	3310      	adds	r3, #16
 800e940:	4618      	mov	r0, r3
 800e942:	f000 ff29 	bl	800f798 <xTaskRemoveFromEventList>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d007      	beq.n	800e95c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e94c:	4b55      	ldr	r3, [pc, #340]	@ (800eaa4 <xQueueSemaphoreTake+0x22c>)
 800e94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e95c:	f001 fd6c 	bl	8010438 <vPortExitCritical>
				return pdPASS;
 800e960:	2301      	movs	r3, #1
 800e962:	e09a      	b.n	800ea9a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d114      	bne.n	800e994 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00d      	beq.n	800e98c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e974:	b672      	cpsid	i
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	b662      	cpsie	i
 800e984:	617b      	str	r3, [r7, #20]
}
 800e986:	bf00      	nop
 800e988:	bf00      	nop
 800e98a:	e7fd      	b.n	800e988 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e98c:	f001 fd54 	bl	8010438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e990:	2300      	movs	r3, #0
 800e992:	e082      	b.n	800ea9a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e99a:	f107 030c 	add.w	r3, r7, #12
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f000 ff60 	bl	800f864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9a8:	f001 fd46 	bl	8010438 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9ac:	f000 fcda 	bl	800f364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9b0:	f001 fd0c 	bl	80103cc <vPortEnterCritical>
 800e9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9ba:	b25b      	sxtb	r3, r3
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d103      	bne.n	800e9ca <xQueueSemaphoreTake+0x152>
 800e9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9d0:	b25b      	sxtb	r3, r3
 800e9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d6:	d103      	bne.n	800e9e0 <xQueueSemaphoreTake+0x168>
 800e9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9e0:	f001 fd2a 	bl	8010438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9e4:	463a      	mov	r2, r7
 800e9e6:	f107 030c 	add.w	r3, r7, #12
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 ff4f 	bl	800f890 <xTaskCheckForTimeOut>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d132      	bne.n	800ea5e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9fa:	f000 f9fd 	bl	800edf8 <prvIsQueueEmpty>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d026      	beq.n	800ea52 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d109      	bne.n	800ea20 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ea0c:	f001 fcde 	bl	80103cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f001 f8bb 	bl	800fb90 <xTaskPriorityInherit>
 800ea1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ea1c:	f001 fd0c 	bl	8010438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea22:	3324      	adds	r3, #36	@ 0x24
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	4611      	mov	r1, r2
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 fe8d 	bl	800f748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea30:	f000 f990 	bl	800ed54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea34:	f000 fca4 	bl	800f380 <xTaskResumeAll>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f47f af65 	bne.w	800e90a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ea40:	4b18      	ldr	r3, [pc, #96]	@ (800eaa4 <xQueueSemaphoreTake+0x22c>)
 800ea42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	e75b      	b.n	800e90a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ea52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea54:	f000 f97e 	bl	800ed54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea58:	f000 fc92 	bl	800f380 <xTaskResumeAll>
 800ea5c:	e755      	b.n	800e90a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ea5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea60:	f000 f978 	bl	800ed54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea64:	f000 fc8c 	bl	800f380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea6a:	f000 f9c5 	bl	800edf8 <prvIsQueueEmpty>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f43f af4a 	beq.w	800e90a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ea76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00d      	beq.n	800ea98 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ea7c:	f001 fca6 	bl	80103cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ea80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea82:	f000 f8bf 	bl	800ec04 <prvGetDisinheritPriorityAfterTimeout>
 800ea86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f001 f98a 	bl	800fda8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ea94:	f001 fcd0 	bl	8010438 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3738      	adds	r7, #56	@ 0x38
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	e000ed04 	.word	0xe000ed04

0800eaa8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08e      	sub	sp, #56	@ 0x38
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10d      	bne.n	800eada <xQueueReceiveFromISR+0x32>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac2:	b672      	cpsid	i
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	b662      	cpsie	i
 800ead2:	623b      	str	r3, [r7, #32]
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop
 800ead8:	e7fd      	b.n	800ead6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d103      	bne.n	800eae8 <xQueueReceiveFromISR+0x40>
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d101      	bne.n	800eaec <xQueueReceiveFromISR+0x44>
 800eae8:	2301      	movs	r3, #1
 800eaea:	e000      	b.n	800eaee <xQueueReceiveFromISR+0x46>
 800eaec:	2300      	movs	r3, #0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10d      	bne.n	800eb0e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800eaf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf6:	b672      	cpsid	i
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	b662      	cpsie	i
 800eb06:	61fb      	str	r3, [r7, #28]
}
 800eb08:	bf00      	nop
 800eb0a:	bf00      	nop
 800eb0c:	e7fd      	b.n	800eb0a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb0e:	f001 fd45 	bl	801059c <vPortValidateInterruptPriority>
	__asm volatile
 800eb12:	f3ef 8211 	mrs	r2, BASEPRI
 800eb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1a:	b672      	cpsid	i
 800eb1c:	f383 8811 	msr	BASEPRI, r3
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	b662      	cpsie	i
 800eb2a:	61ba      	str	r2, [r7, #24]
 800eb2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d02f      	beq.n	800eb9e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb48:	68b9      	ldr	r1, [r7, #8]
 800eb4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb4c:	f000 f8dc 	bl	800ed08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb52:	1e5a      	subs	r2, r3, #1
 800eb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb60:	d112      	bne.n	800eb88 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d016      	beq.n	800eb98 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6c:	3310      	adds	r3, #16
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fe12 	bl	800f798 <xTaskRemoveFromEventList>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00e      	beq.n	800eb98 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00b      	beq.n	800eb98 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]
 800eb86:	e007      	b.n	800eb98 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eb88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	b25a      	sxtb	r2, r3
 800eb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb9c:	e001      	b.n	800eba2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	637b      	str	r3, [r7, #52]	@ 0x34
 800eba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eba4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f383 8811 	msr	BASEPRI, r3
}
 800ebac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3738      	adds	r7, #56	@ 0x38
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10d      	bne.n	800ebe6 <vQueueDelete+0x2e>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebce:	b672      	cpsid	i
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	b662      	cpsie	i
 800ebde:	60bb      	str	r3, [r7, #8]
}
 800ebe0:	bf00      	nop
 800ebe2:	bf00      	nop
 800ebe4:	e7fd      	b.n	800ebe2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f000 f934 	bl	800ee54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f001 fde4 	bl	80107c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ebfc:	bf00      	nop
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f1c3 0307 	rsb	r3, r3, #7
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e001      	b.n	800ec26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ec22:	2300      	movs	r3, #0
 800ec24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ec26:	68fb      	ldr	r3, [r7, #12]
	}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3714      	adds	r7, #20
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec40:	2300      	movs	r3, #0
 800ec42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10d      	bne.n	800ec6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d14d      	bne.n	800ecf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f001 f816 	bl	800fc90 <xTaskPriorityDisinherit>
 800ec64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	609a      	str	r2, [r3, #8]
 800ec6c:	e043      	b.n	800ecf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d119      	bne.n	800eca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6858      	ldr	r0, [r3, #4]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	f001 ff70 	bl	8010b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685a      	ldr	r2, [r3, #4]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec8c:	441a      	add	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d32b      	bcc.n	800ecf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	605a      	str	r2, [r3, #4]
 800eca6:	e026      	b.n	800ecf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	68d8      	ldr	r0, [r3, #12]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	f001 ff56 	bl	8010b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	68da      	ldr	r2, [r3, #12]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecc0:	425b      	negs	r3, r3
 800ecc2:	441a      	add	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68da      	ldr	r2, [r3, #12]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d207      	bcs.n	800ece4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecdc:	425b      	negs	r3, r3
 800ecde:	441a      	add	r2, r3
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d105      	bne.n	800ecf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	1c5a      	adds	r2, r3, #1
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ecfe:	697b      	ldr	r3, [r7, #20]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d018      	beq.n	800ed4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	68da      	ldr	r2, [r3, #12]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed22:	441a      	add	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68da      	ldr	r2, [r3, #12]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d303      	bcc.n	800ed3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	68d9      	ldr	r1, [r3, #12]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed44:	461a      	mov	r2, r3
 800ed46:	6838      	ldr	r0, [r7, #0]
 800ed48:	f001 ff0c 	bl	8010b64 <memcpy>
	}
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed5c:	f001 fb36 	bl	80103cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed68:	e011      	b.n	800ed8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d012      	beq.n	800ed98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	3324      	adds	r3, #36	@ 0x24
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 fd0e 	bl	800f798 <xTaskRemoveFromEventList>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed82:	f000 fded 	bl	800f960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dce9      	bgt.n	800ed6a <prvUnlockQueue+0x16>
 800ed96:	e000      	b.n	800ed9a <prvUnlockQueue+0x46>
					break;
 800ed98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	22ff      	movs	r2, #255	@ 0xff
 800ed9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eda2:	f001 fb49 	bl	8010438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eda6:	f001 fb11 	bl	80103cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800edb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edb2:	e011      	b.n	800edd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d012      	beq.n	800ede2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3310      	adds	r3, #16
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 fce9 	bl	800f798 <xTaskRemoveFromEventList>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800edcc:	f000 fdc8 	bl	800f960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	3b01      	subs	r3, #1
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	dce9      	bgt.n	800edb4 <prvUnlockQueue+0x60>
 800ede0:	e000      	b.n	800ede4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ede2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	22ff      	movs	r2, #255	@ 0xff
 800ede8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800edec:	f001 fb24 	bl	8010438 <vPortExitCritical>
}
 800edf0:	bf00      	nop
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee00:	f001 fae4 	bl	80103cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d102      	bne.n	800ee12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e001      	b.n	800ee16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee16:	f001 fb0f 	bl	8010438 <vPortExitCritical>

	return xReturn;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee2c:	f001 face 	bl	80103cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d102      	bne.n	800ee42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	e001      	b.n	800ee46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee46:	f001 faf7 	bl	8010438 <vPortExitCritical>

	return xReturn;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	e016      	b.n	800ee90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ee62:	4a10      	ldr	r2, [pc, #64]	@ (800eea4 <vQueueUnregisterQueue+0x50>)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	00db      	lsls	r3, r3, #3
 800ee68:	4413      	add	r3, r2
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d10b      	bne.n	800ee8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ee72:	4a0c      	ldr	r2, [pc, #48]	@ (800eea4 <vQueueUnregisterQueue+0x50>)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2100      	movs	r1, #0
 800ee78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ee7c:	4a09      	ldr	r2, [pc, #36]	@ (800eea4 <vQueueUnregisterQueue+0x50>)
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	4413      	add	r3, r2
 800ee84:	2200      	movs	r2, #0
 800ee86:	605a      	str	r2, [r3, #4]
				break;
 800ee88:	e006      	b.n	800ee98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b07      	cmp	r3, #7
 800ee94:	d9e5      	bls.n	800ee62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ee96:	bf00      	nop
 800ee98:	bf00      	nop
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	20005ec8 	.word	0x20005ec8

0800eea8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b08e      	sub	sp, #56	@ 0x38
 800eeac:	af04      	add	r7, sp, #16
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
 800eeb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eeb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10d      	bne.n	800eed8 <xTaskCreateStatic+0x30>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec0:	b672      	cpsid	i
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	b662      	cpsie	i
 800eed0:	623b      	str	r3, [r7, #32]
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	e7fd      	b.n	800eed4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800eed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10d      	bne.n	800eefa <xTaskCreateStatic+0x52>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee2:	b672      	cpsid	i
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	b662      	cpsie	i
 800eef2:	61fb      	str	r3, [r7, #28]
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	e7fd      	b.n	800eef6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eefa:	23a0      	movs	r3, #160	@ 0xa0
 800eefc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	2ba0      	cmp	r3, #160	@ 0xa0
 800ef02:	d00d      	beq.n	800ef20 <xTaskCreateStatic+0x78>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef08:	b672      	cpsid	i
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	b662      	cpsie	i
 800ef18:	61bb      	str	r3, [r7, #24]
}
 800ef1a:	bf00      	nop
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ef20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ef22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01e      	beq.n	800ef66 <xTaskCreateStatic+0xbe>
 800ef28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d01b      	beq.n	800ef66 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ef38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ef40:	2300      	movs	r3, #0
 800ef42:	9303      	str	r3, [sp, #12]
 800ef44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef46:	9302      	str	r3, [sp, #8]
 800ef48:	f107 0314 	add.w	r3, r7, #20
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	68b9      	ldr	r1, [r7, #8]
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f000 f851 	bl	800f000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef60:	f000 f8f0 	bl	800f144 <prvAddNewTaskToReadyList>
 800ef64:	e001      	b.n	800ef6a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ef6a:	697b      	ldr	r3, [r7, #20]
	}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3728      	adds	r7, #40	@ 0x28
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b08c      	sub	sp, #48	@ 0x30
 800ef78:	af04      	add	r7, sp, #16
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	4613      	mov	r3, r2
 800ef82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f001 fb4d 	bl	8010628 <pvPortMalloc>
 800ef8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00e      	beq.n	800efb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ef96:	20a0      	movs	r0, #160	@ 0xa0
 800ef98:	f001 fb46 	bl	8010628 <pvPortMalloc>
 800ef9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d003      	beq.n	800efac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	631a      	str	r2, [r3, #48]	@ 0x30
 800efaa:	e005      	b.n	800efb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800efac:	6978      	ldr	r0, [r7, #20]
 800efae:	f001 fc09 	bl	80107c4 <vPortFree>
 800efb2:	e001      	b.n	800efb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800efb4:	2300      	movs	r3, #0
 800efb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d017      	beq.n	800efee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800efc6:	88fa      	ldrh	r2, [r7, #6]
 800efc8:	2300      	movs	r3, #0
 800efca:	9303      	str	r3, [sp, #12]
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	9302      	str	r3, [sp, #8]
 800efd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	68b9      	ldr	r1, [r7, #8]
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 f80f 	bl	800f000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800efe2:	69f8      	ldr	r0, [r7, #28]
 800efe4:	f000 f8ae 	bl	800f144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800efe8:	2301      	movs	r3, #1
 800efea:	61bb      	str	r3, [r7, #24]
 800efec:	e002      	b.n	800eff4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800efee:	f04f 33ff 	mov.w	r3, #4294967295
 800eff2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eff4:	69bb      	ldr	r3, [r7, #24]
	}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3720      	adds	r7, #32
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
	...

0800f000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f012:	6879      	ldr	r1, [r7, #4]
 800f014:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f018:	440b      	add	r3, r1
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	4413      	add	r3, r2
 800f01e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	f023 0307 	bic.w	r3, r3, #7
 800f026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	f003 0307 	and.w	r3, r3, #7
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <prvInitialiseNewTask+0x4e>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f036:	b672      	cpsid	i
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	b662      	cpsie	i
 800f046:	617b      	str	r3, [r7, #20]
}
 800f048:	bf00      	nop
 800f04a:	bf00      	nop
 800f04c:	e7fd      	b.n	800f04a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d01f      	beq.n	800f094 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f054:	2300      	movs	r3, #0
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	e012      	b.n	800f080 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	4413      	add	r3, r2
 800f060:	7819      	ldrb	r1, [r3, #0]
 800f062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	4413      	add	r3, r2
 800f068:	3334      	adds	r3, #52	@ 0x34
 800f06a:	460a      	mov	r2, r1
 800f06c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	4413      	add	r3, r2
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d006      	beq.n	800f088 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	3301      	adds	r3, #1
 800f07e:	61fb      	str	r3, [r7, #28]
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	2b0f      	cmp	r3, #15
 800f084:	d9e9      	bls.n	800f05a <prvInitialiseNewTask+0x5a>
 800f086:	e000      	b.n	800f08a <prvInitialiseNewTask+0x8a>
			{
				break;
 800f088:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f092:	e003      	b.n	800f09c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	2b06      	cmp	r3, #6
 800f0a0:	d901      	bls.n	800f0a6 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f0a2:	2306      	movs	r3, #6
 800f0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fe fe4d 	bl	800dd5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c4:	3318      	adds	r3, #24
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe fe48 	bl	800dd5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d4:	f1c3 0207 	rsb	r2, r3, #7
 800f0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f4:	334c      	adds	r3, #76	@ 0x4c
 800f0f6:	224c      	movs	r2, #76	@ 0x4c
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f001 fca0 	bl	8010a40 <memset>
 800f100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f102:	4a0d      	ldr	r2, [pc, #52]	@ (800f138 <prvInitialiseNewTask+0x138>)
 800f104:	651a      	str	r2, [r3, #80]	@ 0x50
 800f106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f108:	4a0c      	ldr	r2, [pc, #48]	@ (800f13c <prvInitialiseNewTask+0x13c>)
 800f10a:	655a      	str	r2, [r3, #84]	@ 0x54
 800f10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10e:	4a0c      	ldr	r2, [pc, #48]	@ (800f140 <prvInitialiseNewTask+0x140>)
 800f110:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	68f9      	ldr	r1, [r7, #12]
 800f116:	69b8      	ldr	r0, [r7, #24]
 800f118:	f001 f848 	bl	80101ac <pxPortInitialiseStack>
 800f11c:	4602      	mov	r2, r0
 800f11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f120:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f12c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f12e:	bf00      	nop
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20012054 	.word	0x20012054
 800f13c:	200120bc 	.word	0x200120bc
 800f140:	20012124 	.word	0x20012124

0800f144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f14c:	f001 f93e 	bl	80103cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f150:	4b2a      	ldr	r3, [pc, #168]	@ (800f1fc <prvAddNewTaskToReadyList+0xb8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	4a29      	ldr	r2, [pc, #164]	@ (800f1fc <prvAddNewTaskToReadyList+0xb8>)
 800f158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f15a:	4b29      	ldr	r3, [pc, #164]	@ (800f200 <prvAddNewTaskToReadyList+0xbc>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d109      	bne.n	800f176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f162:	4a27      	ldr	r2, [pc, #156]	@ (800f200 <prvAddNewTaskToReadyList+0xbc>)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f168:	4b24      	ldr	r3, [pc, #144]	@ (800f1fc <prvAddNewTaskToReadyList+0xb8>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d110      	bne.n	800f192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f170:	f000 fc1a 	bl	800f9a8 <prvInitialiseTaskLists>
 800f174:	e00d      	b.n	800f192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f176:	4b23      	ldr	r3, [pc, #140]	@ (800f204 <prvAddNewTaskToReadyList+0xc0>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d109      	bne.n	800f192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f17e:	4b20      	ldr	r3, [pc, #128]	@ (800f200 <prvAddNewTaskToReadyList+0xbc>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f188:	429a      	cmp	r2, r3
 800f18a:	d802      	bhi.n	800f192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f18c:	4a1c      	ldr	r2, [pc, #112]	@ (800f200 <prvAddNewTaskToReadyList+0xbc>)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f192:	4b1d      	ldr	r3, [pc, #116]	@ (800f208 <prvAddNewTaskToReadyList+0xc4>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3301      	adds	r3, #1
 800f198:	4a1b      	ldr	r2, [pc, #108]	@ (800f208 <prvAddNewTaskToReadyList+0xc4>)
 800f19a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	409a      	lsls	r2, r3
 800f1a4:	4b19      	ldr	r3, [pc, #100]	@ (800f20c <prvAddNewTaskToReadyList+0xc8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	4a18      	ldr	r2, [pc, #96]	@ (800f20c <prvAddNewTaskToReadyList+0xc8>)
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4413      	add	r3, r2
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4a15      	ldr	r2, [pc, #84]	@ (800f210 <prvAddNewTaskToReadyList+0xcc>)
 800f1bc:	441a      	add	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	3304      	adds	r3, #4
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	f7fe fdd6 	bl	800dd76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f1ca:	f001 f935 	bl	8010438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f204 <prvAddNewTaskToReadyList+0xc0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00e      	beq.n	800f1f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f200 <prvAddNewTaskToReadyList+0xbc>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d207      	bcs.n	800f1f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f214 <prvAddNewTaskToReadyList+0xd0>)
 800f1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20006008 	.word	0x20006008
 800f200:	20005f08 	.word	0x20005f08
 800f204:	20006014 	.word	0x20006014
 800f208:	20006024 	.word	0x20006024
 800f20c:	20006010 	.word	0x20006010
 800f210:	20005f0c 	.word	0x20005f0c
 800f214:	e000ed04 	.word	0xe000ed04

0800f218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f220:	2300      	movs	r3, #0
 800f222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d01a      	beq.n	800f260 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f22a:	4b15      	ldr	r3, [pc, #84]	@ (800f280 <vTaskDelay+0x68>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00d      	beq.n	800f24e <vTaskDelay+0x36>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f236:	b672      	cpsid	i
 800f238:	f383 8811 	msr	BASEPRI, r3
 800f23c:	f3bf 8f6f 	isb	sy
 800f240:	f3bf 8f4f 	dsb	sy
 800f244:	b662      	cpsie	i
 800f246:	60bb      	str	r3, [r7, #8]
}
 800f248:	bf00      	nop
 800f24a:	bf00      	nop
 800f24c:	e7fd      	b.n	800f24a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f24e:	f000 f889 	bl	800f364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f252:	2100      	movs	r1, #0
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 ff43 	bl	80100e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f25a:	f000 f891 	bl	800f380 <xTaskResumeAll>
 800f25e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d107      	bne.n	800f276 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f266:	4b07      	ldr	r3, [pc, #28]	@ (800f284 <vTaskDelay+0x6c>)
 800f268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	20006030 	.word	0x20006030
 800f284:	e000ed04 	.word	0xe000ed04

0800f288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b08a      	sub	sp, #40	@ 0x28
 800f28c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f292:	2300      	movs	r3, #0
 800f294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f296:	463a      	mov	r2, r7
 800f298:	1d39      	adds	r1, r7, #4
 800f29a:	f107 0308 	add.w	r3, r7, #8
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7f1 ff1c 	bl	80010dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	9202      	str	r2, [sp, #8]
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	460a      	mov	r2, r1
 800f2b6:	4923      	ldr	r1, [pc, #140]	@ (800f344 <vTaskStartScheduler+0xbc>)
 800f2b8:	4823      	ldr	r0, [pc, #140]	@ (800f348 <vTaskStartScheduler+0xc0>)
 800f2ba:	f7ff fdf5 	bl	800eea8 <xTaskCreateStatic>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	4a22      	ldr	r2, [pc, #136]	@ (800f34c <vTaskStartScheduler+0xc4>)
 800f2c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f2c4:	4b21      	ldr	r3, [pc, #132]	@ (800f34c <vTaskStartScheduler+0xc4>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d002      	beq.n	800f2d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	617b      	str	r3, [r7, #20]
 800f2d0:	e001      	b.n	800f2d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d11d      	bne.n	800f318 <vTaskStartScheduler+0x90>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e0:	b672      	cpsid	i
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	b662      	cpsie	i
 800f2f0:	613b      	str	r3, [r7, #16]
}
 800f2f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2f4:	4b16      	ldr	r3, [pc, #88]	@ (800f350 <vTaskStartScheduler+0xc8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	334c      	adds	r3, #76	@ 0x4c
 800f2fa:	4a16      	ldr	r2, [pc, #88]	@ (800f354 <vTaskStartScheduler+0xcc>)
 800f2fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f2fe:	4b16      	ldr	r3, [pc, #88]	@ (800f358 <vTaskStartScheduler+0xd0>)
 800f300:	f04f 32ff 	mov.w	r2, #4294967295
 800f304:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f306:	4b15      	ldr	r3, [pc, #84]	@ (800f35c <vTaskStartScheduler+0xd4>)
 800f308:	2201      	movs	r2, #1
 800f30a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f30c:	4b14      	ldr	r3, [pc, #80]	@ (800f360 <vTaskStartScheduler+0xd8>)
 800f30e:	2200      	movs	r2, #0
 800f310:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f312:	f000 ffdd 	bl	80102d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f316:	e011      	b.n	800f33c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31e:	d10d      	bne.n	800f33c <vTaskStartScheduler+0xb4>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f324:	b672      	cpsid	i
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	b662      	cpsie	i
 800f334:	60fb      	str	r3, [r7, #12]
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	e7fd      	b.n	800f338 <vTaskStartScheduler+0xb0>
}
 800f33c:	bf00      	nop
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	0801151c 	.word	0x0801151c
 800f348:	0800f979 	.word	0x0800f979
 800f34c:	2000602c 	.word	0x2000602c
 800f350:	20005f08 	.word	0x20005f08
 800f354:	20000048 	.word	0x20000048
 800f358:	20006028 	.word	0x20006028
 800f35c:	20006014 	.word	0x20006014
 800f360:	2000600c 	.word	0x2000600c

0800f364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f364:	b480      	push	{r7}
 800f366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f368:	4b04      	ldr	r3, [pc, #16]	@ (800f37c <vTaskSuspendAll+0x18>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3301      	adds	r3, #1
 800f36e:	4a03      	ldr	r2, [pc, #12]	@ (800f37c <vTaskSuspendAll+0x18>)
 800f370:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f372:	bf00      	nop
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	20006030 	.word	0x20006030

0800f380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f386:	2300      	movs	r3, #0
 800f388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f38e:	4b43      	ldr	r3, [pc, #268]	@ (800f49c <xTaskResumeAll+0x11c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10d      	bne.n	800f3b2 <xTaskResumeAll+0x32>
	__asm volatile
 800f396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39a:	b672      	cpsid	i
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	b662      	cpsie	i
 800f3aa:	603b      	str	r3, [r7, #0]
}
 800f3ac:	bf00      	nop
 800f3ae:	bf00      	nop
 800f3b0:	e7fd      	b.n	800f3ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f3b2:	f001 f80b 	bl	80103cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f3b6:	4b39      	ldr	r3, [pc, #228]	@ (800f49c <xTaskResumeAll+0x11c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	4a37      	ldr	r2, [pc, #220]	@ (800f49c <xTaskResumeAll+0x11c>)
 800f3be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3c0:	4b36      	ldr	r3, [pc, #216]	@ (800f49c <xTaskResumeAll+0x11c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d161      	bne.n	800f48c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f3c8:	4b35      	ldr	r3, [pc, #212]	@ (800f4a0 <xTaskResumeAll+0x120>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d05d      	beq.n	800f48c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3d0:	e02e      	b.n	800f430 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3d2:	4b34      	ldr	r3, [pc, #208]	@ (800f4a4 <xTaskResumeAll+0x124>)
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	3318      	adds	r3, #24
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe fd26 	bl	800de30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fe fd21 	bl	800de30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	409a      	lsls	r2, r3
 800f3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800f4a8 <xTaskResumeAll+0x128>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	4a2a      	ldr	r2, [pc, #168]	@ (800f4a8 <xTaskResumeAll+0x128>)
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f404:	4613      	mov	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4a27      	ldr	r2, [pc, #156]	@ (800f4ac <xTaskResumeAll+0x12c>)
 800f40e:	441a      	add	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3304      	adds	r3, #4
 800f414:	4619      	mov	r1, r3
 800f416:	4610      	mov	r0, r2
 800f418:	f7fe fcad 	bl	800dd76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f420:	4b23      	ldr	r3, [pc, #140]	@ (800f4b0 <xTaskResumeAll+0x130>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f426:	429a      	cmp	r2, r3
 800f428:	d302      	bcc.n	800f430 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f42a:	4b22      	ldr	r3, [pc, #136]	@ (800f4b4 <xTaskResumeAll+0x134>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f430:	4b1c      	ldr	r3, [pc, #112]	@ (800f4a4 <xTaskResumeAll+0x124>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d1cc      	bne.n	800f3d2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f43e:	f000 fb59 	bl	800faf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f442:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b8 <xTaskResumeAll+0x138>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d010      	beq.n	800f470 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f44e:	f000 f859 	bl	800f504 <xTaskIncrementTick>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d002      	beq.n	800f45e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f458:	4b16      	ldr	r3, [pc, #88]	@ (800f4b4 <xTaskResumeAll+0x134>)
 800f45a:	2201      	movs	r2, #1
 800f45c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3b01      	subs	r3, #1
 800f462:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1f1      	bne.n	800f44e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f46a:	4b13      	ldr	r3, [pc, #76]	@ (800f4b8 <xTaskResumeAll+0x138>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f470:	4b10      	ldr	r3, [pc, #64]	@ (800f4b4 <xTaskResumeAll+0x134>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d009      	beq.n	800f48c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f478:	2301      	movs	r3, #1
 800f47a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f47c:	4b0f      	ldr	r3, [pc, #60]	@ (800f4bc <xTaskResumeAll+0x13c>)
 800f47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f482:	601a      	str	r2, [r3, #0]
 800f484:	f3bf 8f4f 	dsb	sy
 800f488:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f48c:	f000 ffd4 	bl	8010438 <vPortExitCritical>

	return xAlreadyYielded;
 800f490:	68bb      	ldr	r3, [r7, #8]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20006030 	.word	0x20006030
 800f4a0:	20006008 	.word	0x20006008
 800f4a4:	20005fc8 	.word	0x20005fc8
 800f4a8:	20006010 	.word	0x20006010
 800f4ac:	20005f0c 	.word	0x20005f0c
 800f4b0:	20005f08 	.word	0x20005f08
 800f4b4:	2000601c 	.word	0x2000601c
 800f4b8:	20006018 	.word	0x20006018
 800f4bc:	e000ed04 	.word	0xe000ed04

0800f4c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f4c6:	4b05      	ldr	r3, [pc, #20]	@ (800f4dc <xTaskGetTickCount+0x1c>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f4cc:	687b      	ldr	r3, [r7, #4]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	2000600c 	.word	0x2000600c

0800f4e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4e6:	f001 f859 	bl	801059c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f4ee:	4b04      	ldr	r3, [pc, #16]	@ (800f500 <xTaskGetTickCountFromISR+0x20>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4f4:	683b      	ldr	r3, [r7, #0]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	2000600c 	.word	0x2000600c

0800f504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f50a:	2300      	movs	r3, #0
 800f50c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f50e:	4b50      	ldr	r3, [pc, #320]	@ (800f650 <xTaskIncrementTick+0x14c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 808b 	bne.w	800f62e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f518:	4b4e      	ldr	r3, [pc, #312]	@ (800f654 <xTaskIncrementTick+0x150>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3301      	adds	r3, #1
 800f51e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f520:	4a4c      	ldr	r2, [pc, #304]	@ (800f654 <xTaskIncrementTick+0x150>)
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d123      	bne.n	800f574 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f52c:	4b4a      	ldr	r3, [pc, #296]	@ (800f658 <xTaskIncrementTick+0x154>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00d      	beq.n	800f552 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53a:	b672      	cpsid	i
 800f53c:	f383 8811 	msr	BASEPRI, r3
 800f540:	f3bf 8f6f 	isb	sy
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	b662      	cpsie	i
 800f54a:	603b      	str	r3, [r7, #0]
}
 800f54c:	bf00      	nop
 800f54e:	bf00      	nop
 800f550:	e7fd      	b.n	800f54e <xTaskIncrementTick+0x4a>
 800f552:	4b41      	ldr	r3, [pc, #260]	@ (800f658 <xTaskIncrementTick+0x154>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	4b40      	ldr	r3, [pc, #256]	@ (800f65c <xTaskIncrementTick+0x158>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a3e      	ldr	r2, [pc, #248]	@ (800f658 <xTaskIncrementTick+0x154>)
 800f55e:	6013      	str	r3, [r2, #0]
 800f560:	4a3e      	ldr	r2, [pc, #248]	@ (800f65c <xTaskIncrementTick+0x158>)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6013      	str	r3, [r2, #0]
 800f566:	4b3e      	ldr	r3, [pc, #248]	@ (800f660 <xTaskIncrementTick+0x15c>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3301      	adds	r3, #1
 800f56c:	4a3c      	ldr	r2, [pc, #240]	@ (800f660 <xTaskIncrementTick+0x15c>)
 800f56e:	6013      	str	r3, [r2, #0]
 800f570:	f000 fac0 	bl	800faf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f574:	4b3b      	ldr	r3, [pc, #236]	@ (800f664 <xTaskIncrementTick+0x160>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d348      	bcc.n	800f610 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f57e:	4b36      	ldr	r3, [pc, #216]	@ (800f658 <xTaskIncrementTick+0x154>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d104      	bne.n	800f592 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f588:	4b36      	ldr	r3, [pc, #216]	@ (800f664 <xTaskIncrementTick+0x160>)
 800f58a:	f04f 32ff 	mov.w	r2, #4294967295
 800f58e:	601a      	str	r2, [r3, #0]
					break;
 800f590:	e03e      	b.n	800f610 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f592:	4b31      	ldr	r3, [pc, #196]	@ (800f658 <xTaskIncrementTick+0x154>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d203      	bcs.n	800f5b2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f5aa:	4a2e      	ldr	r2, [pc, #184]	@ (800f664 <xTaskIncrementTick+0x160>)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f5b0:	e02e      	b.n	800f610 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fe fc3a 	bl	800de30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d004      	beq.n	800f5ce <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	3318      	adds	r3, #24
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fe fc31 	bl	800de30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	409a      	lsls	r2, r3
 800f5d6:	4b24      	ldr	r3, [pc, #144]	@ (800f668 <xTaskIncrementTick+0x164>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	4a22      	ldr	r2, [pc, #136]	@ (800f668 <xTaskIncrementTick+0x164>)
 800f5de:	6013      	str	r3, [r2, #0]
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f66c <xTaskIncrementTick+0x168>)
 800f5ee:	441a      	add	r2, r3
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	f7fe fbbd 	bl	800dd76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f600:	4b1b      	ldr	r3, [pc, #108]	@ (800f670 <xTaskIncrementTick+0x16c>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f606:	429a      	cmp	r2, r3
 800f608:	d3b9      	bcc.n	800f57e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f60a:	2301      	movs	r3, #1
 800f60c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f60e:	e7b6      	b.n	800f57e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f610:	4b17      	ldr	r3, [pc, #92]	@ (800f670 <xTaskIncrementTick+0x16c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f616:	4915      	ldr	r1, [pc, #84]	@ (800f66c <xTaskIncrementTick+0x168>)
 800f618:	4613      	mov	r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	4413      	add	r3, r2
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	440b      	add	r3, r1
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d907      	bls.n	800f638 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f628:	2301      	movs	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	e004      	b.n	800f638 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f62e:	4b11      	ldr	r3, [pc, #68]	@ (800f674 <xTaskIncrementTick+0x170>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	4a0f      	ldr	r2, [pc, #60]	@ (800f674 <xTaskIncrementTick+0x170>)
 800f636:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f638:	4b0f      	ldr	r3, [pc, #60]	@ (800f678 <xTaskIncrementTick+0x174>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d001      	beq.n	800f644 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f640:	2301      	movs	r3, #1
 800f642:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f644:	697b      	ldr	r3, [r7, #20]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3718      	adds	r7, #24
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20006030 	.word	0x20006030
 800f654:	2000600c 	.word	0x2000600c
 800f658:	20005fc0 	.word	0x20005fc0
 800f65c:	20005fc4 	.word	0x20005fc4
 800f660:	20006020 	.word	0x20006020
 800f664:	20006028 	.word	0x20006028
 800f668:	20006010 	.word	0x20006010
 800f66c:	20005f0c 	.word	0x20005f0c
 800f670:	20005f08 	.word	0x20005f08
 800f674:	20006018 	.word	0x20006018
 800f678:	2000601c 	.word	0x2000601c

0800f67c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b087      	sub	sp, #28
 800f680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f682:	4b2b      	ldr	r3, [pc, #172]	@ (800f730 <vTaskSwitchContext+0xb4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f68a:	4b2a      	ldr	r3, [pc, #168]	@ (800f734 <vTaskSwitchContext+0xb8>)
 800f68c:	2201      	movs	r2, #1
 800f68e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f690:	e047      	b.n	800f722 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f692:	4b28      	ldr	r3, [pc, #160]	@ (800f734 <vTaskSwitchContext+0xb8>)
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f698:	4b27      	ldr	r3, [pc, #156]	@ (800f738 <vTaskSwitchContext+0xbc>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	fab3 f383 	clz	r3, r3
 800f6a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f6a6:	7afb      	ldrb	r3, [r7, #11]
 800f6a8:	f1c3 031f 	rsb	r3, r3, #31
 800f6ac:	617b      	str	r3, [r7, #20]
 800f6ae:	4923      	ldr	r1, [pc, #140]	@ (800f73c <vTaskSwitchContext+0xc0>)
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	4413      	add	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	440b      	add	r3, r1
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10d      	bne.n	800f6de <vTaskSwitchContext+0x62>
	__asm volatile
 800f6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c6:	b672      	cpsid	i
 800f6c8:	f383 8811 	msr	BASEPRI, r3
 800f6cc:	f3bf 8f6f 	isb	sy
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	b662      	cpsie	i
 800f6d6:	607b      	str	r3, [r7, #4]
}
 800f6d8:	bf00      	nop
 800f6da:	bf00      	nop
 800f6dc:	e7fd      	b.n	800f6da <vTaskSwitchContext+0x5e>
 800f6de:	697a      	ldr	r2, [r7, #20]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4a14      	ldr	r2, [pc, #80]	@ (800f73c <vTaskSwitchContext+0xc0>)
 800f6ea:	4413      	add	r3, r2
 800f6ec:	613b      	str	r3, [r7, #16]
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	685a      	ldr	r2, [r3, #4]
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	605a      	str	r2, [r3, #4]
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	685a      	ldr	r2, [r3, #4]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	3308      	adds	r3, #8
 800f700:	429a      	cmp	r2, r3
 800f702:	d104      	bne.n	800f70e <vTaskSwitchContext+0x92>
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	685a      	ldr	r2, [r3, #4]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	605a      	str	r2, [r3, #4]
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	4a0a      	ldr	r2, [pc, #40]	@ (800f740 <vTaskSwitchContext+0xc4>)
 800f716:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f718:	4b09      	ldr	r3, [pc, #36]	@ (800f740 <vTaskSwitchContext+0xc4>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	334c      	adds	r3, #76	@ 0x4c
 800f71e:	4a09      	ldr	r2, [pc, #36]	@ (800f744 <vTaskSwitchContext+0xc8>)
 800f720:	6013      	str	r3, [r2, #0]
}
 800f722:	bf00      	nop
 800f724:	371c      	adds	r7, #28
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	20006030 	.word	0x20006030
 800f734:	2000601c 	.word	0x2000601c
 800f738:	20006010 	.word	0x20006010
 800f73c:	20005f0c 	.word	0x20005f0c
 800f740:	20005f08 	.word	0x20005f08
 800f744:	20000048 	.word	0x20000048

0800f748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10d      	bne.n	800f774 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75c:	b672      	cpsid	i
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	b662      	cpsie	i
 800f76c:	60fb      	str	r3, [r7, #12]
}
 800f76e:	bf00      	nop
 800f770:	bf00      	nop
 800f772:	e7fd      	b.n	800f770 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f774:	4b07      	ldr	r3, [pc, #28]	@ (800f794 <vTaskPlaceOnEventList+0x4c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3318      	adds	r3, #24
 800f77a:	4619      	mov	r1, r3
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7fe fb1e 	bl	800ddbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f782:	2101      	movs	r1, #1
 800f784:	6838      	ldr	r0, [r7, #0]
 800f786:	f000 fcab 	bl	80100e0 <prvAddCurrentTaskToDelayedList>
}
 800f78a:	bf00      	nop
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	20005f08 	.word	0x20005f08

0800f798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b086      	sub	sp, #24
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d10d      	bne.n	800f7ca <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b2:	b672      	cpsid	i
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	b662      	cpsie	i
 800f7c2:	60fb      	str	r3, [r7, #12]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	3318      	adds	r3, #24
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe fb2e 	bl	800de30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f84c <xTaskRemoveFromEventList+0xb4>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d11c      	bne.n	800f816 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	3304      	adds	r3, #4
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7fe fb25 	bl	800de30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	409a      	lsls	r2, r3
 800f7ee:	4b18      	ldr	r3, [pc, #96]	@ (800f850 <xTaskRemoveFromEventList+0xb8>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	4a16      	ldr	r2, [pc, #88]	@ (800f850 <xTaskRemoveFromEventList+0xb8>)
 800f7f6:	6013      	str	r3, [r2, #0]
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4a13      	ldr	r2, [pc, #76]	@ (800f854 <xTaskRemoveFromEventList+0xbc>)
 800f806:	441a      	add	r2, r3
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	3304      	adds	r3, #4
 800f80c:	4619      	mov	r1, r3
 800f80e:	4610      	mov	r0, r2
 800f810:	f7fe fab1 	bl	800dd76 <vListInsertEnd>
 800f814:	e005      	b.n	800f822 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	3318      	adds	r3, #24
 800f81a:	4619      	mov	r1, r3
 800f81c:	480e      	ldr	r0, [pc, #56]	@ (800f858 <xTaskRemoveFromEventList+0xc0>)
 800f81e:	f7fe faaa 	bl	800dd76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f826:	4b0d      	ldr	r3, [pc, #52]	@ (800f85c <xTaskRemoveFromEventList+0xc4>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d905      	bls.n	800f83c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f830:	2301      	movs	r3, #1
 800f832:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f834:	4b0a      	ldr	r3, [pc, #40]	@ (800f860 <xTaskRemoveFromEventList+0xc8>)
 800f836:	2201      	movs	r2, #1
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	e001      	b.n	800f840 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f83c:	2300      	movs	r3, #0
 800f83e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f840:	697b      	ldr	r3, [r7, #20]
}
 800f842:	4618      	mov	r0, r3
 800f844:	3718      	adds	r7, #24
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20006030 	.word	0x20006030
 800f850:	20006010 	.word	0x20006010
 800f854:	20005f0c 	.word	0x20005f0c
 800f858:	20005fc8 	.word	0x20005fc8
 800f85c:	20005f08 	.word	0x20005f08
 800f860:	2000601c 	.word	0x2000601c

0800f864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f86c:	4b06      	ldr	r3, [pc, #24]	@ (800f888 <vTaskInternalSetTimeOutState+0x24>)
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f874:	4b05      	ldr	r3, [pc, #20]	@ (800f88c <vTaskInternalSetTimeOutState+0x28>)
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	605a      	str	r2, [r3, #4]
}
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	20006020 	.word	0x20006020
 800f88c:	2000600c 	.word	0x2000600c

0800f890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b088      	sub	sp, #32
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10d      	bne.n	800f8bc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a4:	b672      	cpsid	i
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	b662      	cpsie	i
 800f8b4:	613b      	str	r3, [r7, #16]
}
 800f8b6:	bf00      	nop
 800f8b8:	bf00      	nop
 800f8ba:	e7fd      	b.n	800f8b8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d10d      	bne.n	800f8de <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c6:	b672      	cpsid	i
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	b662      	cpsie	i
 800f8d6:	60fb      	str	r3, [r7, #12]
}
 800f8d8:	bf00      	nop
 800f8da:	bf00      	nop
 800f8dc:	e7fd      	b.n	800f8da <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f8de:	f000 fd75 	bl	80103cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800f958 <xTaskCheckForTimeOut+0xc8>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fa:	d102      	bne.n	800f902 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	61fb      	str	r3, [r7, #28]
 800f900:	e023      	b.n	800f94a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	4b15      	ldr	r3, [pc, #84]	@ (800f95c <xTaskCheckForTimeOut+0xcc>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d007      	beq.n	800f91e <xTaskCheckForTimeOut+0x8e>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	69ba      	ldr	r2, [r7, #24]
 800f914:	429a      	cmp	r2, r3
 800f916:	d302      	bcc.n	800f91e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f918:	2301      	movs	r3, #1
 800f91a:	61fb      	str	r3, [r7, #28]
 800f91c:	e015      	b.n	800f94a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	429a      	cmp	r2, r3
 800f926:	d20b      	bcs.n	800f940 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ff95 	bl	800f864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f93a:	2300      	movs	r3, #0
 800f93c:	61fb      	str	r3, [r7, #28]
 800f93e:	e004      	b.n	800f94a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2200      	movs	r2, #0
 800f944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f946:	2301      	movs	r3, #1
 800f948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f94a:	f000 fd75 	bl	8010438 <vPortExitCritical>

	return xReturn;
 800f94e:	69fb      	ldr	r3, [r7, #28]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3720      	adds	r7, #32
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	2000600c 	.word	0x2000600c
 800f95c:	20006020 	.word	0x20006020

0800f960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f960:	b480      	push	{r7}
 800f962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f964:	4b03      	ldr	r3, [pc, #12]	@ (800f974 <vTaskMissedYield+0x14>)
 800f966:	2201      	movs	r2, #1
 800f968:	601a      	str	r2, [r3, #0]
}
 800f96a:	bf00      	nop
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	2000601c 	.word	0x2000601c

0800f978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f980:	f000 f852 	bl	800fa28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f984:	4b06      	ldr	r3, [pc, #24]	@ (800f9a0 <prvIdleTask+0x28>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d9f9      	bls.n	800f980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f98c:	4b05      	ldr	r3, [pc, #20]	@ (800f9a4 <prvIdleTask+0x2c>)
 800f98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f99c:	e7f0      	b.n	800f980 <prvIdleTask+0x8>
 800f99e:	bf00      	nop
 800f9a0:	20005f0c 	.word	0x20005f0c
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	607b      	str	r3, [r7, #4]
 800f9b2:	e00c      	b.n	800f9ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4413      	add	r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4a12      	ldr	r2, [pc, #72]	@ (800fa08 <prvInitialiseTaskLists+0x60>)
 800f9c0:	4413      	add	r3, r2
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe f9aa 	bl	800dd1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	607b      	str	r3, [r7, #4]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2b06      	cmp	r3, #6
 800f9d2:	d9ef      	bls.n	800f9b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f9d4:	480d      	ldr	r0, [pc, #52]	@ (800fa0c <prvInitialiseTaskLists+0x64>)
 800f9d6:	f7fe f9a1 	bl	800dd1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f9da:	480d      	ldr	r0, [pc, #52]	@ (800fa10 <prvInitialiseTaskLists+0x68>)
 800f9dc:	f7fe f99e 	bl	800dd1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f9e0:	480c      	ldr	r0, [pc, #48]	@ (800fa14 <prvInitialiseTaskLists+0x6c>)
 800f9e2:	f7fe f99b 	bl	800dd1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f9e6:	480c      	ldr	r0, [pc, #48]	@ (800fa18 <prvInitialiseTaskLists+0x70>)
 800f9e8:	f7fe f998 	bl	800dd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f9ec:	480b      	ldr	r0, [pc, #44]	@ (800fa1c <prvInitialiseTaskLists+0x74>)
 800f9ee:	f7fe f995 	bl	800dd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800fa20 <prvInitialiseTaskLists+0x78>)
 800f9f4:	4a05      	ldr	r2, [pc, #20]	@ (800fa0c <prvInitialiseTaskLists+0x64>)
 800f9f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800fa24 <prvInitialiseTaskLists+0x7c>)
 800f9fa:	4a05      	ldr	r2, [pc, #20]	@ (800fa10 <prvInitialiseTaskLists+0x68>)
 800f9fc:	601a      	str	r2, [r3, #0]
}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20005f0c 	.word	0x20005f0c
 800fa0c:	20005f98 	.word	0x20005f98
 800fa10:	20005fac 	.word	0x20005fac
 800fa14:	20005fc8 	.word	0x20005fc8
 800fa18:	20005fdc 	.word	0x20005fdc
 800fa1c:	20005ff4 	.word	0x20005ff4
 800fa20:	20005fc0 	.word	0x20005fc0
 800fa24:	20005fc4 	.word	0x20005fc4

0800fa28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fa2e:	e019      	b.n	800fa64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fa30:	f000 fccc 	bl	80103cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa34:	4b10      	ldr	r3, [pc, #64]	@ (800fa78 <prvCheckTasksWaitingTermination+0x50>)
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe f9f5 	bl	800de30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fa46:	4b0d      	ldr	r3, [pc, #52]	@ (800fa7c <prvCheckTasksWaitingTermination+0x54>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	4a0b      	ldr	r2, [pc, #44]	@ (800fa7c <prvCheckTasksWaitingTermination+0x54>)
 800fa4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fa50:	4b0b      	ldr	r3, [pc, #44]	@ (800fa80 <prvCheckTasksWaitingTermination+0x58>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	4a0a      	ldr	r2, [pc, #40]	@ (800fa80 <prvCheckTasksWaitingTermination+0x58>)
 800fa58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fa5a:	f000 fced 	bl	8010438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f810 	bl	800fa84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fa64:	4b06      	ldr	r3, [pc, #24]	@ (800fa80 <prvCheckTasksWaitingTermination+0x58>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1e1      	bne.n	800fa30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fa6c:	bf00      	nop
 800fa6e:	bf00      	nop
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20005fdc 	.word	0x20005fdc
 800fa7c:	20006008 	.word	0x20006008
 800fa80:	20005ff0 	.word	0x20005ff0

0800fa84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	334c      	adds	r3, #76	@ 0x4c
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 ffdd 	bl	8010a50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d108      	bne.n	800fab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 fe8d 	bl	80107c4 <vPortFree>
				vPortFree( pxTCB );
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 fe8a 	bl	80107c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fab0:	e01b      	b.n	800faea <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d103      	bne.n	800fac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fe81 	bl	80107c4 <vPortFree>
	}
 800fac2:	e012      	b.n	800faea <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800faca:	2b02      	cmp	r3, #2
 800facc:	d00d      	beq.n	800faea <prvDeleteTCB+0x66>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad2:	b672      	cpsid	i
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	b662      	cpsie	i
 800fae2:	60fb      	str	r3, [r7, #12]
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop
 800fae8:	e7fd      	b.n	800fae6 <prvDeleteTCB+0x62>
	}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fafa:	4b0c      	ldr	r3, [pc, #48]	@ (800fb2c <prvResetNextTaskUnblockTime+0x38>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d104      	bne.n	800fb0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb04:	4b0a      	ldr	r3, [pc, #40]	@ (800fb30 <prvResetNextTaskUnblockTime+0x3c>)
 800fb06:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fb0c:	e008      	b.n	800fb20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0e:	4b07      	ldr	r3, [pc, #28]	@ (800fb2c <prvResetNextTaskUnblockTime+0x38>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	4a04      	ldr	r2, [pc, #16]	@ (800fb30 <prvResetNextTaskUnblockTime+0x3c>)
 800fb1e:	6013      	str	r3, [r2, #0]
}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	20005fc0 	.word	0x20005fc0
 800fb30:	20006028 	.word	0x20006028

0800fb34 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fb3a:	4b05      	ldr	r3, [pc, #20]	@ (800fb50 <xTaskGetCurrentTaskHandle+0x1c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fb40:	687b      	ldr	r3, [r7, #4]
	}
 800fb42:	4618      	mov	r0, r3
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	20005f08 	.word	0x20005f08

0800fb54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb88 <xTaskGetSchedulerState+0x34>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d102      	bne.n	800fb68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fb62:	2301      	movs	r3, #1
 800fb64:	607b      	str	r3, [r7, #4]
 800fb66:	e008      	b.n	800fb7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb68:	4b08      	ldr	r3, [pc, #32]	@ (800fb8c <xTaskGetSchedulerState+0x38>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d102      	bne.n	800fb76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fb70:	2302      	movs	r3, #2
 800fb72:	607b      	str	r3, [r7, #4]
 800fb74:	e001      	b.n	800fb7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fb76:	2300      	movs	r3, #0
 800fb78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fb7a:	687b      	ldr	r3, [r7, #4]
	}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	20006014 	.word	0x20006014
 800fb8c:	20006030 	.word	0x20006030

0800fb90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d069      	beq.n	800fc7a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbaa:	4b36      	ldr	r3, [pc, #216]	@ (800fc84 <xTaskPriorityInherit+0xf4>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d259      	bcs.n	800fc68 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	db06      	blt.n	800fbca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbbc:	4b31      	ldr	r3, [pc, #196]	@ (800fc84 <xTaskPriorityInherit+0xf4>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc2:	f1c3 0207 	rsb	r2, r3, #7
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	6959      	ldr	r1, [r3, #20]
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4413      	add	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4a2b      	ldr	r2, [pc, #172]	@ (800fc88 <xTaskPriorityInherit+0xf8>)
 800fbdc:	4413      	add	r3, r2
 800fbde:	4299      	cmp	r1, r3
 800fbe0:	d13a      	bne.n	800fc58 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe f922 	bl	800de30 <uxListRemove>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d115      	bne.n	800fc1e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbf6:	4924      	ldr	r1, [pc, #144]	@ (800fc88 <xTaskPriorityInherit+0xf8>)
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	440b      	add	r3, r1
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10a      	bne.n	800fc1e <xTaskPriorityInherit+0x8e>
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc12:	43da      	mvns	r2, r3
 800fc14:	4b1d      	ldr	r3, [pc, #116]	@ (800fc8c <xTaskPriorityInherit+0xfc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4013      	ands	r3, r2
 800fc1a:	4a1c      	ldr	r2, [pc, #112]	@ (800fc8c <xTaskPriorityInherit+0xfc>)
 800fc1c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc1e:	4b19      	ldr	r3, [pc, #100]	@ (800fc84 <xTaskPriorityInherit+0xf4>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	409a      	lsls	r2, r3
 800fc30:	4b16      	ldr	r3, [pc, #88]	@ (800fc8c <xTaskPriorityInherit+0xfc>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4313      	orrs	r3, r2
 800fc36:	4a15      	ldr	r2, [pc, #84]	@ (800fc8c <xTaskPriorityInherit+0xfc>)
 800fc38:	6013      	str	r3, [r2, #0]
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc3e:	4613      	mov	r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	4413      	add	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4a10      	ldr	r2, [pc, #64]	@ (800fc88 <xTaskPriorityInherit+0xf8>)
 800fc48:	441a      	add	r2, r3
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4619      	mov	r1, r3
 800fc50:	4610      	mov	r0, r2
 800fc52:	f7fe f890 	bl	800dd76 <vListInsertEnd>
 800fc56:	e004      	b.n	800fc62 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc58:	4b0a      	ldr	r3, [pc, #40]	@ (800fc84 <xTaskPriorityInherit+0xf4>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fc62:	2301      	movs	r3, #1
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	e008      	b.n	800fc7a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc6c:	4b05      	ldr	r3, [pc, #20]	@ (800fc84 <xTaskPriorityInherit+0xf4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d201      	bcs.n	800fc7a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fc76:	2301      	movs	r3, #1
 800fc78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
	}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20005f08 	.word	0x20005f08
 800fc88:	20005f0c 	.word	0x20005f0c
 800fc8c:	20006010 	.word	0x20006010

0800fc90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d074      	beq.n	800fd90 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fca6:	4b3d      	ldr	r3, [pc, #244]	@ (800fd9c <xTaskPriorityDisinherit+0x10c>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d00d      	beq.n	800fccc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb4:	b672      	cpsid	i
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	b662      	cpsie	i
 800fcc4:	60fb      	str	r3, [r7, #12]
}
 800fcc6:	bf00      	nop
 800fcc8:	bf00      	nop
 800fcca:	e7fd      	b.n	800fcc8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10d      	bne.n	800fcf0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd8:	b672      	cpsid	i
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	b662      	cpsie	i
 800fce8:	60bb      	str	r3, [r7, #8]
}
 800fcea:	bf00      	nop
 800fcec:	bf00      	nop
 800fcee:	e7fd      	b.n	800fcec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcf4:	1e5a      	subs	r2, r3, #1
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d044      	beq.n	800fd90 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d140      	bne.n	800fd90 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	3304      	adds	r3, #4
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe f88c 	bl	800de30 <uxListRemove>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d115      	bne.n	800fd4a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd22:	491f      	ldr	r1, [pc, #124]	@ (800fda0 <xTaskPriorityDisinherit+0x110>)
 800fd24:	4613      	mov	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d10a      	bne.n	800fd4a <xTaskPriorityDisinherit+0xba>
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd38:	2201      	movs	r2, #1
 800fd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800fd3e:	43da      	mvns	r2, r3
 800fd40:	4b18      	ldr	r3, [pc, #96]	@ (800fda4 <xTaskPriorityDisinherit+0x114>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4013      	ands	r3, r2
 800fd46:	4a17      	ldr	r2, [pc, #92]	@ (800fda4 <xTaskPriorityDisinherit+0x114>)
 800fd48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd56:	f1c3 0207 	rsb	r2, r3, #7
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd62:	2201      	movs	r2, #1
 800fd64:	409a      	lsls	r2, r3
 800fd66:	4b0f      	ldr	r3, [pc, #60]	@ (800fda4 <xTaskPriorityDisinherit+0x114>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	4a0d      	ldr	r2, [pc, #52]	@ (800fda4 <xTaskPriorityDisinherit+0x114>)
 800fd6e:	6013      	str	r3, [r2, #0]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd74:	4613      	mov	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	4413      	add	r3, r2
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	4a08      	ldr	r2, [pc, #32]	@ (800fda0 <xTaskPriorityDisinherit+0x110>)
 800fd7e:	441a      	add	r2, r3
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	3304      	adds	r3, #4
 800fd84:	4619      	mov	r1, r3
 800fd86:	4610      	mov	r0, r2
 800fd88:	f7fd fff5 	bl	800dd76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd90:	697b      	ldr	r3, [r7, #20]
	}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20005f08 	.word	0x20005f08
 800fda0:	20005f0c 	.word	0x20005f0c
 800fda4:	20006010 	.word	0x20006010

0800fda8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b088      	sub	sp, #32
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 8089 	beq.w	800fed4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d10d      	bne.n	800fde6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdce:	b672      	cpsid	i
 800fdd0:	f383 8811 	msr	BASEPRI, r3
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	b662      	cpsie	i
 800fdde:	60fb      	str	r3, [r7, #12]
}
 800fde0:	bf00      	nop
 800fde2:	bf00      	nop
 800fde4:	e7fd      	b.n	800fde2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d902      	bls.n	800fdf6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	61fb      	str	r3, [r7, #28]
 800fdf4:	e002      	b.n	800fdfc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe00:	69fa      	ldr	r2, [r7, #28]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d066      	beq.n	800fed4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe0a:	697a      	ldr	r2, [r7, #20]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d161      	bne.n	800fed4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fe10:	4b32      	ldr	r3, [pc, #200]	@ (800fedc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	69ba      	ldr	r2, [r7, #24]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d10d      	bne.n	800fe36 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800fe1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1e:	b672      	cpsid	i
 800fe20:	f383 8811 	msr	BASEPRI, r3
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	b662      	cpsie	i
 800fe2e:	60bb      	str	r3, [r7, #8]
}
 800fe30:	bf00      	nop
 800fe32:	bf00      	nop
 800fe34:	e7fd      	b.n	800fe32 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe3a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	69fa      	ldr	r2, [r7, #28]
 800fe40:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	db04      	blt.n	800fe54 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	f1c3 0207 	rsb	r2, r3, #7
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	6959      	ldr	r1, [r3, #20]
 800fe58:	693a      	ldr	r2, [r7, #16]
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4a1f      	ldr	r2, [pc, #124]	@ (800fee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fe64:	4413      	add	r3, r2
 800fe66:	4299      	cmp	r1, r3
 800fe68:	d134      	bne.n	800fed4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fd ffde 	bl	800de30 <uxListRemove>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d115      	bne.n	800fea6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe7e:	4918      	ldr	r1, [pc, #96]	@ (800fee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fe80:	4613      	mov	r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	4413      	add	r3, r2
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	440b      	add	r3, r1
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10a      	bne.n	800fea6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe94:	2201      	movs	r2, #1
 800fe96:	fa02 f303 	lsl.w	r3, r2, r3
 800fe9a:	43da      	mvns	r2, r3
 800fe9c:	4b11      	ldr	r3, [pc, #68]	@ (800fee4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4013      	ands	r3, r2
 800fea2:	4a10      	ldr	r2, [pc, #64]	@ (800fee4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fea4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feaa:	2201      	movs	r2, #1
 800feac:	409a      	lsls	r2, r3
 800feae:	4b0d      	ldr	r3, [pc, #52]	@ (800fee4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	4a0b      	ldr	r2, [pc, #44]	@ (800fee4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800feb6:	6013      	str	r3, [r2, #0]
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800febc:	4613      	mov	r3, r2
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	4413      	add	r3, r2
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	4a06      	ldr	r2, [pc, #24]	@ (800fee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fec6:	441a      	add	r2, r3
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	3304      	adds	r3, #4
 800fecc:	4619      	mov	r1, r3
 800fece:	4610      	mov	r0, r2
 800fed0:	f7fd ff51 	bl	800dd76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fed4:	bf00      	nop
 800fed6:	3720      	adds	r7, #32
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20005f08 	.word	0x20005f08
 800fee0:	20005f0c 	.word	0x20005f0c
 800fee4:	20006010 	.word	0x20006010

0800fee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fee8:	b480      	push	{r7}
 800feea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800feec:	4b07      	ldr	r3, [pc, #28]	@ (800ff0c <pvTaskIncrementMutexHeldCount+0x24>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d004      	beq.n	800fefe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fef4:	4b05      	ldr	r3, [pc, #20]	@ (800ff0c <pvTaskIncrementMutexHeldCount+0x24>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fefa:	3201      	adds	r2, #1
 800fefc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800fefe:	4b03      	ldr	r3, [pc, #12]	@ (800ff0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff00:	681b      	ldr	r3, [r3, #0]
	}
 800ff02:	4618      	mov	r0, r3
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	20005f08 	.word	0x20005f08

0800ff10 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ff1a:	f000 fa57 	bl	80103cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ff1e:	4b20      	ldr	r3, [pc, #128]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d113      	bne.n	800ff52 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ff2a:	4b1d      	ldr	r3, [pc, #116]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00b      	beq.n	800ff52 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	6838      	ldr	r0, [r7, #0]
 800ff3e:	f000 f8cf 	bl	80100e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ff42:	4b18      	ldr	r3, [pc, #96]	@ (800ffa4 <ulTaskNotifyTake+0x94>)
 800ff44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ff52:	f000 fa71 	bl	8010438 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ff56:	f000 fa39 	bl	80103cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ff5a:	4b11      	ldr	r3, [pc, #68]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ff62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00e      	beq.n	800ff88 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d005      	beq.n	800ff7c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ff70:	4b0b      	ldr	r3, [pc, #44]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ff7a:	e005      	b.n	800ff88 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ff7c:	4b08      	ldr	r3, [pc, #32]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	3a01      	subs	r2, #1
 800ff84:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff88:	4b05      	ldr	r3, [pc, #20]	@ (800ffa0 <ulTaskNotifyTake+0x90>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800ff92:	f000 fa51 	bl	8010438 <vPortExitCritical>

		return ulReturn;
 800ff96:	68fb      	ldr	r3, [r7, #12]
	}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20005f08 	.word	0x20005f08
 800ffa4:	e000ed04 	.word	0xe000ed04

0800ffa8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	@ 0x28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10d      	bne.n	800ffd4 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	b672      	cpsid	i
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	b662      	cpsie	i
 800ffcc:	61bb      	str	r3, [r7, #24]
}
 800ffce:	bf00      	nop
 800ffd0:	bf00      	nop
 800ffd2:	e7fd      	b.n	800ffd0 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ffd4:	f000 fae2 	bl	801059c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ffdc:	f3ef 8211 	mrs	r2, BASEPRI
 800ffe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffe4:	b672      	cpsid	i
 800ffe6:	f383 8811 	msr	BASEPRI, r3
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	b662      	cpsie	i
 800fff4:	617a      	str	r2, [r7, #20]
 800fff6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fff8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fffa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffe:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010002:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010006:	2202      	movs	r2, #2
 8010008:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 801000c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010016:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801001a:	7ffb      	ldrb	r3, [r7, #31]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d148      	bne.n	80100b2 <vTaskNotifyGiveFromISR+0x10a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00d      	beq.n	8010044 <vTaskNotifyGiveFromISR+0x9c>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801002c:	b672      	cpsid	i
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	b662      	cpsie	i
 801003c:	60fb      	str	r3, [r7, #12]
}
 801003e:	bf00      	nop
 8010040:	bf00      	nop
 8010042:	e7fd      	b.n	8010040 <vTaskNotifyGiveFromISR+0x98>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010044:	4b20      	ldr	r3, [pc, #128]	@ (80100c8 <vTaskNotifyGiveFromISR+0x120>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d11c      	bne.n	8010086 <vTaskNotifyGiveFromISR+0xde>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801004c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801004e:	3304      	adds	r3, #4
 8010050:	4618      	mov	r0, r3
 8010052:	f7fd feed 	bl	800de30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801005a:	2201      	movs	r2, #1
 801005c:	409a      	lsls	r2, r3
 801005e:	4b1b      	ldr	r3, [pc, #108]	@ (80100cc <vTaskNotifyGiveFromISR+0x124>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4313      	orrs	r3, r2
 8010064:	4a19      	ldr	r2, [pc, #100]	@ (80100cc <vTaskNotifyGiveFromISR+0x124>)
 8010066:	6013      	str	r3, [r2, #0]
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006c:	4613      	mov	r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	4a16      	ldr	r2, [pc, #88]	@ (80100d0 <vTaskNotifyGiveFromISR+0x128>)
 8010076:	441a      	add	r2, r3
 8010078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007a:	3304      	adds	r3, #4
 801007c:	4619      	mov	r1, r3
 801007e:	4610      	mov	r0, r2
 8010080:	f7fd fe79 	bl	800dd76 <vListInsertEnd>
 8010084:	e005      	b.n	8010092 <vTaskNotifyGiveFromISR+0xea>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	3318      	adds	r3, #24
 801008a:	4619      	mov	r1, r3
 801008c:	4811      	ldr	r0, [pc, #68]	@ (80100d4 <vTaskNotifyGiveFromISR+0x12c>)
 801008e:	f7fd fe72 	bl	800dd76 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010096:	4b10      	ldr	r3, [pc, #64]	@ (80100d8 <vTaskNotifyGiveFromISR+0x130>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009c:	429a      	cmp	r2, r3
 801009e:	d908      	bls.n	80100b2 <vTaskNotifyGiveFromISR+0x10a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <vTaskNotifyGiveFromISR+0x104>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2201      	movs	r2, #1
 80100aa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80100ac:	4b0b      	ldr	r3, [pc, #44]	@ (80100dc <vTaskNotifyGiveFromISR+0x134>)
 80100ae:	2201      	movs	r2, #1
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	f383 8811 	msr	BASEPRI, r3
}
 80100bc:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80100be:	bf00      	nop
 80100c0:	3728      	adds	r7, #40	@ 0x28
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	20006030 	.word	0x20006030
 80100cc:	20006010 	.word	0x20006010
 80100d0:	20005f0c 	.word	0x20005f0c
 80100d4:	20005fc8 	.word	0x20005fc8
 80100d8:	20005f08 	.word	0x20005f08
 80100dc:	2000601c 	.word	0x2000601c

080100e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80100ea:	4b29      	ldr	r3, [pc, #164]	@ (8010190 <prvAddCurrentTaskToDelayedList+0xb0>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100f0:	4b28      	ldr	r3, [pc, #160]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3304      	adds	r3, #4
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fd fe9a 	bl	800de30 <uxListRemove>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10b      	bne.n	801011a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010102:	4b24      	ldr	r3, [pc, #144]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010108:	2201      	movs	r2, #1
 801010a:	fa02 f303 	lsl.w	r3, r2, r3
 801010e:	43da      	mvns	r2, r3
 8010110:	4b21      	ldr	r3, [pc, #132]	@ (8010198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4013      	ands	r3, r2
 8010116:	4a20      	ldr	r2, [pc, #128]	@ (8010198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010118:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010120:	d10a      	bne.n	8010138 <prvAddCurrentTaskToDelayedList+0x58>
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d007      	beq.n	8010138 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010128:	4b1a      	ldr	r3, [pc, #104]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3304      	adds	r3, #4
 801012e:	4619      	mov	r1, r3
 8010130:	481a      	ldr	r0, [pc, #104]	@ (801019c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010132:	f7fd fe20 	bl	800dd76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010136:	e026      	b.n	8010186 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010138:	68fa      	ldr	r2, [r7, #12]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4413      	add	r3, r2
 801013e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010140:	4b14      	ldr	r3, [pc, #80]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	429a      	cmp	r2, r3
 801014e:	d209      	bcs.n	8010164 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010150:	4b13      	ldr	r3, [pc, #76]	@ (80101a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	4b0f      	ldr	r3, [pc, #60]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	3304      	adds	r3, #4
 801015a:	4619      	mov	r1, r3
 801015c:	4610      	mov	r0, r2
 801015e:	f7fd fe2e 	bl	800ddbe <vListInsert>
}
 8010162:	e010      	b.n	8010186 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010164:	4b0f      	ldr	r3, [pc, #60]	@ (80101a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	4b0a      	ldr	r3, [pc, #40]	@ (8010194 <prvAddCurrentTaskToDelayedList+0xb4>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3304      	adds	r3, #4
 801016e:	4619      	mov	r1, r3
 8010170:	4610      	mov	r0, r2
 8010172:	f7fd fe24 	bl	800ddbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010176:	4b0c      	ldr	r3, [pc, #48]	@ (80101a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	429a      	cmp	r2, r3
 801017e:	d202      	bcs.n	8010186 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010180:	4a09      	ldr	r2, [pc, #36]	@ (80101a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	6013      	str	r3, [r2, #0]
}
 8010186:	bf00      	nop
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	2000600c 	.word	0x2000600c
 8010194:	20005f08 	.word	0x20005f08
 8010198:	20006010 	.word	0x20006010
 801019c:	20005ff4 	.word	0x20005ff4
 80101a0:	20005fc4 	.word	0x20005fc4
 80101a4:	20005fc0 	.word	0x20005fc0
 80101a8:	20006028 	.word	0x20006028

080101ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3b04      	subs	r3, #4
 80101bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80101c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	3b04      	subs	r3, #4
 80101ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	f023 0201 	bic.w	r2, r3, #1
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	3b04      	subs	r3, #4
 80101da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80101dc:	4a0c      	ldr	r2, [pc, #48]	@ (8010210 <pxPortInitialiseStack+0x64>)
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	3b14      	subs	r3, #20
 80101e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	3b04      	subs	r3, #4
 80101f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f06f 0202 	mvn.w	r2, #2
 80101fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	3b20      	subs	r3, #32
 8010200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010202:	68fb      	ldr	r3, [r7, #12]
}
 8010204:	4618      	mov	r0, r3
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	08010215 	.word	0x08010215

08010214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801021e:	4b15      	ldr	r3, [pc, #84]	@ (8010274 <prvTaskExitError+0x60>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010226:	d00d      	beq.n	8010244 <prvTaskExitError+0x30>
	__asm volatile
 8010228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022c:	b672      	cpsid	i
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	b662      	cpsie	i
 801023c:	60fb      	str	r3, [r7, #12]
}
 801023e:	bf00      	nop
 8010240:	bf00      	nop
 8010242:	e7fd      	b.n	8010240 <prvTaskExitError+0x2c>
	__asm volatile
 8010244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010248:	b672      	cpsid	i
 801024a:	f383 8811 	msr	BASEPRI, r3
 801024e:	f3bf 8f6f 	isb	sy
 8010252:	f3bf 8f4f 	dsb	sy
 8010256:	b662      	cpsie	i
 8010258:	60bb      	str	r3, [r7, #8]
}
 801025a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801025c:	bf00      	nop
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0fc      	beq.n	801025e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	20000044 	.word	0x20000044
	...

08010280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010280:	4b07      	ldr	r3, [pc, #28]	@ (80102a0 <pxCurrentTCBConst2>)
 8010282:	6819      	ldr	r1, [r3, #0]
 8010284:	6808      	ldr	r0, [r1, #0]
 8010286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028a:	f380 8809 	msr	PSP, r0
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f04f 0000 	mov.w	r0, #0
 8010296:	f380 8811 	msr	BASEPRI, r0
 801029a:	4770      	bx	lr
 801029c:	f3af 8000 	nop.w

080102a0 <pxCurrentTCBConst2>:
 80102a0:	20005f08 	.word	0x20005f08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop

080102a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80102a8:	4808      	ldr	r0, [pc, #32]	@ (80102cc <prvPortStartFirstTask+0x24>)
 80102aa:	6800      	ldr	r0, [r0, #0]
 80102ac:	6800      	ldr	r0, [r0, #0]
 80102ae:	f380 8808 	msr	MSP, r0
 80102b2:	f04f 0000 	mov.w	r0, #0
 80102b6:	f380 8814 	msr	CONTROL, r0
 80102ba:	b662      	cpsie	i
 80102bc:	b661      	cpsie	f
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	df00      	svc	0
 80102c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80102ca:	bf00      	nop
 80102cc:	e000ed08 	.word	0xe000ed08

080102d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102d6:	4b37      	ldr	r3, [pc, #220]	@ (80103b4 <xPortStartScheduler+0xe4>)
 80102d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	22ff      	movs	r2, #255	@ 0xff
 80102e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	4b2f      	ldr	r3, [pc, #188]	@ (80103b8 <xPortStartScheduler+0xe8>)
 80102fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102fe:	4b2f      	ldr	r3, [pc, #188]	@ (80103bc <xPortStartScheduler+0xec>)
 8010300:	2207      	movs	r2, #7
 8010302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010304:	e009      	b.n	801031a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010306:	4b2d      	ldr	r3, [pc, #180]	@ (80103bc <xPortStartScheduler+0xec>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3b01      	subs	r3, #1
 801030c:	4a2b      	ldr	r2, [pc, #172]	@ (80103bc <xPortStartScheduler+0xec>)
 801030e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010310:	78fb      	ldrb	r3, [r7, #3]
 8010312:	b2db      	uxtb	r3, r3
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	b2db      	uxtb	r3, r3
 8010318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801031a:	78fb      	ldrb	r3, [r7, #3]
 801031c:	b2db      	uxtb	r3, r3
 801031e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010322:	2b80      	cmp	r3, #128	@ 0x80
 8010324:	d0ef      	beq.n	8010306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010326:	4b25      	ldr	r3, [pc, #148]	@ (80103bc <xPortStartScheduler+0xec>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f1c3 0307 	rsb	r3, r3, #7
 801032e:	2b04      	cmp	r3, #4
 8010330:	d00d      	beq.n	801034e <xPortStartScheduler+0x7e>
	__asm volatile
 8010332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010336:	b672      	cpsid	i
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	b662      	cpsie	i
 8010346:	60bb      	str	r3, [r7, #8]
}
 8010348:	bf00      	nop
 801034a:	bf00      	nop
 801034c:	e7fd      	b.n	801034a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801034e:	4b1b      	ldr	r3, [pc, #108]	@ (80103bc <xPortStartScheduler+0xec>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	021b      	lsls	r3, r3, #8
 8010354:	4a19      	ldr	r2, [pc, #100]	@ (80103bc <xPortStartScheduler+0xec>)
 8010356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010358:	4b18      	ldr	r3, [pc, #96]	@ (80103bc <xPortStartScheduler+0xec>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010360:	4a16      	ldr	r2, [pc, #88]	@ (80103bc <xPortStartScheduler+0xec>)
 8010362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	b2da      	uxtb	r2, r3
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801036c:	4b14      	ldr	r3, [pc, #80]	@ (80103c0 <xPortStartScheduler+0xf0>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a13      	ldr	r2, [pc, #76]	@ (80103c0 <xPortStartScheduler+0xf0>)
 8010372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010378:	4b11      	ldr	r3, [pc, #68]	@ (80103c0 <xPortStartScheduler+0xf0>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4a10      	ldr	r2, [pc, #64]	@ (80103c0 <xPortStartScheduler+0xf0>)
 801037e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010384:	f000 f8dc 	bl	8010540 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010388:	4b0e      	ldr	r3, [pc, #56]	@ (80103c4 <xPortStartScheduler+0xf4>)
 801038a:	2200      	movs	r2, #0
 801038c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801038e:	f000 f8fb 	bl	8010588 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010392:	4b0d      	ldr	r3, [pc, #52]	@ (80103c8 <xPortStartScheduler+0xf8>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4a0c      	ldr	r2, [pc, #48]	@ (80103c8 <xPortStartScheduler+0xf8>)
 8010398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801039c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801039e:	f7ff ff83 	bl	80102a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80103a2:	f7ff f96b 	bl	800f67c <vTaskSwitchContext>
	prvTaskExitError();
 80103a6:	f7ff ff35 	bl	8010214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	e000e400 	.word	0xe000e400
 80103b8:	20006034 	.word	0x20006034
 80103bc:	20006038 	.word	0x20006038
 80103c0:	e000ed20 	.word	0xe000ed20
 80103c4:	20000044 	.word	0x20000044
 80103c8:	e000ef34 	.word	0xe000ef34

080103cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
	__asm volatile
 80103d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d6:	b672      	cpsid	i
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	b662      	cpsie	i
 80103e6:	607b      	str	r3, [r7, #4]
}
 80103e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103ea:	4b11      	ldr	r3, [pc, #68]	@ (8010430 <vPortEnterCritical+0x64>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3301      	adds	r3, #1
 80103f0:	4a0f      	ldr	r2, [pc, #60]	@ (8010430 <vPortEnterCritical+0x64>)
 80103f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103f4:	4b0e      	ldr	r3, [pc, #56]	@ (8010430 <vPortEnterCritical+0x64>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d112      	bne.n	8010422 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010434 <vPortEnterCritical+0x68>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00d      	beq.n	8010422 <vPortEnterCritical+0x56>
	__asm volatile
 8010406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801040a:	b672      	cpsid	i
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	b662      	cpsie	i
 801041a:	603b      	str	r3, [r7, #0]
}
 801041c:	bf00      	nop
 801041e:	bf00      	nop
 8010420:	e7fd      	b.n	801041e <vPortEnterCritical+0x52>
	}
}
 8010422:	bf00      	nop
 8010424:	370c      	adds	r7, #12
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop
 8010430:	20000044 	.word	0x20000044
 8010434:	e000ed04 	.word	0xe000ed04

08010438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801043e:	4b13      	ldr	r3, [pc, #76]	@ (801048c <vPortExitCritical+0x54>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d10d      	bne.n	8010462 <vPortExitCritical+0x2a>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044a:	b672      	cpsid	i
 801044c:	f383 8811 	msr	BASEPRI, r3
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	f3bf 8f4f 	dsb	sy
 8010458:	b662      	cpsie	i
 801045a:	607b      	str	r3, [r7, #4]
}
 801045c:	bf00      	nop
 801045e:	bf00      	nop
 8010460:	e7fd      	b.n	801045e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010462:	4b0a      	ldr	r3, [pc, #40]	@ (801048c <vPortExitCritical+0x54>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3b01      	subs	r3, #1
 8010468:	4a08      	ldr	r2, [pc, #32]	@ (801048c <vPortExitCritical+0x54>)
 801046a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801046c:	4b07      	ldr	r3, [pc, #28]	@ (801048c <vPortExitCritical+0x54>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d105      	bne.n	8010480 <vPortExitCritical+0x48>
 8010474:	2300      	movs	r3, #0
 8010476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f383 8811 	msr	BASEPRI, r3
}
 801047e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010480:	bf00      	nop
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr
 801048c:	20000044 	.word	0x20000044

08010490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010490:	f3ef 8009 	mrs	r0, PSP
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	4b15      	ldr	r3, [pc, #84]	@ (80104f0 <pxCurrentTCBConst>)
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	f01e 0f10 	tst.w	lr, #16
 80104a0:	bf08      	it	eq
 80104a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80104a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104aa:	6010      	str	r0, [r2, #0]
 80104ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80104b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80104b4:	b672      	cpsid	i
 80104b6:	f380 8811 	msr	BASEPRI, r0
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	b662      	cpsie	i
 80104c4:	f7ff f8da 	bl	800f67c <vTaskSwitchContext>
 80104c8:	f04f 0000 	mov.w	r0, #0
 80104cc:	f380 8811 	msr	BASEPRI, r0
 80104d0:	bc09      	pop	{r0, r3}
 80104d2:	6819      	ldr	r1, [r3, #0]
 80104d4:	6808      	ldr	r0, [r1, #0]
 80104d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104da:	f01e 0f10 	tst.w	lr, #16
 80104de:	bf08      	it	eq
 80104e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104e4:	f380 8809 	msr	PSP, r0
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop

080104f0 <pxCurrentTCBConst>:
 80104f0:	20005f08 	.word	0x20005f08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104f4:	bf00      	nop
 80104f6:	bf00      	nop

080104f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010502:	b672      	cpsid	i
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	b662      	cpsie	i
 8010512:	607b      	str	r3, [r7, #4]
}
 8010514:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010516:	f7fe fff5 	bl	800f504 <xTaskIncrementTick>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d003      	beq.n	8010528 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010520:	4b06      	ldr	r3, [pc, #24]	@ (801053c <xPortSysTickHandler+0x44>)
 8010522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010526:	601a      	str	r2, [r3, #0]
 8010528:	2300      	movs	r3, #0
 801052a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	f383 8811 	msr	BASEPRI, r3
}
 8010532:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	e000ed04 	.word	0xe000ed04

08010540 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010540:	b480      	push	{r7}
 8010542:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010544:	4b0b      	ldr	r3, [pc, #44]	@ (8010574 <vPortSetupTimerInterrupt+0x34>)
 8010546:	2200      	movs	r2, #0
 8010548:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801054a:	4b0b      	ldr	r3, [pc, #44]	@ (8010578 <vPortSetupTimerInterrupt+0x38>)
 801054c:	2200      	movs	r2, #0
 801054e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010550:	4b0a      	ldr	r3, [pc, #40]	@ (801057c <vPortSetupTimerInterrupt+0x3c>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a0a      	ldr	r2, [pc, #40]	@ (8010580 <vPortSetupTimerInterrupt+0x40>)
 8010556:	fba2 2303 	umull	r2, r3, r2, r3
 801055a:	099b      	lsrs	r3, r3, #6
 801055c:	4a09      	ldr	r2, [pc, #36]	@ (8010584 <vPortSetupTimerInterrupt+0x44>)
 801055e:	3b01      	subs	r3, #1
 8010560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010562:	4b04      	ldr	r3, [pc, #16]	@ (8010574 <vPortSetupTimerInterrupt+0x34>)
 8010564:	2207      	movs	r2, #7
 8010566:	601a      	str	r2, [r3, #0]
}
 8010568:	bf00      	nop
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	e000e010 	.word	0xe000e010
 8010578:	e000e018 	.word	0xe000e018
 801057c:	20000008 	.word	0x20000008
 8010580:	10624dd3 	.word	0x10624dd3
 8010584:	e000e014 	.word	0xe000e014

08010588 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010588:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010598 <vPortEnableVFP+0x10>
 801058c:	6801      	ldr	r1, [r0, #0]
 801058e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010592:	6001      	str	r1, [r0, #0]
 8010594:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010596:	bf00      	nop
 8010598:	e000ed88 	.word	0xe000ed88

0801059c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80105a2:	f3ef 8305 	mrs	r3, IPSR
 80105a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b0f      	cmp	r3, #15
 80105ac:	d917      	bls.n	80105de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80105ae:	4a1a      	ldr	r2, [pc, #104]	@ (8010618 <vPortValidateInterruptPriority+0x7c>)
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	4413      	add	r3, r2
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80105b8:	4b18      	ldr	r3, [pc, #96]	@ (801061c <vPortValidateInterruptPriority+0x80>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	7afa      	ldrb	r2, [r7, #11]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d20d      	bcs.n	80105de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80105c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105c6:	b672      	cpsid	i
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	b662      	cpsie	i
 80105d6:	607b      	str	r3, [r7, #4]
}
 80105d8:	bf00      	nop
 80105da:	bf00      	nop
 80105dc:	e7fd      	b.n	80105da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105de:	4b10      	ldr	r3, [pc, #64]	@ (8010620 <vPortValidateInterruptPriority+0x84>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80105e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010624 <vPortValidateInterruptPriority+0x88>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d90d      	bls.n	801060a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f2:	b672      	cpsid	i
 80105f4:	f383 8811 	msr	BASEPRI, r3
 80105f8:	f3bf 8f6f 	isb	sy
 80105fc:	f3bf 8f4f 	dsb	sy
 8010600:	b662      	cpsie	i
 8010602:	603b      	str	r3, [r7, #0]
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop
 8010608:	e7fd      	b.n	8010606 <vPortValidateInterruptPriority+0x6a>
	}
 801060a:	bf00      	nop
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	e000e3f0 	.word	0xe000e3f0
 801061c:	20006034 	.word	0x20006034
 8010620:	e000ed0c 	.word	0xe000ed0c
 8010624:	20006038 	.word	0x20006038

08010628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	@ 0x28
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010630:	2300      	movs	r3, #0
 8010632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010634:	f7fe fe96 	bl	800f364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010638:	4b5d      	ldr	r3, [pc, #372]	@ (80107b0 <pvPortMalloc+0x188>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010640:	f000 f920 	bl	8010884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010644:	4b5b      	ldr	r3, [pc, #364]	@ (80107b4 <pvPortMalloc+0x18c>)
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4013      	ands	r3, r2
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 8094 	bne.w	801077a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d020      	beq.n	801069a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010658:	2208      	movs	r2, #8
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4413      	add	r3, r2
 801065e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f003 0307 	and.w	r3, r3, #7
 8010666:	2b00      	cmp	r3, #0
 8010668:	d017      	beq.n	801069a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f023 0307 	bic.w	r3, r3, #7
 8010670:	3308      	adds	r3, #8
 8010672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f003 0307 	and.w	r3, r3, #7
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00d      	beq.n	801069a <pvPortMalloc+0x72>
	__asm volatile
 801067e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010682:	b672      	cpsid	i
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	b662      	cpsie	i
 8010692:	617b      	str	r3, [r7, #20]
}
 8010694:	bf00      	nop
 8010696:	bf00      	nop
 8010698:	e7fd      	b.n	8010696 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d06c      	beq.n	801077a <pvPortMalloc+0x152>
 80106a0:	4b45      	ldr	r3, [pc, #276]	@ (80107b8 <pvPortMalloc+0x190>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d867      	bhi.n	801077a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80106aa:	4b44      	ldr	r3, [pc, #272]	@ (80107bc <pvPortMalloc+0x194>)
 80106ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80106ae:	4b43      	ldr	r3, [pc, #268]	@ (80107bc <pvPortMalloc+0x194>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106b4:	e004      	b.n	80106c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80106b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80106ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d903      	bls.n	80106d2 <pvPortMalloc+0xaa>
 80106ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1f1      	bne.n	80106b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80106d2:	4b37      	ldr	r3, [pc, #220]	@ (80107b0 <pvPortMalloc+0x188>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106d8:	429a      	cmp	r2, r3
 80106da:	d04e      	beq.n	801077a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2208      	movs	r2, #8
 80106e2:	4413      	add	r3, r2
 80106e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80106e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80106ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	1ad2      	subs	r2, r2, r3
 80106f6:	2308      	movs	r3, #8
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d922      	bls.n	8010744 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	4413      	add	r3, r2
 8010704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	f003 0307 	and.w	r3, r3, #7
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00d      	beq.n	801072c <pvPortMalloc+0x104>
	__asm volatile
 8010710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010714:	b672      	cpsid	i
 8010716:	f383 8811 	msr	BASEPRI, r3
 801071a:	f3bf 8f6f 	isb	sy
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	b662      	cpsie	i
 8010724:	613b      	str	r3, [r7, #16]
}
 8010726:	bf00      	nop
 8010728:	bf00      	nop
 801072a:	e7fd      	b.n	8010728 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	1ad2      	subs	r2, r2, r3
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801073e:	69b8      	ldr	r0, [r7, #24]
 8010740:	f000 f902 	bl	8010948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010744:	4b1c      	ldr	r3, [pc, #112]	@ (80107b8 <pvPortMalloc+0x190>)
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	4a1a      	ldr	r2, [pc, #104]	@ (80107b8 <pvPortMalloc+0x190>)
 8010750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010752:	4b19      	ldr	r3, [pc, #100]	@ (80107b8 <pvPortMalloc+0x190>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	4b1a      	ldr	r3, [pc, #104]	@ (80107c0 <pvPortMalloc+0x198>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	d203      	bcs.n	8010766 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801075e:	4b16      	ldr	r3, [pc, #88]	@ (80107b8 <pvPortMalloc+0x190>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4a17      	ldr	r2, [pc, #92]	@ (80107c0 <pvPortMalloc+0x198>)
 8010764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	4b12      	ldr	r3, [pc, #72]	@ (80107b4 <pvPortMalloc+0x18c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	431a      	orrs	r2, r3
 8010770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801077a:	f7fe fe01 	bl	800f380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	f003 0307 	and.w	r3, r3, #7
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00d      	beq.n	80107a4 <pvPortMalloc+0x17c>
	__asm volatile
 8010788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801078c:	b672      	cpsid	i
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	b662      	cpsie	i
 801079c:	60fb      	str	r3, [r7, #12]
}
 801079e:	bf00      	nop
 80107a0:	bf00      	nop
 80107a2:	e7fd      	b.n	80107a0 <pvPortMalloc+0x178>
	return pvReturn;
 80107a4:	69fb      	ldr	r3, [r7, #28]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3728      	adds	r7, #40	@ 0x28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	20012044 	.word	0x20012044
 80107b4:	20012050 	.word	0x20012050
 80107b8:	20012048 	.word	0x20012048
 80107bc:	2001203c 	.word	0x2001203c
 80107c0:	2001204c 	.word	0x2001204c

080107c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d04e      	beq.n	8010874 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80107d6:	2308      	movs	r3, #8
 80107d8:	425b      	negs	r3, r3
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	4413      	add	r3, r2
 80107de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	4b24      	ldr	r3, [pc, #144]	@ (801087c <vPortFree+0xb8>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4013      	ands	r3, r2
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10d      	bne.n	801080e <vPortFree+0x4a>
	__asm volatile
 80107f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f6:	b672      	cpsid	i
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	b662      	cpsie	i
 8010806:	60fb      	str	r3, [r7, #12]
}
 8010808:	bf00      	nop
 801080a:	bf00      	nop
 801080c:	e7fd      	b.n	801080a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00d      	beq.n	8010832 <vPortFree+0x6e>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	60bb      	str	r3, [r7, #8]
}
 801082c:	bf00      	nop
 801082e:	bf00      	nop
 8010830:	e7fd      	b.n	801082e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	4b11      	ldr	r3, [pc, #68]	@ (801087c <vPortFree+0xb8>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4013      	ands	r3, r2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d019      	beq.n	8010874 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d115      	bne.n	8010874 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	685a      	ldr	r2, [r3, #4]
 801084c:	4b0b      	ldr	r3, [pc, #44]	@ (801087c <vPortFree+0xb8>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	43db      	mvns	r3, r3
 8010852:	401a      	ands	r2, r3
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010858:	f7fe fd84 	bl	800f364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	685a      	ldr	r2, [r3, #4]
 8010860:	4b07      	ldr	r3, [pc, #28]	@ (8010880 <vPortFree+0xbc>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4413      	add	r3, r2
 8010866:	4a06      	ldr	r2, [pc, #24]	@ (8010880 <vPortFree+0xbc>)
 8010868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801086a:	6938      	ldr	r0, [r7, #16]
 801086c:	f000 f86c 	bl	8010948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010870:	f7fe fd86 	bl	800f380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010874:	bf00      	nop
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	20012050 	.word	0x20012050
 8010880:	20012048 	.word	0x20012048

08010884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801088a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 801088e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010890:	4b27      	ldr	r3, [pc, #156]	@ (8010930 <prvHeapInit+0xac>)
 8010892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f003 0307 	and.w	r3, r3, #7
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00c      	beq.n	80108b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3307      	adds	r3, #7
 80108a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f023 0307 	bic.w	r3, r3, #7
 80108aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	4a1f      	ldr	r2, [pc, #124]	@ (8010930 <prvHeapInit+0xac>)
 80108b4:	4413      	add	r3, r2
 80108b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108bc:	4a1d      	ldr	r2, [pc, #116]	@ (8010934 <prvHeapInit+0xb0>)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108c2:	4b1c      	ldr	r3, [pc, #112]	@ (8010934 <prvHeapInit+0xb0>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	4413      	add	r3, r2
 80108ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80108d0:	2208      	movs	r2, #8
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	1a9b      	subs	r3, r3, r2
 80108d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f023 0307 	bic.w	r3, r3, #7
 80108de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	4a15      	ldr	r2, [pc, #84]	@ (8010938 <prvHeapInit+0xb4>)
 80108e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108e6:	4b14      	ldr	r3, [pc, #80]	@ (8010938 <prvHeapInit+0xb4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2200      	movs	r2, #0
 80108ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108ee:	4b12      	ldr	r3, [pc, #72]	@ (8010938 <prvHeapInit+0xb4>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	1ad2      	subs	r2, r2, r3
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010904:	4b0c      	ldr	r3, [pc, #48]	@ (8010938 <prvHeapInit+0xb4>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	4a0a      	ldr	r2, [pc, #40]	@ (801093c <prvHeapInit+0xb8>)
 8010912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	4a09      	ldr	r2, [pc, #36]	@ (8010940 <prvHeapInit+0xbc>)
 801091a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801091c:	4b09      	ldr	r3, [pc, #36]	@ (8010944 <prvHeapInit+0xc0>)
 801091e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010922:	601a      	str	r2, [r3, #0]
}
 8010924:	bf00      	nop
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	2000603c 	.word	0x2000603c
 8010934:	2001203c 	.word	0x2001203c
 8010938:	20012044 	.word	0x20012044
 801093c:	2001204c 	.word	0x2001204c
 8010940:	20012048 	.word	0x20012048
 8010944:	20012050 	.word	0x20012050

08010948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010950:	4b28      	ldr	r3, [pc, #160]	@ (80109f4 <prvInsertBlockIntoFreeList+0xac>)
 8010952:	60fb      	str	r3, [r7, #12]
 8010954:	e002      	b.n	801095c <prvInsertBlockIntoFreeList+0x14>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d8f7      	bhi.n	8010956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	4413      	add	r3, r2
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	429a      	cmp	r2, r3
 8010976:	d108      	bne.n	801098a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	685a      	ldr	r2, [r3, #4]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	441a      	add	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	441a      	add	r2, r3
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	429a      	cmp	r2, r3
 801099c:	d118      	bne.n	80109d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	4b15      	ldr	r3, [pc, #84]	@ (80109f8 <prvInsertBlockIntoFreeList+0xb0>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d00d      	beq.n	80109c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	685a      	ldr	r2, [r3, #4]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	441a      	add	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	e008      	b.n	80109d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109c6:	4b0c      	ldr	r3, [pc, #48]	@ (80109f8 <prvInsertBlockIntoFreeList+0xb0>)
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	e003      	b.n	80109d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d002      	beq.n	80109e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109e6:	bf00      	nop
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	2001203c 	.word	0x2001203c
 80109f8:	20012044 	.word	0x20012044

080109fc <siprintf>:
 80109fc:	b40e      	push	{r1, r2, r3}
 80109fe:	b510      	push	{r4, lr}
 8010a00:	b09d      	sub	sp, #116	@ 0x74
 8010a02:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010a04:	9002      	str	r0, [sp, #8]
 8010a06:	9006      	str	r0, [sp, #24]
 8010a08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010a0c:	480a      	ldr	r0, [pc, #40]	@ (8010a38 <siprintf+0x3c>)
 8010a0e:	9107      	str	r1, [sp, #28]
 8010a10:	9104      	str	r1, [sp, #16]
 8010a12:	490a      	ldr	r1, [pc, #40]	@ (8010a3c <siprintf+0x40>)
 8010a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a18:	9105      	str	r1, [sp, #20]
 8010a1a:	2400      	movs	r4, #0
 8010a1c:	a902      	add	r1, sp, #8
 8010a1e:	6800      	ldr	r0, [r0, #0]
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010a24:	f000 fa00 	bl	8010e28 <_svfiprintf_r>
 8010a28:	9b02      	ldr	r3, [sp, #8]
 8010a2a:	701c      	strb	r4, [r3, #0]
 8010a2c:	b01d      	add	sp, #116	@ 0x74
 8010a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a32:	b003      	add	sp, #12
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	20000048 	.word	0x20000048
 8010a3c:	ffff0208 	.word	0xffff0208

08010a40 <memset>:
 8010a40:	4402      	add	r2, r0
 8010a42:	4603      	mov	r3, r0
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d100      	bne.n	8010a4a <memset+0xa>
 8010a48:	4770      	bx	lr
 8010a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a4e:	e7f9      	b.n	8010a44 <memset+0x4>

08010a50 <_reclaim_reent>:
 8010a50:	4b2d      	ldr	r3, [pc, #180]	@ (8010b08 <_reclaim_reent+0xb8>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4283      	cmp	r3, r0
 8010a56:	b570      	push	{r4, r5, r6, lr}
 8010a58:	4604      	mov	r4, r0
 8010a5a:	d053      	beq.n	8010b04 <_reclaim_reent+0xb4>
 8010a5c:	69c3      	ldr	r3, [r0, #28]
 8010a5e:	b31b      	cbz	r3, 8010aa8 <_reclaim_reent+0x58>
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	b163      	cbz	r3, 8010a7e <_reclaim_reent+0x2e>
 8010a64:	2500      	movs	r5, #0
 8010a66:	69e3      	ldr	r3, [r4, #28]
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	5959      	ldr	r1, [r3, r5]
 8010a6c:	b9b1      	cbnz	r1, 8010a9c <_reclaim_reent+0x4c>
 8010a6e:	3504      	adds	r5, #4
 8010a70:	2d80      	cmp	r5, #128	@ 0x80
 8010a72:	d1f8      	bne.n	8010a66 <_reclaim_reent+0x16>
 8010a74:	69e3      	ldr	r3, [r4, #28]
 8010a76:	4620      	mov	r0, r4
 8010a78:	68d9      	ldr	r1, [r3, #12]
 8010a7a:	f000 f881 	bl	8010b80 <_free_r>
 8010a7e:	69e3      	ldr	r3, [r4, #28]
 8010a80:	6819      	ldr	r1, [r3, #0]
 8010a82:	b111      	cbz	r1, 8010a8a <_reclaim_reent+0x3a>
 8010a84:	4620      	mov	r0, r4
 8010a86:	f000 f87b 	bl	8010b80 <_free_r>
 8010a8a:	69e3      	ldr	r3, [r4, #28]
 8010a8c:	689d      	ldr	r5, [r3, #8]
 8010a8e:	b15d      	cbz	r5, 8010aa8 <_reclaim_reent+0x58>
 8010a90:	4629      	mov	r1, r5
 8010a92:	4620      	mov	r0, r4
 8010a94:	682d      	ldr	r5, [r5, #0]
 8010a96:	f000 f873 	bl	8010b80 <_free_r>
 8010a9a:	e7f8      	b.n	8010a8e <_reclaim_reent+0x3e>
 8010a9c:	680e      	ldr	r6, [r1, #0]
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f000 f86e 	bl	8010b80 <_free_r>
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	e7e1      	b.n	8010a6c <_reclaim_reent+0x1c>
 8010aa8:	6961      	ldr	r1, [r4, #20]
 8010aaa:	b111      	cbz	r1, 8010ab2 <_reclaim_reent+0x62>
 8010aac:	4620      	mov	r0, r4
 8010aae:	f000 f867 	bl	8010b80 <_free_r>
 8010ab2:	69e1      	ldr	r1, [r4, #28]
 8010ab4:	b111      	cbz	r1, 8010abc <_reclaim_reent+0x6c>
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f000 f862 	bl	8010b80 <_free_r>
 8010abc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010abe:	b111      	cbz	r1, 8010ac6 <_reclaim_reent+0x76>
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f000 f85d 	bl	8010b80 <_free_r>
 8010ac6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ac8:	b111      	cbz	r1, 8010ad0 <_reclaim_reent+0x80>
 8010aca:	4620      	mov	r0, r4
 8010acc:	f000 f858 	bl	8010b80 <_free_r>
 8010ad0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010ad2:	b111      	cbz	r1, 8010ada <_reclaim_reent+0x8a>
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f000 f853 	bl	8010b80 <_free_r>
 8010ada:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010adc:	b111      	cbz	r1, 8010ae4 <_reclaim_reent+0x94>
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f000 f84e 	bl	8010b80 <_free_r>
 8010ae4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010ae6:	b111      	cbz	r1, 8010aee <_reclaim_reent+0x9e>
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f000 f849 	bl	8010b80 <_free_r>
 8010aee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010af0:	b111      	cbz	r1, 8010af8 <_reclaim_reent+0xa8>
 8010af2:	4620      	mov	r0, r4
 8010af4:	f000 f844 	bl	8010b80 <_free_r>
 8010af8:	6a23      	ldr	r3, [r4, #32]
 8010afa:	b11b      	cbz	r3, 8010b04 <_reclaim_reent+0xb4>
 8010afc:	4620      	mov	r0, r4
 8010afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b02:	4718      	bx	r3
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	bf00      	nop
 8010b08:	20000048 	.word	0x20000048

08010b0c <__errno>:
 8010b0c:	4b01      	ldr	r3, [pc, #4]	@ (8010b14 <__errno+0x8>)
 8010b0e:	6818      	ldr	r0, [r3, #0]
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	20000048 	.word	0x20000048

08010b18 <__libc_init_array>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8010b50 <__libc_init_array+0x38>)
 8010b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8010b54 <__libc_init_array+0x3c>)
 8010b1e:	1b64      	subs	r4, r4, r5
 8010b20:	10a4      	asrs	r4, r4, #2
 8010b22:	2600      	movs	r6, #0
 8010b24:	42a6      	cmp	r6, r4
 8010b26:	d109      	bne.n	8010b3c <__libc_init_array+0x24>
 8010b28:	4d0b      	ldr	r5, [pc, #44]	@ (8010b58 <__libc_init_array+0x40>)
 8010b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8010b5c <__libc_init_array+0x44>)
 8010b2c:	f000 fc64 	bl	80113f8 <_init>
 8010b30:	1b64      	subs	r4, r4, r5
 8010b32:	10a4      	asrs	r4, r4, #2
 8010b34:	2600      	movs	r6, #0
 8010b36:	42a6      	cmp	r6, r4
 8010b38:	d105      	bne.n	8010b46 <__libc_init_array+0x2e>
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b40:	4798      	blx	r3
 8010b42:	3601      	adds	r6, #1
 8010b44:	e7ee      	b.n	8010b24 <__libc_init_array+0xc>
 8010b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b4a:	4798      	blx	r3
 8010b4c:	3601      	adds	r6, #1
 8010b4e:	e7f2      	b.n	8010b36 <__libc_init_array+0x1e>
 8010b50:	08011614 	.word	0x08011614
 8010b54:	08011614 	.word	0x08011614
 8010b58:	08011614 	.word	0x08011614
 8010b5c:	08011618 	.word	0x08011618

08010b60 <__retarget_lock_acquire_recursive>:
 8010b60:	4770      	bx	lr

08010b62 <__retarget_lock_release_recursive>:
 8010b62:	4770      	bx	lr

08010b64 <memcpy>:
 8010b64:	440a      	add	r2, r1
 8010b66:	4291      	cmp	r1, r2
 8010b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b6c:	d100      	bne.n	8010b70 <memcpy+0xc>
 8010b6e:	4770      	bx	lr
 8010b70:	b510      	push	{r4, lr}
 8010b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b7a:	4291      	cmp	r1, r2
 8010b7c:	d1f9      	bne.n	8010b72 <memcpy+0xe>
 8010b7e:	bd10      	pop	{r4, pc}

08010b80 <_free_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	4605      	mov	r5, r0
 8010b84:	2900      	cmp	r1, #0
 8010b86:	d041      	beq.n	8010c0c <_free_r+0x8c>
 8010b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b8c:	1f0c      	subs	r4, r1, #4
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	bfb8      	it	lt
 8010b92:	18e4      	addlt	r4, r4, r3
 8010b94:	f000 f8e0 	bl	8010d58 <__malloc_lock>
 8010b98:	4a1d      	ldr	r2, [pc, #116]	@ (8010c10 <_free_r+0x90>)
 8010b9a:	6813      	ldr	r3, [r2, #0]
 8010b9c:	b933      	cbnz	r3, 8010bac <_free_r+0x2c>
 8010b9e:	6063      	str	r3, [r4, #4]
 8010ba0:	6014      	str	r4, [r2, #0]
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ba8:	f000 b8dc 	b.w	8010d64 <__malloc_unlock>
 8010bac:	42a3      	cmp	r3, r4
 8010bae:	d908      	bls.n	8010bc2 <_free_r+0x42>
 8010bb0:	6820      	ldr	r0, [r4, #0]
 8010bb2:	1821      	adds	r1, r4, r0
 8010bb4:	428b      	cmp	r3, r1
 8010bb6:	bf01      	itttt	eq
 8010bb8:	6819      	ldreq	r1, [r3, #0]
 8010bba:	685b      	ldreq	r3, [r3, #4]
 8010bbc:	1809      	addeq	r1, r1, r0
 8010bbe:	6021      	streq	r1, [r4, #0]
 8010bc0:	e7ed      	b.n	8010b9e <_free_r+0x1e>
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	b10b      	cbz	r3, 8010bcc <_free_r+0x4c>
 8010bc8:	42a3      	cmp	r3, r4
 8010bca:	d9fa      	bls.n	8010bc2 <_free_r+0x42>
 8010bcc:	6811      	ldr	r1, [r2, #0]
 8010bce:	1850      	adds	r0, r2, r1
 8010bd0:	42a0      	cmp	r0, r4
 8010bd2:	d10b      	bne.n	8010bec <_free_r+0x6c>
 8010bd4:	6820      	ldr	r0, [r4, #0]
 8010bd6:	4401      	add	r1, r0
 8010bd8:	1850      	adds	r0, r2, r1
 8010bda:	4283      	cmp	r3, r0
 8010bdc:	6011      	str	r1, [r2, #0]
 8010bde:	d1e0      	bne.n	8010ba2 <_free_r+0x22>
 8010be0:	6818      	ldr	r0, [r3, #0]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	6053      	str	r3, [r2, #4]
 8010be6:	4408      	add	r0, r1
 8010be8:	6010      	str	r0, [r2, #0]
 8010bea:	e7da      	b.n	8010ba2 <_free_r+0x22>
 8010bec:	d902      	bls.n	8010bf4 <_free_r+0x74>
 8010bee:	230c      	movs	r3, #12
 8010bf0:	602b      	str	r3, [r5, #0]
 8010bf2:	e7d6      	b.n	8010ba2 <_free_r+0x22>
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	1821      	adds	r1, r4, r0
 8010bf8:	428b      	cmp	r3, r1
 8010bfa:	bf04      	itt	eq
 8010bfc:	6819      	ldreq	r1, [r3, #0]
 8010bfe:	685b      	ldreq	r3, [r3, #4]
 8010c00:	6063      	str	r3, [r4, #4]
 8010c02:	bf04      	itt	eq
 8010c04:	1809      	addeq	r1, r1, r0
 8010c06:	6021      	streq	r1, [r4, #0]
 8010c08:	6054      	str	r4, [r2, #4]
 8010c0a:	e7ca      	b.n	8010ba2 <_free_r+0x22>
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
 8010c0e:	bf00      	nop
 8010c10:	20012198 	.word	0x20012198

08010c14 <sbrk_aligned>:
 8010c14:	b570      	push	{r4, r5, r6, lr}
 8010c16:	4e0f      	ldr	r6, [pc, #60]	@ (8010c54 <sbrk_aligned+0x40>)
 8010c18:	460c      	mov	r4, r1
 8010c1a:	6831      	ldr	r1, [r6, #0]
 8010c1c:	4605      	mov	r5, r0
 8010c1e:	b911      	cbnz	r1, 8010c26 <sbrk_aligned+0x12>
 8010c20:	f000 fba4 	bl	801136c <_sbrk_r>
 8010c24:	6030      	str	r0, [r6, #0]
 8010c26:	4621      	mov	r1, r4
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f000 fb9f 	bl	801136c <_sbrk_r>
 8010c2e:	1c43      	adds	r3, r0, #1
 8010c30:	d103      	bne.n	8010c3a <sbrk_aligned+0x26>
 8010c32:	f04f 34ff 	mov.w	r4, #4294967295
 8010c36:	4620      	mov	r0, r4
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
 8010c3a:	1cc4      	adds	r4, r0, #3
 8010c3c:	f024 0403 	bic.w	r4, r4, #3
 8010c40:	42a0      	cmp	r0, r4
 8010c42:	d0f8      	beq.n	8010c36 <sbrk_aligned+0x22>
 8010c44:	1a21      	subs	r1, r4, r0
 8010c46:	4628      	mov	r0, r5
 8010c48:	f000 fb90 	bl	801136c <_sbrk_r>
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	d1f2      	bne.n	8010c36 <sbrk_aligned+0x22>
 8010c50:	e7ef      	b.n	8010c32 <sbrk_aligned+0x1e>
 8010c52:	bf00      	nop
 8010c54:	20012194 	.word	0x20012194

08010c58 <_malloc_r>:
 8010c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c5c:	1ccd      	adds	r5, r1, #3
 8010c5e:	f025 0503 	bic.w	r5, r5, #3
 8010c62:	3508      	adds	r5, #8
 8010c64:	2d0c      	cmp	r5, #12
 8010c66:	bf38      	it	cc
 8010c68:	250c      	movcc	r5, #12
 8010c6a:	2d00      	cmp	r5, #0
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	db01      	blt.n	8010c74 <_malloc_r+0x1c>
 8010c70:	42a9      	cmp	r1, r5
 8010c72:	d904      	bls.n	8010c7e <_malloc_r+0x26>
 8010c74:	230c      	movs	r3, #12
 8010c76:	6033      	str	r3, [r6, #0]
 8010c78:	2000      	movs	r0, #0
 8010c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d54 <_malloc_r+0xfc>
 8010c82:	f000 f869 	bl	8010d58 <__malloc_lock>
 8010c86:	f8d8 3000 	ldr.w	r3, [r8]
 8010c8a:	461c      	mov	r4, r3
 8010c8c:	bb44      	cbnz	r4, 8010ce0 <_malloc_r+0x88>
 8010c8e:	4629      	mov	r1, r5
 8010c90:	4630      	mov	r0, r6
 8010c92:	f7ff ffbf 	bl	8010c14 <sbrk_aligned>
 8010c96:	1c43      	adds	r3, r0, #1
 8010c98:	4604      	mov	r4, r0
 8010c9a:	d158      	bne.n	8010d4e <_malloc_r+0xf6>
 8010c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8010ca0:	4627      	mov	r7, r4
 8010ca2:	2f00      	cmp	r7, #0
 8010ca4:	d143      	bne.n	8010d2e <_malloc_r+0xd6>
 8010ca6:	2c00      	cmp	r4, #0
 8010ca8:	d04b      	beq.n	8010d42 <_malloc_r+0xea>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	4639      	mov	r1, r7
 8010cae:	4630      	mov	r0, r6
 8010cb0:	eb04 0903 	add.w	r9, r4, r3
 8010cb4:	f000 fb5a 	bl	801136c <_sbrk_r>
 8010cb8:	4581      	cmp	r9, r0
 8010cba:	d142      	bne.n	8010d42 <_malloc_r+0xea>
 8010cbc:	6821      	ldr	r1, [r4, #0]
 8010cbe:	1a6d      	subs	r5, r5, r1
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7ff ffa6 	bl	8010c14 <sbrk_aligned>
 8010cc8:	3001      	adds	r0, #1
 8010cca:	d03a      	beq.n	8010d42 <_malloc_r+0xea>
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	442b      	add	r3, r5
 8010cd0:	6023      	str	r3, [r4, #0]
 8010cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	bb62      	cbnz	r2, 8010d34 <_malloc_r+0xdc>
 8010cda:	f8c8 7000 	str.w	r7, [r8]
 8010cde:	e00f      	b.n	8010d00 <_malloc_r+0xa8>
 8010ce0:	6822      	ldr	r2, [r4, #0]
 8010ce2:	1b52      	subs	r2, r2, r5
 8010ce4:	d420      	bmi.n	8010d28 <_malloc_r+0xd0>
 8010ce6:	2a0b      	cmp	r2, #11
 8010ce8:	d917      	bls.n	8010d1a <_malloc_r+0xc2>
 8010cea:	1961      	adds	r1, r4, r5
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	6025      	str	r5, [r4, #0]
 8010cf0:	bf18      	it	ne
 8010cf2:	6059      	strne	r1, [r3, #4]
 8010cf4:	6863      	ldr	r3, [r4, #4]
 8010cf6:	bf08      	it	eq
 8010cf8:	f8c8 1000 	streq.w	r1, [r8]
 8010cfc:	5162      	str	r2, [r4, r5]
 8010cfe:	604b      	str	r3, [r1, #4]
 8010d00:	4630      	mov	r0, r6
 8010d02:	f000 f82f 	bl	8010d64 <__malloc_unlock>
 8010d06:	f104 000b 	add.w	r0, r4, #11
 8010d0a:	1d23      	adds	r3, r4, #4
 8010d0c:	f020 0007 	bic.w	r0, r0, #7
 8010d10:	1ac2      	subs	r2, r0, r3
 8010d12:	bf1c      	itt	ne
 8010d14:	1a1b      	subne	r3, r3, r0
 8010d16:	50a3      	strne	r3, [r4, r2]
 8010d18:	e7af      	b.n	8010c7a <_malloc_r+0x22>
 8010d1a:	6862      	ldr	r2, [r4, #4]
 8010d1c:	42a3      	cmp	r3, r4
 8010d1e:	bf0c      	ite	eq
 8010d20:	f8c8 2000 	streq.w	r2, [r8]
 8010d24:	605a      	strne	r2, [r3, #4]
 8010d26:	e7eb      	b.n	8010d00 <_malloc_r+0xa8>
 8010d28:	4623      	mov	r3, r4
 8010d2a:	6864      	ldr	r4, [r4, #4]
 8010d2c:	e7ae      	b.n	8010c8c <_malloc_r+0x34>
 8010d2e:	463c      	mov	r4, r7
 8010d30:	687f      	ldr	r7, [r7, #4]
 8010d32:	e7b6      	b.n	8010ca2 <_malloc_r+0x4a>
 8010d34:	461a      	mov	r2, r3
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	d1fb      	bne.n	8010d34 <_malloc_r+0xdc>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	6053      	str	r3, [r2, #4]
 8010d40:	e7de      	b.n	8010d00 <_malloc_r+0xa8>
 8010d42:	230c      	movs	r3, #12
 8010d44:	6033      	str	r3, [r6, #0]
 8010d46:	4630      	mov	r0, r6
 8010d48:	f000 f80c 	bl	8010d64 <__malloc_unlock>
 8010d4c:	e794      	b.n	8010c78 <_malloc_r+0x20>
 8010d4e:	6005      	str	r5, [r0, #0]
 8010d50:	e7d6      	b.n	8010d00 <_malloc_r+0xa8>
 8010d52:	bf00      	nop
 8010d54:	20012198 	.word	0x20012198

08010d58 <__malloc_lock>:
 8010d58:	4801      	ldr	r0, [pc, #4]	@ (8010d60 <__malloc_lock+0x8>)
 8010d5a:	f7ff bf01 	b.w	8010b60 <__retarget_lock_acquire_recursive>
 8010d5e:	bf00      	nop
 8010d60:	20012190 	.word	0x20012190

08010d64 <__malloc_unlock>:
 8010d64:	4801      	ldr	r0, [pc, #4]	@ (8010d6c <__malloc_unlock+0x8>)
 8010d66:	f7ff befc 	b.w	8010b62 <__retarget_lock_release_recursive>
 8010d6a:	bf00      	nop
 8010d6c:	20012190 	.word	0x20012190

08010d70 <__ssputs_r>:
 8010d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d74:	688e      	ldr	r6, [r1, #8]
 8010d76:	461f      	mov	r7, r3
 8010d78:	42be      	cmp	r6, r7
 8010d7a:	680b      	ldr	r3, [r1, #0]
 8010d7c:	4682      	mov	sl, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	4690      	mov	r8, r2
 8010d82:	d82d      	bhi.n	8010de0 <__ssputs_r+0x70>
 8010d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d8c:	d026      	beq.n	8010ddc <__ssputs_r+0x6c>
 8010d8e:	6965      	ldr	r5, [r4, #20]
 8010d90:	6909      	ldr	r1, [r1, #16]
 8010d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d96:	eba3 0901 	sub.w	r9, r3, r1
 8010d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d9e:	1c7b      	adds	r3, r7, #1
 8010da0:	444b      	add	r3, r9
 8010da2:	106d      	asrs	r5, r5, #1
 8010da4:	429d      	cmp	r5, r3
 8010da6:	bf38      	it	cc
 8010da8:	461d      	movcc	r5, r3
 8010daa:	0553      	lsls	r3, r2, #21
 8010dac:	d527      	bpl.n	8010dfe <__ssputs_r+0x8e>
 8010dae:	4629      	mov	r1, r5
 8010db0:	f7ff ff52 	bl	8010c58 <_malloc_r>
 8010db4:	4606      	mov	r6, r0
 8010db6:	b360      	cbz	r0, 8010e12 <__ssputs_r+0xa2>
 8010db8:	6921      	ldr	r1, [r4, #16]
 8010dba:	464a      	mov	r2, r9
 8010dbc:	f7ff fed2 	bl	8010b64 <memcpy>
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dca:	81a3      	strh	r3, [r4, #12]
 8010dcc:	6126      	str	r6, [r4, #16]
 8010dce:	6165      	str	r5, [r4, #20]
 8010dd0:	444e      	add	r6, r9
 8010dd2:	eba5 0509 	sub.w	r5, r5, r9
 8010dd6:	6026      	str	r6, [r4, #0]
 8010dd8:	60a5      	str	r5, [r4, #8]
 8010dda:	463e      	mov	r6, r7
 8010ddc:	42be      	cmp	r6, r7
 8010dde:	d900      	bls.n	8010de2 <__ssputs_r+0x72>
 8010de0:	463e      	mov	r6, r7
 8010de2:	6820      	ldr	r0, [r4, #0]
 8010de4:	4632      	mov	r2, r6
 8010de6:	4641      	mov	r1, r8
 8010de8:	f000 faa6 	bl	8011338 <memmove>
 8010dec:	68a3      	ldr	r3, [r4, #8]
 8010dee:	1b9b      	subs	r3, r3, r6
 8010df0:	60a3      	str	r3, [r4, #8]
 8010df2:	6823      	ldr	r3, [r4, #0]
 8010df4:	4433      	add	r3, r6
 8010df6:	6023      	str	r3, [r4, #0]
 8010df8:	2000      	movs	r0, #0
 8010dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dfe:	462a      	mov	r2, r5
 8010e00:	f000 fac4 	bl	801138c <_realloc_r>
 8010e04:	4606      	mov	r6, r0
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d1e0      	bne.n	8010dcc <__ssputs_r+0x5c>
 8010e0a:	6921      	ldr	r1, [r4, #16]
 8010e0c:	4650      	mov	r0, sl
 8010e0e:	f7ff feb7 	bl	8010b80 <_free_r>
 8010e12:	230c      	movs	r3, #12
 8010e14:	f8ca 3000 	str.w	r3, [sl]
 8010e18:	89a3      	ldrh	r3, [r4, #12]
 8010e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e1e:	81a3      	strh	r3, [r4, #12]
 8010e20:	f04f 30ff 	mov.w	r0, #4294967295
 8010e24:	e7e9      	b.n	8010dfa <__ssputs_r+0x8a>
	...

08010e28 <_svfiprintf_r>:
 8010e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	4698      	mov	r8, r3
 8010e2e:	898b      	ldrh	r3, [r1, #12]
 8010e30:	061b      	lsls	r3, r3, #24
 8010e32:	b09d      	sub	sp, #116	@ 0x74
 8010e34:	4607      	mov	r7, r0
 8010e36:	460d      	mov	r5, r1
 8010e38:	4614      	mov	r4, r2
 8010e3a:	d510      	bpl.n	8010e5e <_svfiprintf_r+0x36>
 8010e3c:	690b      	ldr	r3, [r1, #16]
 8010e3e:	b973      	cbnz	r3, 8010e5e <_svfiprintf_r+0x36>
 8010e40:	2140      	movs	r1, #64	@ 0x40
 8010e42:	f7ff ff09 	bl	8010c58 <_malloc_r>
 8010e46:	6028      	str	r0, [r5, #0]
 8010e48:	6128      	str	r0, [r5, #16]
 8010e4a:	b930      	cbnz	r0, 8010e5a <_svfiprintf_r+0x32>
 8010e4c:	230c      	movs	r3, #12
 8010e4e:	603b      	str	r3, [r7, #0]
 8010e50:	f04f 30ff 	mov.w	r0, #4294967295
 8010e54:	b01d      	add	sp, #116	@ 0x74
 8010e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5a:	2340      	movs	r3, #64	@ 0x40
 8010e5c:	616b      	str	r3, [r5, #20]
 8010e5e:	2300      	movs	r3, #0
 8010e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e62:	2320      	movs	r3, #32
 8010e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e6c:	2330      	movs	r3, #48	@ 0x30
 8010e6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801100c <_svfiprintf_r+0x1e4>
 8010e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e76:	f04f 0901 	mov.w	r9, #1
 8010e7a:	4623      	mov	r3, r4
 8010e7c:	469a      	mov	sl, r3
 8010e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e82:	b10a      	cbz	r2, 8010e88 <_svfiprintf_r+0x60>
 8010e84:	2a25      	cmp	r2, #37	@ 0x25
 8010e86:	d1f9      	bne.n	8010e7c <_svfiprintf_r+0x54>
 8010e88:	ebba 0b04 	subs.w	fp, sl, r4
 8010e8c:	d00b      	beq.n	8010ea6 <_svfiprintf_r+0x7e>
 8010e8e:	465b      	mov	r3, fp
 8010e90:	4622      	mov	r2, r4
 8010e92:	4629      	mov	r1, r5
 8010e94:	4638      	mov	r0, r7
 8010e96:	f7ff ff6b 	bl	8010d70 <__ssputs_r>
 8010e9a:	3001      	adds	r0, #1
 8010e9c:	f000 80a7 	beq.w	8010fee <_svfiprintf_r+0x1c6>
 8010ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ea2:	445a      	add	r2, fp
 8010ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 809f 	beq.w	8010fee <_svfiprintf_r+0x1c6>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8010eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eba:	f10a 0a01 	add.w	sl, sl, #1
 8010ebe:	9304      	str	r3, [sp, #16]
 8010ec0:	9307      	str	r3, [sp, #28]
 8010ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ec8:	4654      	mov	r4, sl
 8010eca:	2205      	movs	r2, #5
 8010ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ed0:	484e      	ldr	r0, [pc, #312]	@ (801100c <_svfiprintf_r+0x1e4>)
 8010ed2:	f7ef f9b5 	bl	8000240 <memchr>
 8010ed6:	9a04      	ldr	r2, [sp, #16]
 8010ed8:	b9d8      	cbnz	r0, 8010f12 <_svfiprintf_r+0xea>
 8010eda:	06d0      	lsls	r0, r2, #27
 8010edc:	bf44      	itt	mi
 8010ede:	2320      	movmi	r3, #32
 8010ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ee4:	0711      	lsls	r1, r2, #28
 8010ee6:	bf44      	itt	mi
 8010ee8:	232b      	movmi	r3, #43	@ 0x2b
 8010eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eee:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ef4:	d015      	beq.n	8010f22 <_svfiprintf_r+0xfa>
 8010ef6:	9a07      	ldr	r2, [sp, #28]
 8010ef8:	4654      	mov	r4, sl
 8010efa:	2000      	movs	r0, #0
 8010efc:	f04f 0c0a 	mov.w	ip, #10
 8010f00:	4621      	mov	r1, r4
 8010f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f06:	3b30      	subs	r3, #48	@ 0x30
 8010f08:	2b09      	cmp	r3, #9
 8010f0a:	d94b      	bls.n	8010fa4 <_svfiprintf_r+0x17c>
 8010f0c:	b1b0      	cbz	r0, 8010f3c <_svfiprintf_r+0x114>
 8010f0e:	9207      	str	r2, [sp, #28]
 8010f10:	e014      	b.n	8010f3c <_svfiprintf_r+0x114>
 8010f12:	eba0 0308 	sub.w	r3, r0, r8
 8010f16:	fa09 f303 	lsl.w	r3, r9, r3
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	9304      	str	r3, [sp, #16]
 8010f1e:	46a2      	mov	sl, r4
 8010f20:	e7d2      	b.n	8010ec8 <_svfiprintf_r+0xa0>
 8010f22:	9b03      	ldr	r3, [sp, #12]
 8010f24:	1d19      	adds	r1, r3, #4
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	9103      	str	r1, [sp, #12]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	bfbb      	ittet	lt
 8010f2e:	425b      	neglt	r3, r3
 8010f30:	f042 0202 	orrlt.w	r2, r2, #2
 8010f34:	9307      	strge	r3, [sp, #28]
 8010f36:	9307      	strlt	r3, [sp, #28]
 8010f38:	bfb8      	it	lt
 8010f3a:	9204      	strlt	r2, [sp, #16]
 8010f3c:	7823      	ldrb	r3, [r4, #0]
 8010f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f40:	d10a      	bne.n	8010f58 <_svfiprintf_r+0x130>
 8010f42:	7863      	ldrb	r3, [r4, #1]
 8010f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f46:	d132      	bne.n	8010fae <_svfiprintf_r+0x186>
 8010f48:	9b03      	ldr	r3, [sp, #12]
 8010f4a:	1d1a      	adds	r2, r3, #4
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	9203      	str	r2, [sp, #12]
 8010f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f54:	3402      	adds	r4, #2
 8010f56:	9305      	str	r3, [sp, #20]
 8010f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801101c <_svfiprintf_r+0x1f4>
 8010f5c:	7821      	ldrb	r1, [r4, #0]
 8010f5e:	2203      	movs	r2, #3
 8010f60:	4650      	mov	r0, sl
 8010f62:	f7ef f96d 	bl	8000240 <memchr>
 8010f66:	b138      	cbz	r0, 8010f78 <_svfiprintf_r+0x150>
 8010f68:	9b04      	ldr	r3, [sp, #16]
 8010f6a:	eba0 000a 	sub.w	r0, r0, sl
 8010f6e:	2240      	movs	r2, #64	@ 0x40
 8010f70:	4082      	lsls	r2, r0
 8010f72:	4313      	orrs	r3, r2
 8010f74:	3401      	adds	r4, #1
 8010f76:	9304      	str	r3, [sp, #16]
 8010f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f7c:	4824      	ldr	r0, [pc, #144]	@ (8011010 <_svfiprintf_r+0x1e8>)
 8010f7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f82:	2206      	movs	r2, #6
 8010f84:	f7ef f95c 	bl	8000240 <memchr>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d036      	beq.n	8010ffa <_svfiprintf_r+0x1d2>
 8010f8c:	4b21      	ldr	r3, [pc, #132]	@ (8011014 <_svfiprintf_r+0x1ec>)
 8010f8e:	bb1b      	cbnz	r3, 8010fd8 <_svfiprintf_r+0x1b0>
 8010f90:	9b03      	ldr	r3, [sp, #12]
 8010f92:	3307      	adds	r3, #7
 8010f94:	f023 0307 	bic.w	r3, r3, #7
 8010f98:	3308      	adds	r3, #8
 8010f9a:	9303      	str	r3, [sp, #12]
 8010f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f9e:	4433      	add	r3, r6
 8010fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fa2:	e76a      	b.n	8010e7a <_svfiprintf_r+0x52>
 8010fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fa8:	460c      	mov	r4, r1
 8010faa:	2001      	movs	r0, #1
 8010fac:	e7a8      	b.n	8010f00 <_svfiprintf_r+0xd8>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	3401      	adds	r4, #1
 8010fb2:	9305      	str	r3, [sp, #20]
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	f04f 0c0a 	mov.w	ip, #10
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fc0:	3a30      	subs	r2, #48	@ 0x30
 8010fc2:	2a09      	cmp	r2, #9
 8010fc4:	d903      	bls.n	8010fce <_svfiprintf_r+0x1a6>
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d0c6      	beq.n	8010f58 <_svfiprintf_r+0x130>
 8010fca:	9105      	str	r1, [sp, #20]
 8010fcc:	e7c4      	b.n	8010f58 <_svfiprintf_r+0x130>
 8010fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	e7f0      	b.n	8010fba <_svfiprintf_r+0x192>
 8010fd8:	ab03      	add	r3, sp, #12
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	462a      	mov	r2, r5
 8010fde:	4b0e      	ldr	r3, [pc, #56]	@ (8011018 <_svfiprintf_r+0x1f0>)
 8010fe0:	a904      	add	r1, sp, #16
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	1c42      	adds	r2, r0, #1
 8010fea:	4606      	mov	r6, r0
 8010fec:	d1d6      	bne.n	8010f9c <_svfiprintf_r+0x174>
 8010fee:	89ab      	ldrh	r3, [r5, #12]
 8010ff0:	065b      	lsls	r3, r3, #25
 8010ff2:	f53f af2d 	bmi.w	8010e50 <_svfiprintf_r+0x28>
 8010ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ff8:	e72c      	b.n	8010e54 <_svfiprintf_r+0x2c>
 8010ffa:	ab03      	add	r3, sp, #12
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	462a      	mov	r2, r5
 8011000:	4b05      	ldr	r3, [pc, #20]	@ (8011018 <_svfiprintf_r+0x1f0>)
 8011002:	a904      	add	r1, sp, #16
 8011004:	4638      	mov	r0, r7
 8011006:	f000 f879 	bl	80110fc <_printf_i>
 801100a:	e7ed      	b.n	8010fe8 <_svfiprintf_r+0x1c0>
 801100c:	080115d8 	.word	0x080115d8
 8011010:	080115e2 	.word	0x080115e2
 8011014:	00000000 	.word	0x00000000
 8011018:	08010d71 	.word	0x08010d71
 801101c:	080115de 	.word	0x080115de

08011020 <_printf_common>:
 8011020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011024:	4616      	mov	r6, r2
 8011026:	4698      	mov	r8, r3
 8011028:	688a      	ldr	r2, [r1, #8]
 801102a:	690b      	ldr	r3, [r1, #16]
 801102c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011030:	4293      	cmp	r3, r2
 8011032:	bfb8      	it	lt
 8011034:	4613      	movlt	r3, r2
 8011036:	6033      	str	r3, [r6, #0]
 8011038:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801103c:	4607      	mov	r7, r0
 801103e:	460c      	mov	r4, r1
 8011040:	b10a      	cbz	r2, 8011046 <_printf_common+0x26>
 8011042:	3301      	adds	r3, #1
 8011044:	6033      	str	r3, [r6, #0]
 8011046:	6823      	ldr	r3, [r4, #0]
 8011048:	0699      	lsls	r1, r3, #26
 801104a:	bf42      	ittt	mi
 801104c:	6833      	ldrmi	r3, [r6, #0]
 801104e:	3302      	addmi	r3, #2
 8011050:	6033      	strmi	r3, [r6, #0]
 8011052:	6825      	ldr	r5, [r4, #0]
 8011054:	f015 0506 	ands.w	r5, r5, #6
 8011058:	d106      	bne.n	8011068 <_printf_common+0x48>
 801105a:	f104 0a19 	add.w	sl, r4, #25
 801105e:	68e3      	ldr	r3, [r4, #12]
 8011060:	6832      	ldr	r2, [r6, #0]
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	42ab      	cmp	r3, r5
 8011066:	dc26      	bgt.n	80110b6 <_printf_common+0x96>
 8011068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801106c:	6822      	ldr	r2, [r4, #0]
 801106e:	3b00      	subs	r3, #0
 8011070:	bf18      	it	ne
 8011072:	2301      	movne	r3, #1
 8011074:	0692      	lsls	r2, r2, #26
 8011076:	d42b      	bmi.n	80110d0 <_printf_common+0xb0>
 8011078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801107c:	4641      	mov	r1, r8
 801107e:	4638      	mov	r0, r7
 8011080:	47c8      	blx	r9
 8011082:	3001      	adds	r0, #1
 8011084:	d01e      	beq.n	80110c4 <_printf_common+0xa4>
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	6922      	ldr	r2, [r4, #16]
 801108a:	f003 0306 	and.w	r3, r3, #6
 801108e:	2b04      	cmp	r3, #4
 8011090:	bf02      	ittt	eq
 8011092:	68e5      	ldreq	r5, [r4, #12]
 8011094:	6833      	ldreq	r3, [r6, #0]
 8011096:	1aed      	subeq	r5, r5, r3
 8011098:	68a3      	ldr	r3, [r4, #8]
 801109a:	bf0c      	ite	eq
 801109c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110a0:	2500      	movne	r5, #0
 80110a2:	4293      	cmp	r3, r2
 80110a4:	bfc4      	itt	gt
 80110a6:	1a9b      	subgt	r3, r3, r2
 80110a8:	18ed      	addgt	r5, r5, r3
 80110aa:	2600      	movs	r6, #0
 80110ac:	341a      	adds	r4, #26
 80110ae:	42b5      	cmp	r5, r6
 80110b0:	d11a      	bne.n	80110e8 <_printf_common+0xc8>
 80110b2:	2000      	movs	r0, #0
 80110b4:	e008      	b.n	80110c8 <_printf_common+0xa8>
 80110b6:	2301      	movs	r3, #1
 80110b8:	4652      	mov	r2, sl
 80110ba:	4641      	mov	r1, r8
 80110bc:	4638      	mov	r0, r7
 80110be:	47c8      	blx	r9
 80110c0:	3001      	adds	r0, #1
 80110c2:	d103      	bne.n	80110cc <_printf_common+0xac>
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
 80110c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110cc:	3501      	adds	r5, #1
 80110ce:	e7c6      	b.n	801105e <_printf_common+0x3e>
 80110d0:	18e1      	adds	r1, r4, r3
 80110d2:	1c5a      	adds	r2, r3, #1
 80110d4:	2030      	movs	r0, #48	@ 0x30
 80110d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80110da:	4422      	add	r2, r4
 80110dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80110e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80110e4:	3302      	adds	r3, #2
 80110e6:	e7c7      	b.n	8011078 <_printf_common+0x58>
 80110e8:	2301      	movs	r3, #1
 80110ea:	4622      	mov	r2, r4
 80110ec:	4641      	mov	r1, r8
 80110ee:	4638      	mov	r0, r7
 80110f0:	47c8      	blx	r9
 80110f2:	3001      	adds	r0, #1
 80110f4:	d0e6      	beq.n	80110c4 <_printf_common+0xa4>
 80110f6:	3601      	adds	r6, #1
 80110f8:	e7d9      	b.n	80110ae <_printf_common+0x8e>
	...

080110fc <_printf_i>:
 80110fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011100:	7e0f      	ldrb	r7, [r1, #24]
 8011102:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011104:	2f78      	cmp	r7, #120	@ 0x78
 8011106:	4691      	mov	r9, r2
 8011108:	4680      	mov	r8, r0
 801110a:	460c      	mov	r4, r1
 801110c:	469a      	mov	sl, r3
 801110e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011112:	d807      	bhi.n	8011124 <_printf_i+0x28>
 8011114:	2f62      	cmp	r7, #98	@ 0x62
 8011116:	d80a      	bhi.n	801112e <_printf_i+0x32>
 8011118:	2f00      	cmp	r7, #0
 801111a:	f000 80d1 	beq.w	80112c0 <_printf_i+0x1c4>
 801111e:	2f58      	cmp	r7, #88	@ 0x58
 8011120:	f000 80b8 	beq.w	8011294 <_printf_i+0x198>
 8011124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801112c:	e03a      	b.n	80111a4 <_printf_i+0xa8>
 801112e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011132:	2b15      	cmp	r3, #21
 8011134:	d8f6      	bhi.n	8011124 <_printf_i+0x28>
 8011136:	a101      	add	r1, pc, #4	@ (adr r1, 801113c <_printf_i+0x40>)
 8011138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801113c:	08011195 	.word	0x08011195
 8011140:	080111a9 	.word	0x080111a9
 8011144:	08011125 	.word	0x08011125
 8011148:	08011125 	.word	0x08011125
 801114c:	08011125 	.word	0x08011125
 8011150:	08011125 	.word	0x08011125
 8011154:	080111a9 	.word	0x080111a9
 8011158:	08011125 	.word	0x08011125
 801115c:	08011125 	.word	0x08011125
 8011160:	08011125 	.word	0x08011125
 8011164:	08011125 	.word	0x08011125
 8011168:	080112a7 	.word	0x080112a7
 801116c:	080111d3 	.word	0x080111d3
 8011170:	08011261 	.word	0x08011261
 8011174:	08011125 	.word	0x08011125
 8011178:	08011125 	.word	0x08011125
 801117c:	080112c9 	.word	0x080112c9
 8011180:	08011125 	.word	0x08011125
 8011184:	080111d3 	.word	0x080111d3
 8011188:	08011125 	.word	0x08011125
 801118c:	08011125 	.word	0x08011125
 8011190:	08011269 	.word	0x08011269
 8011194:	6833      	ldr	r3, [r6, #0]
 8011196:	1d1a      	adds	r2, r3, #4
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	6032      	str	r2, [r6, #0]
 801119c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80111a4:	2301      	movs	r3, #1
 80111a6:	e09c      	b.n	80112e2 <_printf_i+0x1e6>
 80111a8:	6833      	ldr	r3, [r6, #0]
 80111aa:	6820      	ldr	r0, [r4, #0]
 80111ac:	1d19      	adds	r1, r3, #4
 80111ae:	6031      	str	r1, [r6, #0]
 80111b0:	0606      	lsls	r6, r0, #24
 80111b2:	d501      	bpl.n	80111b8 <_printf_i+0xbc>
 80111b4:	681d      	ldr	r5, [r3, #0]
 80111b6:	e003      	b.n	80111c0 <_printf_i+0xc4>
 80111b8:	0645      	lsls	r5, r0, #25
 80111ba:	d5fb      	bpl.n	80111b4 <_printf_i+0xb8>
 80111bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	da03      	bge.n	80111cc <_printf_i+0xd0>
 80111c4:	232d      	movs	r3, #45	@ 0x2d
 80111c6:	426d      	negs	r5, r5
 80111c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111cc:	4858      	ldr	r0, [pc, #352]	@ (8011330 <_printf_i+0x234>)
 80111ce:	230a      	movs	r3, #10
 80111d0:	e011      	b.n	80111f6 <_printf_i+0xfa>
 80111d2:	6821      	ldr	r1, [r4, #0]
 80111d4:	6833      	ldr	r3, [r6, #0]
 80111d6:	0608      	lsls	r0, r1, #24
 80111d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80111dc:	d402      	bmi.n	80111e4 <_printf_i+0xe8>
 80111de:	0649      	lsls	r1, r1, #25
 80111e0:	bf48      	it	mi
 80111e2:	b2ad      	uxthmi	r5, r5
 80111e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80111e6:	4852      	ldr	r0, [pc, #328]	@ (8011330 <_printf_i+0x234>)
 80111e8:	6033      	str	r3, [r6, #0]
 80111ea:	bf14      	ite	ne
 80111ec:	230a      	movne	r3, #10
 80111ee:	2308      	moveq	r3, #8
 80111f0:	2100      	movs	r1, #0
 80111f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80111f6:	6866      	ldr	r6, [r4, #4]
 80111f8:	60a6      	str	r6, [r4, #8]
 80111fa:	2e00      	cmp	r6, #0
 80111fc:	db05      	blt.n	801120a <_printf_i+0x10e>
 80111fe:	6821      	ldr	r1, [r4, #0]
 8011200:	432e      	orrs	r6, r5
 8011202:	f021 0104 	bic.w	r1, r1, #4
 8011206:	6021      	str	r1, [r4, #0]
 8011208:	d04b      	beq.n	80112a2 <_printf_i+0x1a6>
 801120a:	4616      	mov	r6, r2
 801120c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011210:	fb03 5711 	mls	r7, r3, r1, r5
 8011214:	5dc7      	ldrb	r7, [r0, r7]
 8011216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801121a:	462f      	mov	r7, r5
 801121c:	42bb      	cmp	r3, r7
 801121e:	460d      	mov	r5, r1
 8011220:	d9f4      	bls.n	801120c <_printf_i+0x110>
 8011222:	2b08      	cmp	r3, #8
 8011224:	d10b      	bne.n	801123e <_printf_i+0x142>
 8011226:	6823      	ldr	r3, [r4, #0]
 8011228:	07df      	lsls	r7, r3, #31
 801122a:	d508      	bpl.n	801123e <_printf_i+0x142>
 801122c:	6923      	ldr	r3, [r4, #16]
 801122e:	6861      	ldr	r1, [r4, #4]
 8011230:	4299      	cmp	r1, r3
 8011232:	bfde      	ittt	le
 8011234:	2330      	movle	r3, #48	@ 0x30
 8011236:	f806 3c01 	strble.w	r3, [r6, #-1]
 801123a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801123e:	1b92      	subs	r2, r2, r6
 8011240:	6122      	str	r2, [r4, #16]
 8011242:	f8cd a000 	str.w	sl, [sp]
 8011246:	464b      	mov	r3, r9
 8011248:	aa03      	add	r2, sp, #12
 801124a:	4621      	mov	r1, r4
 801124c:	4640      	mov	r0, r8
 801124e:	f7ff fee7 	bl	8011020 <_printf_common>
 8011252:	3001      	adds	r0, #1
 8011254:	d14a      	bne.n	80112ec <_printf_i+0x1f0>
 8011256:	f04f 30ff 	mov.w	r0, #4294967295
 801125a:	b004      	add	sp, #16
 801125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011260:	6823      	ldr	r3, [r4, #0]
 8011262:	f043 0320 	orr.w	r3, r3, #32
 8011266:	6023      	str	r3, [r4, #0]
 8011268:	4832      	ldr	r0, [pc, #200]	@ (8011334 <_printf_i+0x238>)
 801126a:	2778      	movs	r7, #120	@ 0x78
 801126c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011270:	6823      	ldr	r3, [r4, #0]
 8011272:	6831      	ldr	r1, [r6, #0]
 8011274:	061f      	lsls	r7, r3, #24
 8011276:	f851 5b04 	ldr.w	r5, [r1], #4
 801127a:	d402      	bmi.n	8011282 <_printf_i+0x186>
 801127c:	065f      	lsls	r7, r3, #25
 801127e:	bf48      	it	mi
 8011280:	b2ad      	uxthmi	r5, r5
 8011282:	6031      	str	r1, [r6, #0]
 8011284:	07d9      	lsls	r1, r3, #31
 8011286:	bf44      	itt	mi
 8011288:	f043 0320 	orrmi.w	r3, r3, #32
 801128c:	6023      	strmi	r3, [r4, #0]
 801128e:	b11d      	cbz	r5, 8011298 <_printf_i+0x19c>
 8011290:	2310      	movs	r3, #16
 8011292:	e7ad      	b.n	80111f0 <_printf_i+0xf4>
 8011294:	4826      	ldr	r0, [pc, #152]	@ (8011330 <_printf_i+0x234>)
 8011296:	e7e9      	b.n	801126c <_printf_i+0x170>
 8011298:	6823      	ldr	r3, [r4, #0]
 801129a:	f023 0320 	bic.w	r3, r3, #32
 801129e:	6023      	str	r3, [r4, #0]
 80112a0:	e7f6      	b.n	8011290 <_printf_i+0x194>
 80112a2:	4616      	mov	r6, r2
 80112a4:	e7bd      	b.n	8011222 <_printf_i+0x126>
 80112a6:	6833      	ldr	r3, [r6, #0]
 80112a8:	6825      	ldr	r5, [r4, #0]
 80112aa:	6961      	ldr	r1, [r4, #20]
 80112ac:	1d18      	adds	r0, r3, #4
 80112ae:	6030      	str	r0, [r6, #0]
 80112b0:	062e      	lsls	r6, r5, #24
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	d501      	bpl.n	80112ba <_printf_i+0x1be>
 80112b6:	6019      	str	r1, [r3, #0]
 80112b8:	e002      	b.n	80112c0 <_printf_i+0x1c4>
 80112ba:	0668      	lsls	r0, r5, #25
 80112bc:	d5fb      	bpl.n	80112b6 <_printf_i+0x1ba>
 80112be:	8019      	strh	r1, [r3, #0]
 80112c0:	2300      	movs	r3, #0
 80112c2:	6123      	str	r3, [r4, #16]
 80112c4:	4616      	mov	r6, r2
 80112c6:	e7bc      	b.n	8011242 <_printf_i+0x146>
 80112c8:	6833      	ldr	r3, [r6, #0]
 80112ca:	1d1a      	adds	r2, r3, #4
 80112cc:	6032      	str	r2, [r6, #0]
 80112ce:	681e      	ldr	r6, [r3, #0]
 80112d0:	6862      	ldr	r2, [r4, #4]
 80112d2:	2100      	movs	r1, #0
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7ee ffb3 	bl	8000240 <memchr>
 80112da:	b108      	cbz	r0, 80112e0 <_printf_i+0x1e4>
 80112dc:	1b80      	subs	r0, r0, r6
 80112de:	6060      	str	r0, [r4, #4]
 80112e0:	6863      	ldr	r3, [r4, #4]
 80112e2:	6123      	str	r3, [r4, #16]
 80112e4:	2300      	movs	r3, #0
 80112e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112ea:	e7aa      	b.n	8011242 <_printf_i+0x146>
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	4632      	mov	r2, r6
 80112f0:	4649      	mov	r1, r9
 80112f2:	4640      	mov	r0, r8
 80112f4:	47d0      	blx	sl
 80112f6:	3001      	adds	r0, #1
 80112f8:	d0ad      	beq.n	8011256 <_printf_i+0x15a>
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	079b      	lsls	r3, r3, #30
 80112fe:	d413      	bmi.n	8011328 <_printf_i+0x22c>
 8011300:	68e0      	ldr	r0, [r4, #12]
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	4298      	cmp	r0, r3
 8011306:	bfb8      	it	lt
 8011308:	4618      	movlt	r0, r3
 801130a:	e7a6      	b.n	801125a <_printf_i+0x15e>
 801130c:	2301      	movs	r3, #1
 801130e:	4632      	mov	r2, r6
 8011310:	4649      	mov	r1, r9
 8011312:	4640      	mov	r0, r8
 8011314:	47d0      	blx	sl
 8011316:	3001      	adds	r0, #1
 8011318:	d09d      	beq.n	8011256 <_printf_i+0x15a>
 801131a:	3501      	adds	r5, #1
 801131c:	68e3      	ldr	r3, [r4, #12]
 801131e:	9903      	ldr	r1, [sp, #12]
 8011320:	1a5b      	subs	r3, r3, r1
 8011322:	42ab      	cmp	r3, r5
 8011324:	dcf2      	bgt.n	801130c <_printf_i+0x210>
 8011326:	e7eb      	b.n	8011300 <_printf_i+0x204>
 8011328:	2500      	movs	r5, #0
 801132a:	f104 0619 	add.w	r6, r4, #25
 801132e:	e7f5      	b.n	801131c <_printf_i+0x220>
 8011330:	080115e9 	.word	0x080115e9
 8011334:	080115fa 	.word	0x080115fa

08011338 <memmove>:
 8011338:	4288      	cmp	r0, r1
 801133a:	b510      	push	{r4, lr}
 801133c:	eb01 0402 	add.w	r4, r1, r2
 8011340:	d902      	bls.n	8011348 <memmove+0x10>
 8011342:	4284      	cmp	r4, r0
 8011344:	4623      	mov	r3, r4
 8011346:	d807      	bhi.n	8011358 <memmove+0x20>
 8011348:	1e43      	subs	r3, r0, #1
 801134a:	42a1      	cmp	r1, r4
 801134c:	d008      	beq.n	8011360 <memmove+0x28>
 801134e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011356:	e7f8      	b.n	801134a <memmove+0x12>
 8011358:	4402      	add	r2, r0
 801135a:	4601      	mov	r1, r0
 801135c:	428a      	cmp	r2, r1
 801135e:	d100      	bne.n	8011362 <memmove+0x2a>
 8011360:	bd10      	pop	{r4, pc}
 8011362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801136a:	e7f7      	b.n	801135c <memmove+0x24>

0801136c <_sbrk_r>:
 801136c:	b538      	push	{r3, r4, r5, lr}
 801136e:	4d06      	ldr	r5, [pc, #24]	@ (8011388 <_sbrk_r+0x1c>)
 8011370:	2300      	movs	r3, #0
 8011372:	4604      	mov	r4, r0
 8011374:	4608      	mov	r0, r1
 8011376:	602b      	str	r3, [r5, #0]
 8011378:	f7f0 ff0a 	bl	8002190 <_sbrk>
 801137c:	1c43      	adds	r3, r0, #1
 801137e:	d102      	bne.n	8011386 <_sbrk_r+0x1a>
 8011380:	682b      	ldr	r3, [r5, #0]
 8011382:	b103      	cbz	r3, 8011386 <_sbrk_r+0x1a>
 8011384:	6023      	str	r3, [r4, #0]
 8011386:	bd38      	pop	{r3, r4, r5, pc}
 8011388:	2001218c 	.word	0x2001218c

0801138c <_realloc_r>:
 801138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011390:	4607      	mov	r7, r0
 8011392:	4614      	mov	r4, r2
 8011394:	460d      	mov	r5, r1
 8011396:	b921      	cbnz	r1, 80113a2 <_realloc_r+0x16>
 8011398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801139c:	4611      	mov	r1, r2
 801139e:	f7ff bc5b 	b.w	8010c58 <_malloc_r>
 80113a2:	b92a      	cbnz	r2, 80113b0 <_realloc_r+0x24>
 80113a4:	f7ff fbec 	bl	8010b80 <_free_r>
 80113a8:	4625      	mov	r5, r4
 80113aa:	4628      	mov	r0, r5
 80113ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b0:	f000 f81a 	bl	80113e8 <_malloc_usable_size_r>
 80113b4:	4284      	cmp	r4, r0
 80113b6:	4606      	mov	r6, r0
 80113b8:	d802      	bhi.n	80113c0 <_realloc_r+0x34>
 80113ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113be:	d8f4      	bhi.n	80113aa <_realloc_r+0x1e>
 80113c0:	4621      	mov	r1, r4
 80113c2:	4638      	mov	r0, r7
 80113c4:	f7ff fc48 	bl	8010c58 <_malloc_r>
 80113c8:	4680      	mov	r8, r0
 80113ca:	b908      	cbnz	r0, 80113d0 <_realloc_r+0x44>
 80113cc:	4645      	mov	r5, r8
 80113ce:	e7ec      	b.n	80113aa <_realloc_r+0x1e>
 80113d0:	42b4      	cmp	r4, r6
 80113d2:	4622      	mov	r2, r4
 80113d4:	4629      	mov	r1, r5
 80113d6:	bf28      	it	cs
 80113d8:	4632      	movcs	r2, r6
 80113da:	f7ff fbc3 	bl	8010b64 <memcpy>
 80113de:	4629      	mov	r1, r5
 80113e0:	4638      	mov	r0, r7
 80113e2:	f7ff fbcd 	bl	8010b80 <_free_r>
 80113e6:	e7f1      	b.n	80113cc <_realloc_r+0x40>

080113e8 <_malloc_usable_size_r>:
 80113e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113ec:	1f18      	subs	r0, r3, #4
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	bfbc      	itt	lt
 80113f2:	580b      	ldrlt	r3, [r1, r0]
 80113f4:	18c0      	addlt	r0, r0, r3
 80113f6:	4770      	bx	lr

080113f8 <_init>:
 80113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fa:	bf00      	nop
 80113fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113fe:	bc08      	pop	{r3}
 8011400:	469e      	mov	lr, r3
 8011402:	4770      	bx	lr

08011404 <_fini>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	bf00      	nop
 8011408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140a:	bc08      	pop	{r3}
 801140c:	469e      	mov	lr, r3
 801140e:	4770      	bx	lr
